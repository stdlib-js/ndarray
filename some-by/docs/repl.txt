
{{alias}}( x, n[, options], predicate[, thisArg] )
    Tests whether at least `n` elements along one or more ndarray dimensions
    pass a test implemented by a predicate function.

    Parameters
    ----------
    x: ndarray
        Input ndarray.

    n: ndarray|integer
        Number of elements which must pass the test implemented by a predicate
        function. Must be broadcast compatible with the non-reduced dimensions
        of input ndarray. Must have an integer data type.

    options: Object (optional)
        Function options.

    options.dims: Array<integer> (optional)
        List of dimensions over which to perform a reduction. If not provided,
        the function performs a reduction over all elements in a provided input
        ndarray.

    options.keepdims: boolean (optional)
        Boolean indicating whether the reduced dimensions should be included in
        the returned ndarray as singleton dimensions. Default: false.

    predicate: Function
        Predicate function.

    thisArg: Any (optional)
        Predicate execution context.

    Returns
    -------
    out: ndarray
        Output ndarray. When performing a reduction over all elements, the
        function returns a zero-dimensional ndarray containing the result.

    Examples
    --------
    > function f ( v ) { return v > 0.0; };
    > var x = {{alias:@stdlib/ndarray/array}}( [ [ 1, 2], [ 3, 4 ] ] );
    > var y = {{alias}}( x, 3, f )
    <ndarray>
    > y.get()
    true
    > y = {{alias}}( x, 3, { 'keepdims': true }, f )
    <ndarray>
    > {{alias:@stdlib/ndarray/to-array}}( y )
    [ [ true ] ]
    > y.get( 0, 0 )
    true


{{alias}}.assign( x, n, y[, options], predicate[, thisArg] )
    Tests whether at least `n` elements along one or more ndarray dimensions
    pass a test implemented by a predicate function.

    Parameters
    ----------
    x: ndarray
        Input ndarray.

    n: ndarray|integer
        Number of elements which must pass the test implemented by a predicate
        function. Must be broadcast compatible with the non-reduced dimensions
        of input ndarray. Must have an integer data type.

    y: ndarray
        Output ndarray. The output shape must match the shape of the non-reduced
        dimensions of the input ndarray.

    options: Object (optional)
        Function options.

    options.dims: Array<integer> (optional)
        List of dimensions over which to perform a reduction. If not provided,
        the function performs a reduction over all elements in a provided input
        ndarray.

    options.keepdims: boolean (optional)
        Boolean indicating whether the reduced dimensions should be included in
        the returned ndarray as singleton dimensions. Default: false.

    predicate: Function
        Predicate function.

    thisArg: Any (optional)
        Predicate execution context.

    Returns
    -------
    y: ndarray
        Output ndarray.

    Examples
    --------
    > function f ( v ) { return v > 0.0 };
    > var x = {{alias:@stdlib/ndarray/array}}( [ [ 1, 2], [ 3, 4 ] ] );
    > var y = {{alias:@stdlib/ndarray/from-scalar}}( false );
    > var out = {{alias}}.assign( x, 3, y, f )
    <ndarray>
    > var bool = ( out === y )
    true
    > y.get()
    true

    See Also
    --------

