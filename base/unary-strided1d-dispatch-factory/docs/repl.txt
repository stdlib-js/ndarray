
{{alias}}( table, idtypes, odtypes, policy )
    Returns function for applying a strided function to an input ndarray.

    Parameters
    ----------
    table: Function
        Dispatch table containing strided functions.

    idtypes: Array<Array<string>>
        List containing lists of supported input array data types for each input
        ndarray argument.

    odtypes: Array<string>
        List of supported output array data types.

    policy: string
        Output data type policy.

    Returns
    -------
    fcn: Function
        Function for applying a strided function to ndarrays.

    Examples
    --------
    > var dt = [ 'float64', 'float32', 'generic' ];
    > var t = { 'default': {{alias:@stdlib/stats/base/ndarray/cumax}} };
    > var f = {{alias}}( t, [ dt ], dt, 'same' );


fcn( x[, ...args][, options] )
    Applies a strided function to a provided input ndarray.

    Parameters
    ----------
    x: ndarray
        Input array.

    args: ...ndarray (optional)
        Additional ndarray arguments.

    options: Object (optional)
        Function options.

    options.dtype: string (optional)
        Output array data type. Setting this option overrides the output data
        type policy.

    options.dims: Array<integer> (optional)
        List of dimensions over which to perform operation. If not provided, the
        function performs the operation over all elements in a provided input
        ndarray.

    Returns
    -------
    out: ndarray
        Output array.

    Examples
    --------
    > var dtypes = [ 'float64', 'float32', 'generic' ];
    > var t = { 'default': {{alias:@stdlib/stats/base/ndarray/cumax}} };
    > var f = {{alias}}( t, [ dtypes ], dtypes, 'same' );
    > var buf = [ -1.0, 2.0, -3.0, -4.0 ];
    > var dt = 'generic';
    > var sh = [ buf.length ];
    > var sx = [ 1 ];
    > var ox = 0;
    > var ord = 'row-major';
    > var x = new {{alias:@stdlib/ndarray/ctor}}( dt, buf, sh, sx, ox, ord );
    > var y = f( x );
    > {{alias:@stdlib/ndarray/to-array}}( y )
    [ -1.0, 2.0, 2.0, 2.0 ]


fcn.assign( x[, ...args], out[, options] )
    Applies a strided function to a provided input ndarray and assigns results
    to a provided output ndarray.

    Parameters
    ----------
    x: ndarray
        Input array.

    args: ...ndarray (optional)
        Additional ndarray arguments.

    out: ndarray
        Output array.

    options: Object (optional)
        Function options.

    options.dims: Array<integer> (optional)
        List of dimensions over which to perform operation. If not provided, the
        function performs the operation over all elements in a provided input
        ndarray.

    Returns
    -------
    out: ndarray
        Output array.

    Examples
    --------
    > var dtypes = [ 'float64', 'float32', 'generic' ];
    > var t = { 'default': {{alias:@stdlib/stats/base/ndarray/cumax}} };
    > var f = {{alias}}( t, [ dtypes ], dtypes, 'same' );
    > var buf = [ -1.0, 2.0, -3.0, -4.0 ];
    > var dt = 'generic';
    > var sh = [ buf.length ];
    > var sx = [ 1 ];
    > var ox = 0;
    > var ord = 'row-major';
    > var x = new {{alias:@stdlib/ndarray/ctor}}( dt, buf, sh, sx, ox, ord );
    > var out = {{alias:@stdlib/ndarray/zeros-like}}( x );
    > var y = f.assign( x, out )
    <ndarray>
    > var bool = ( out === y )
    true
    > {{alias:@stdlib/ndarray/to-array}}( y )
    [ -1.0, 2.0, 2.0, 2.0 ]

    See Also
    --------

