{"version":3,"file":"index.mjs","sources":["../base/shape2strides/lib/main.js","../base/strides2offset/lib/main.js","../base/strides2order/lib/main.js","../base/numel/lib/main.js","../base/shape2strides/lib/index.js","../base/shape2strides/lib/assign.js","../orders/lib/main.js","../orders/lib/enum.js","../orders/lib/index.js","../base/assert/is-order/lib/main.js","../dtypes/lib/main.js","../dtypes/lib/enum.js","../dtypes/lib/index.js","../dtypes/lib/assign.js","../base/assert/is-data-type/lib/main.js","../base/minmax-view-buffer-index/lib/main.js","../base/assert/is-buffer-length-compatible/lib/main.js","../base/minmax-view-buffer-index/lib/index.js","../base/minmax-view-buffer-index/lib/assign.js","../base/bytes-per-element/lib/main.js","../base/iteration-order/lib/main.js","../base/ctor/lib/is_column_major_contiguous.js","../base/ctor/lib/is_row_major_contiguous.js","../base/ctor/lib/tostring.js","../index-modes/lib/main.js","../index-modes/lib/enum.js","../index-modes/lib/index.js","../base/ctor/lib/meta2dataview.js","../base/ctor/lib/meta2dataview.polyfill.js","../base/ctor/lib/main.js","../base/ctor/lib/is_contiguous.js","../defaults/lib/main.js","../base/ctor/lib/copy_flags.js","../base/ctor/lib/get.js","../base/ctor/lib/iget.js","../base/ctor/lib/set.js","../base/ctor/lib/iset.js","../base/ctor/lib/tojson.js","../defaults/lib/get.js","../base/clamp-index/lib/main.js","../base/wrap-index/lib/main.js","../base/normalize-index/lib/main.js","../defaults/lib/index.js","../base/assert/is-index-mode/lib/main.js","../base/ind/lib/factory.js","../base/ind/lib/main.js","../base/ind/lib/index.js","../ctor/lib/iget.js","../ctor/lib/iset.js","../ctor/lib/copy_array.js","../ctor/lib/validate.js","../ctor/lib/main.js","../ctor/lib/get.js","../ctor/lib/set.js","../casting-modes/lib/main.js","../casting-modes/lib/index.js","../casting-modes/lib/enum.js","../base/assert/is-casting-mode/lib/main.js","../base/dtype-enum2str/lib/main.js","../base/dtype-str2enum/lib/main.js","../base/dtype-resolve-str/lib/main.js","../safe-casts/lib/main.js","../base/assert/is-safe-data-type-cast/lib/main.js","../mostly-safe-casts/lib/main.js","../base/assert/is-mostly-safe-data-type-cast/lib/main.js","../same-kind-casts/lib/main.js","../base/assert/is-same-kind-data-type-cast/lib/main.js","../base/assert/is-allowed-data-type-cast/lib/main.js","../base/buffer-ctors/lib/ctors.js","../base/buffer-ctors/lib/main.js","../base/buffer/lib/main.js","../base/buffer/lib/zeros.js","../base/buffer-dtype/lib/ctor2dtype.js","../base/buffer-dtype/lib/ctors.js","../base/buffer-dtype/lib/dtypes.js","../base/buffer-dtype/lib/main.js","../dtype/lib/main.js","../shape/lib/main.js","../strides/lib/main.js","../offset/lib/main.js","../ndims/lib/main.js","../order/lib/main.js","../data-buffer/lib/main.js","../array/lib/is_array_like_object.js","../array/lib/cast_buffer.js","../array/lib/copy_view.js","../array/lib/expand_shape.js","../array/lib/expand_strides.js","../array/lib/main.js","../array/lib/defaults.js","../base/assert/is-column-major/lib/main.js","../base/assert/is-single-segment-compatible/lib/main.js","../base/assert/is-complex-floating-point-data-type/lib/main.js","../base/assert/is-floating-point-data-type/lib/main.js","../base/assert/is-integer-data-type/lib/main.js","../base/assert/is-numeric-data-type/lib/main.js","../base/assert/is-read-only/lib/main.js","../base/assert/is-real-data-type/lib/main.js","../base/assert/is-real-floating-point-data-type/lib/main.js","../base/assert/is-row-major/lib/main.js","../base/assert/is-signed-integer-data-type/lib/main.js","../base/assert/is-unsigned-integer-data-type/lib/main.js","../base/assert/lib/index.js","../base/dtype/lib/main.js","../base/shape/lib/main.js","../base/assert/is-buffer-length-compatible-shape/lib/main.js","../base/assert/is-column-major-contiguous/lib/main.js","../base/assert/is-contiguous/lib/main.js","../base/assert/is-row-major-contiguous/lib/main.js","../base/strides/lib/main.js","../base/offset/lib/main.js","../base/order/lib/main.js","../base/data-buffer/lib/main.js","../base/ndarraylike2object/lib/main.js","../base/unary-loop-interchange-order/lib/main.js","../base/unary-loop-interchange-order/lib/sort2ins.js","../base/unary-tiling-block-size/lib/defaults.js","../base/unary-tiling-block-size/lib/main.js","../base/vind2bind/lib/main.js","../base/assign/lib/main.js","../base/assign/lib/0d.js","../base/assign/lib/1d.js","../base/assign/lib/2d.js","../base/assign/lib/3d.js","../base/assign/lib/4d.js","../base/assign/lib/5d.js","../base/assign/lib/6d.js","../base/assign/lib/7d.js","../base/assign/lib/8d.js","../base/assign/lib/9d.js","../base/assign/lib/10d.js","../base/assign/lib/0d_accessors.js","../base/assign/lib/1d_accessors.js","../base/assign/lib/2d_accessors.js","../base/assign/lib/3d_accessors.js","../base/assign/lib/4d_accessors.js","../base/assign/lib/5d_accessors.js","../base/assign/lib/6d_accessors.js","../base/assign/lib/7d_accessors.js","../base/assign/lib/8d_accessors.js","../base/assign/lib/9d_accessors.js","../base/assign/lib/10d_accessors.js","../base/assign/lib/2d_blocked.js","../base/assign/lib/3d_blocked.js","../base/assign/lib/4d_blocked.js","../base/assign/lib/5d_blocked.js","../base/assign/lib/6d_blocked.js","../base/assign/lib/7d_blocked.js","../base/assign/lib/8d_blocked.js","../base/assign/lib/9d_blocked.js","../base/assign/lib/10d_blocked.js","../base/assign/lib/2d_blocked_accessors.js","../base/assign/lib/3d_blocked_accessors.js","../base/assign/lib/4d_blocked_accessors.js","../base/assign/lib/5d_blocked_accessors.js","../base/assign/lib/6d_blocked_accessors.js","../base/assign/lib/7d_blocked_accessors.js","../base/assign/lib/8d_blocked_accessors.js","../base/assign/lib/9d_blocked_accessors.js","../base/assign/lib/10d_blocked_accessors.js","../base/assign/lib/nd_accessors.js","../base/assign/lib/nd.js","../base/binary-tiling-block-size/lib/defaults.js","../base/dtype-char/lib/main.js","../base/char2dtype/lib/main.js","../base/dtype-desc/lib/main.js","../base/broadcast-array/lib/main.js","../base/dtype-char/lib/table.js","../base/dtype-resolve-enum/lib/main.js","../base/dtypes2signatures/lib/main.js","../base/slice/lib/main.js","../base/slice/lib/empty.js","../base/slice/lib/slice_start.js","../base/slice/lib/slice_strides.js","../base/ndims/lib/main.js","../base/reverse-dimension/lib/main.js","../base/ind2sub/lib/assign.js","../base/ind2sub/lib/main.js","../base/ind2sub/lib/index.js","../base/next-cartesian-index/lib/assign.js","../base/next-cartesian-index/lib/main.js","../base/nullary-loop-interchange-order/lib/main.js","../base/nullary-loop-interchange-order/lib/sort2ins.js","../base/next-cartesian-index/lib/index.js","../base/nullary-tiling-block-size/lib/defaults.js","../base/nullary-tiling-block-size/lib/main.js","../base/nullary/lib/main.js","../base/nullary/lib/0d.js","../base/nullary/lib/1d.js","../base/nullary/lib/2d.js","../base/nullary/lib/3d.js","../base/nullary/lib/4d.js","../base/nullary/lib/5d.js","../base/nullary/lib/6d.js","../base/nullary/lib/7d.js","../base/nullary/lib/8d.js","../base/nullary/lib/9d.js","../base/nullary/lib/10d.js","../base/nullary/lib/0d_accessors.js","../base/nullary/lib/1d_accessors.js","../base/nullary/lib/2d_accessors.js","../base/nullary/lib/3d_accessors.js","../base/nullary/lib/4d_accessors.js","../base/nullary/lib/5d_accessors.js","../base/nullary/lib/6d_accessors.js","../base/nullary/lib/7d_accessors.js","../base/nullary/lib/8d_accessors.js","../base/nullary/lib/9d_accessors.js","../base/nullary/lib/10d_accessors.js","../base/nullary/lib/2d_blocked.js","../base/nullary/lib/3d_blocked.js","../base/nullary/lib/4d_blocked.js","../base/nullary/lib/5d_blocked.js","../base/nullary/lib/6d_blocked.js","../base/nullary/lib/7d_blocked.js","../base/nullary/lib/8d_blocked.js","../base/nullary/lib/9d_blocked.js","../base/nullary/lib/10d_blocked.js","../base/nullary/lib/2d_blocked_accessors.js","../base/nullary/lib/3d_blocked_accessors.js","../base/nullary/lib/4d_blocked_accessors.js","../base/nullary/lib/5d_blocked_accessors.js","../base/nullary/lib/6d_blocked_accessors.js","../base/nullary/lib/7d_blocked_accessors.js","../base/nullary/lib/8d_blocked_accessors.js","../base/nullary/lib/9d_blocked_accessors.js","../base/nullary/lib/10d_blocked_accessors.js","../output-dtype-policies/lib/main.js","../output-dtype-policies/lib/enum.js","../output-dtype-policies/lib/index.js","../output-dtype-policies/lib/assign.js","../base/output-policy-enum2str/lib/main.js","../base/output-policy-str2enum/lib/main.js","../base/serialize-meta-data/lib/main.js","../base/serialize-meta-data/lib/polyfill.js","../base/serialize-meta-data/lib/index.js","../base/slice-assign/lib/main.js","../base/slice-dimension/lib/main.js","../base/slice-dimension-from/lib/main.js","../base/slice-dimension-to/lib/main.js","../base/slice-from/lib/main.js","../base/slice-to/lib/main.js","../base/stride/lib/main.js","../base/sub2ind/lib/main.js","../base/to-array/lib/recurse.js","../base/to-array/lib/main.js","../base/unary/lib/main.js","../base/unary/lib/0d.js","../base/unary/lib/1d.js","../base/unary/lib/2d.js","../base/unary/lib/3d.js","../base/unary/lib/4d.js","../base/unary/lib/5d.js","../base/unary/lib/6d.js","../base/unary/lib/7d.js","../base/unary/lib/8d.js","../base/unary/lib/9d.js","../base/unary/lib/10d.js","../base/unary/lib/0d_accessors.js","../base/unary/lib/1d_accessors.js","../base/unary/lib/2d_accessors.js","../base/unary/lib/3d_accessors.js","../base/unary/lib/4d_accessors.js","../base/unary/lib/5d_accessors.js","../base/unary/lib/6d_accessors.js","../base/unary/lib/7d_accessors.js","../base/unary/lib/8d_accessors.js","../base/unary/lib/9d_accessors.js","../base/unary/lib/10d_accessors.js","../base/unary/lib/2d_blocked.js","../base/unary/lib/3d_blocked.js","../base/unary/lib/4d_blocked.js","../base/unary/lib/5d_blocked.js","../base/unary/lib/6d_blocked.js","../base/unary/lib/7d_blocked.js","../base/unary/lib/8d_blocked.js","../base/unary/lib/9d_blocked.js","../base/unary/lib/10d_blocked.js","../base/unary/lib/2d_blocked_accessors.js","../base/unary/lib/3d_blocked_accessors.js","../base/unary/lib/4d_blocked_accessors.js","../base/unary/lib/5d_blocked_accessors.js","../base/unary/lib/6d_blocked_accessors.js","../base/unary/lib/7d_blocked_accessors.js","../base/unary/lib/8d_blocked_accessors.js","../base/unary/lib/9d_blocked_accessors.js","../base/unary/lib/10d_blocked_accessors.js","../base/unary-by/lib/main.js","../base/unary-by/lib/0d.js","../base/unary-by/lib/1d.js","../base/unary-by/lib/2d.js","../base/unary-by/lib/3d.js","../base/unary-by/lib/4d.js","../base/unary-by/lib/5d.js","../base/unary-by/lib/6d.js","../base/unary-by/lib/7d.js","../base/unary-by/lib/8d.js","../base/unary-by/lib/9d.js","../base/unary-by/lib/10d.js","../base/unary-by/lib/0d_accessors.js","../base/unary-by/lib/1d_accessors.js","../base/unary-by/lib/2d_accessors.js","../base/unary-by/lib/3d_accessors.js","../base/unary-by/lib/4d_accessors.js","../base/unary-by/lib/5d_accessors.js","../base/unary-by/lib/6d_accessors.js","../base/unary-by/lib/7d_accessors.js","../base/unary-by/lib/8d_accessors.js","../base/unary-by/lib/9d_accessors.js","../base/unary-by/lib/10d_accessors.js","../base/unary-by/lib/2d_blocked.js","../base/unary-by/lib/3d_blocked.js","../base/unary-by/lib/4d_blocked.js","../base/unary-by/lib/5d_blocked.js","../base/unary-by/lib/6d_blocked.js","../base/unary-by/lib/7d_blocked.js","../base/unary-by/lib/8d_blocked.js","../base/unary-by/lib/9d_blocked.js","../base/unary-by/lib/10d_blocked.js","../base/unary-by/lib/2d_blocked_accessors.js","../base/unary-by/lib/3d_blocked_accessors.js","../base/unary-by/lib/4d_blocked_accessors.js","../base/unary-by/lib/5d_blocked_accessors.js","../base/unary-by/lib/6d_blocked_accessors.js","../base/unary-by/lib/7d_blocked_accessors.js","../base/unary-by/lib/8d_blocked_accessors.js","../base/unary-by/lib/9d_blocked_accessors.js","../base/unary-by/lib/10d_blocked_accessors.js","../base/unary-output-dtype/lib/main.js","../base/lib/index.js","../broadcast-array/lib/main.js","../dispatch/lib/index_of_types.js","../dispatch/lib/main.js","../base/binary-loop-interchange-order/lib/main.js","../base/binary-loop-interchange-order/lib/sort2ins.js","../base/binary-tiling-block-size/lib/main.js","../base/bind2vind/lib/main.js","../base/broadcast-scalar/lib/main.js","../base/broadcast-shapes/lib/main.js","../base/buffer-dtype-enum/lib/main.js","../base/dtype-desc/lib/table.js","../base/dtype2c/lib/main.js","../base/empty/lib/main.js","../base/empty-like/lib/main.js","../base/expand-dimensions/lib/main.js","../base/fliplr/lib/main.js","../base/flipud/lib/main.js","../base/from-scalar/lib/main.js","../base/max-view-buffer-index/lib/main.js","../base/maybe-broadcast-array/lib/main.js","../base/meta-data-props/lib/main.js","../base/min-view-buffer-index/lib/main.js","../base/nonsingleton-dimensions/lib/main.js","../base/nullary/lib/nd_accessors.js","../base/nullary/lib/nd.js","../base/output-policy-resolve-enum/lib/main.js","../base/output-policy-resolve-str/lib/main.js","../base/prepend-singleton-dimensions/lib/main.js","../base/remove-singleton-dimensions/lib/main.js","../base/reverse/lib/main.js","../base/singleton-dimensions/lib/main.js","../base/transpose/lib/main.js","../base/unary/lib/nd_accessors.js","../base/unary/lib/nd.js","../base/unary-by/lib/nd_accessors.js","../base/unary-by/lib/nd.js","../base/zeros/lib/main.js","../base/zeros-like/lib/main.js","../empty/lib/main.js","../empty-like/lib/main.js","../fancy/lib/re_integer.js","../fancy/lib/re_subseq.js","../fancy/lib/prop2slice.0d.js","../fancy/lib/prop2slice.1d.js","../fancy/lib/prop2slice.nd.js","../fancy/lib/has_property.js","../fancy/lib/error_message.js","../fancy/lib/error_constructor.js","../fancy/lib/get.js","../fancy/lib/get_value.js","../fancy/lib/get_slice.js","../min-dtype/lib/main.js","../from-scalar/lib/main.js","../fancy/lib/set_slice.js","../fancy/lib/set.js","../fancy/lib/set_value.js","../fancy/lib/main.js","../ind2sub/lib/validate.js","../ind2sub/lib/main.js","../to-array/lib/main.js","../ind2sub/lib/index.js","../ind2sub/lib/assign.js","../iter/lib/index.js","../maybe-broadcast-array/lib/main.js","../iter/column-entries/lib/main.js","../iter/columns/lib/main.js","../iter/entries/lib/main.js","../iter/indices/lib/main.js","../iter/matrices/lib/main.js","../iter/matrix-entries/lib/main.js","../iter/row-entries/lib/main.js","../iter/rows/lib/main.js","../iter/to-array-each/lib/main.js","../iter/values/lib/main.js","../next-dtype/lib/main.js","../numel/lib/main.js","../promotion-rules/lib/main.js","../slice/lib/main.js","../slice-assign/lib/main.js","../slice-dimension/lib/main.js","../slice-dimension-from/lib/main.js","../slice-dimension-to/lib/main.js","../slice-from/lib/main.js","../slice-to/lib/main.js","../stride/lib/main.js","../sub2ind/lib/validate.js","../sub2ind/lib/main.js","../zeros/lib/main.js","../zeros-like/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Generates a stride array from an array shape (row-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {Array} array strides\n*/\nfunction rowmajor( shape ) {\n\tvar ndims;\n\tvar out;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tout = [];\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tout.push( 0 );\n\t}\n\ts = 1;\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n/**\n* Generates a stride array from an array shape (column-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {Array} array strides\n*/\nfunction columnmajor( shape ) {\n\tvar out;\n\tvar s;\n\tvar i;\n\n\tout = [];\n\ts = 1;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tout.push( s );\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates a stride array from an array shape.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {Array} array strides\n*\n* @example\n* var s = shape2strides( [ 3, 2 ], 'row-major' );\n* // returns [ 2, 1 ]\n*\n* s = shape2strides( [ 3, 2 ], 'column-major' );\n* // returns [ 1, 3 ]\n*/\nfunction shape2strides( shape, order ) {\n\tif ( order === 'column-major' ) {\n\t\treturn columnmajor( shape );\n\t}\n\treturn rowmajor( shape );\n}\n\n\n// EXPORTS //\n\nexport default shape2strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the index offset which specifies the location of the first indexed value in a multidimensional array based on a stride array.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @returns {NonNegativeInteger} offset - offset\n*\n* @example\n* var shape = [ 2, 3, 10 ];\n* var strides = [ 30, -10, 1 ];\n*\n* var offset = strides2offset( shape, strides );\n* // returns 20\n*/\nfunction strides2offset( shape, strides ) {\n\tvar offset;\n\tvar ndims;\n\tvar i;\n\n\tndims = shape.length;\n\toffset = 0;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( strides[ i ] < 0 ) {\n\t\t\t// Note that, since the stride is negative, this operation increments, not decrements, the offset...\n\t\t\toffset -= strides[ i ] * ( shape[ i ]-1 );\n\t\t}\n\t}\n\treturn offset;\n}\n\n\n// EXPORTS //\n\nexport default strides2offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Determines the order of a multidimensional array based on a provided stride array.\n*\n* @param {IntegerArray} strides - stride array\n* @returns {integer} order\n*\n* @example\n* import strides2order from '@stdlib/ndarray/base/strides2order';\n*\n* var order = strides2order( [ 2, 1 ] );\n* // returns 1\n*\n* order = strides2order( [ 1, 2 ] );\n* // returns 2\n*\n* order = strides2order( [ 1, 1, 1 ] );\n* // returns 3\n*\n* order = strides2order( [ 2, 3, 1 ] );\n* // returns 0\n*/\nfunction strides2order( strides ) {\n\tvar column;\n\tvar ndims;\n\tvar row;\n\tvar s1;\n\tvar s2;\n\tvar i;\n\n\tndims = strides.length;\n\tif ( ndims === 0 ) {\n\t\treturn 0|0; // 'none'\n\t}\n\tcolumn = true;\n\trow = true;\n\n\ts1 = abs( strides[ 0 ] );\n\tfor ( i = 1; i < ndims; i++ ) {\n\t\ts2 = abs( strides[ i ] );\n\t\tif ( column && s2 < s1 ) {\n\t\t\tcolumn = false;\n\t\t} else if ( row && s2 > s1 ) {\n\t\t\trow = false;\n\t\t}\n\t\tif ( row || column ) {\n\t\t\ts1 = s2;\n\t\t} else {\n\t\t\treturn 0|0; // 'none'\n\t\t}\n\t}\n\tif ( row && column ) {\n\t\treturn 3|0; // 'both'\n\t}\n\tif ( row ) {\n\t\treturn 1|0; // 'row-major'\n\t}\n\treturn 2|0; // 'column-major'\n}\n\n\n// EXPORTS //\n\nexport default strides2order;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the number of elements in an array.\n*\n* @param {(NonNegativeIntegerArray|EmptyArray)} shape - array shape\n* @returns {NonNegativeInteger} number of elements\n*\n* @example\n* var n = numel( [ 3, 3, 3 ] );\n* // returns 27\n*/\nfunction numel( shape ) {\n\tvar ndims;\n\tvar n;\n\tvar i;\n\n\tndims = shape.length;\n\tif ( ndims === 0 ) {\n\t\treturn 0;\n\t}\n\tn = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tn *= shape[ i ];\n\t}\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default numel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a stride array from an array shape.\n*\n* @module @stdlib/ndarray/base/shape2strides\n*\n* @example\n* import shape2strides from '@stdlib/ndarray/base/shape2strides';\n*\n* var strides = shape2strides( [ 3, 2 ], 'row-major' );\n* // returns [ 2, 1 ]\n*\n* strides = shape2strides( [ 3, 2 ], 'column-major' );\n* // returns [ 1, 3 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Generates a stride array from an array shape (row-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*/\nfunction rowmajor( shape, out ) {\n\tvar ndims;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\ts = 1;\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n/**\n* Generates a stride array from an array shape (column-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*/\nfunction columnmajor( shape, out ) {\n\tvar s;\n\tvar i;\n\n\ts = 1;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates a stride array from an array shape.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*\n* @example\n* var strides = [ 0, 0 ];\n*\n* var out = shape2strides( [ 3, 2 ], 'row-major', strides );\n* // returns [ 2, 1 ]\n*\n* var bool = ( out === strides );\n* // returns true\n*\n* out = shape2strides( [ 3, 2 ], 'column-major', strides );\n* // returns [ 1, 3 ]\n*/\nfunction shape2strides( shape, order, out ) {\n\tif ( order === 'column-major' ) {\n\t\treturn columnmajor( shape, out );\n\t}\n\treturn rowmajor( shape, out );\n}\n\n\n// EXPORTS //\n\nexport default shape2strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ORDERS from './orders.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray orders.\n*\n* @returns {StringArray} list of ndarray orders\n*\n* @example\n* var list = orders();\n* // returns [ 'row-major', 'column-major' ]\n*/\nfunction orders() {\n\treturn ORDERS.slice();\n}\n\n\n// EXPORTS //\n\nexport default orders;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported orders to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `row-major == 1`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects.\n*\n* @returns {Object} object mapping supported orders to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `orders.h` enumeration!!!!\n\treturn {\n\t\t// Row-major (C-style):\n\t\t'row-major': 1,\n\n\t\t// Column-major (Fortran-style):\n\t\t'column-major': 2\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray orders.\n*\n* @module @stdlib/ndarray/orders\n*\n* @example\n* import orders from '@stdlib/ndarray/orders';\n*\n* var list = orders();\n* // returns [ 'row-major', 'column-major' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport orders from './../../../../orders';\n\n\n// VARIABLES //\n\nvar ORDERS = orders();\nvar len = ORDERS.length;\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is an ndarray order.\n*\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is an ndarray order\n*\n* @example\n* var bool = isOrder( 'row-major' );\n* // returns true\n*\n* bool = isOrder( 'column-major' );\n* // returns true\n*\n* bool = isOrder( 'foo' );\n* // returns false\n*/\nfunction isOrder( v ) {\n\tvar i;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( v === ORDERS[ i ] ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DTYPES from './dtypes.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray data types.\n*\n* @param {string} [kind] - data type kind\n* @returns {StringArray} list of ndarray data types\n*\n* @example\n* var list = dtypes();\n* // returns [...]\n*\n* @example\n* var list = dtypes( 'floating_point' );\n* // returns [...]\n*/\nfunction dtypes() {\n\tvar out;\n\tif ( arguments.length === 0 ) {\n\t\treturn DTYPES.all.slice();\n\t}\n\tout = DTYPES[ arguments[ 0 ] ];\n\treturn ( out ) ? out.slice() : [];\n}\n\n\n// EXPORTS //\n\nexport default dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable stdlib/empty-line-before-comment */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported data type strings to enumeration constants.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects. While certain dtypes, such as \"generic\" and \"binary\", have special behavior in JavaScript, they do not have a direct complement in C.\n*\n* @private\n* @returns {Object} object mapping supported dtypes to enumeration constants\n*\n* @example\n* var table = enumeration();\n* // returns <Object>\n*/\nfunction enumeration() {\n\t// NOTE: the following should match the C `dtypes.h` enumeration!!!!\n\treturn {\n\t\t// Boolean data types:\n\t\t'bool': 0,\n\n\t\t// Integer data types:\n\t\t'int8': 1,\n\t\t'uint8': 2,\n\t\t'uint8c': 3,\n\t\t'int16': 4,\n\t\t'uint16': 5,\n\t\t'int32': 6,\n\t\t'uint32': 7,\n\t\t'int64': 8,\n\t\t'uint64': 9,\n\t\t// 'int128': 10, // uncomment once supported\n\t\t// 'uint128': 11,\n\t\t// 'int256': 12,\n\t\t// 'uint256': 13,\n\n\t\t// Floating-point data types:\n\t\t// 'float16': 14,\n\t\t// 'bfloat16': 15,\n\t\t'float32': 10,\n\t\t'float64': 11,\n\t\t// 'float128': 18, // uncomment once supported\n\n\t\t// Complex floating-point number data types:\n\t\t'complex64': 12,\n\t\t'complex128': 13,\n\n\t\t// Data type for \"binary\" data (i.e., data stored in a Node.js `Buffer` object):\n\t\t'binary': 14,\n\n\t\t// Data type for \"generic\" JavaScript values (objects):\n\t\t'generic': 15,\n\n\t\t// Define a signaling value which is guaranteed not to be a valid type enumeration value:\n\t\t'notype': 17,\n\n\t\t// Indicate the start of user defined type numbers (leaving room for type growth above):\n\t\t'userdefined_type': 256\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumeration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray data types.\n*\n* @module @stdlib/ndarray/dtypes\n*\n* @example\n* import dtypes from '@stdlib/ndarray/dtypes';\n*\n* var list = dtypes();\n* // returns [...]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\nassign( main, enumeration() );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\nimport objectKeys from '@stdlib/utils/keys';\n\n\n// MAIN //\n\n/**\n* Copies all enumerable own properties from a source object to a target object as enumerable read-only properties.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @returns {Object} modified target object\n*\n* @example\n* var source = {\n*     'beep': 'boop'\n* };\n* var target = {};\n*\n* var out = assign( target, source );\n* // returns <Object>\n*\n* var bool = ( out === target );\n* // returns true\n*\n* var v = target.beep;\n* // returns 'boop'\n*/\nfunction assign( target, source ) {\n\tvar keys;\n\tvar k;\n\tvar i;\n\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tsetReadOnly( target, k, source[ k ] );\n\t}\n\treturn target;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray data type.\n*\n* @name isDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray data type\n*\n* @example\n* var bool = isDataType( 'binary' );\n* // returns true\n*\n* bool = isDataType( 'float32' );\n* // returns true\n*\n* bool = isDataType( 'float64' );\n* // returns true\n*\n* bool = isDataType( 'generic' );\n* // returns true\n*\n* bool = isDataType( 'int16' );\n* // returns true\n*\n* bool = isDataType( 'int32' );\n* // returns true\n*\n* bool = isDataType( 'int8' );\n* // returns true\n*\n* bool = isDataType( 'uint16' );\n* // returns true\n*\n* bool = isDataType( 'uint32' );\n* // returns true\n*\n* bool = isDataType( 'uint8' );\n* // returns true\n*\n* bool = isDataType( 'uint8c' );\n* // returns true\n*\n* bool = isDataType( 'foo' );\n* // returns false\n*/\nvar isDataType = contains( dtypes() );\n\n\n// EXPORTS //\n\nexport default isDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {Array} linear indices\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 10, 1 ];\n* var offset = 10;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 10, 109 ]\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -10, -1 ];\n* var offset = 99;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 0, 99 ]\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 1, 10 ];\n* var offset = 10;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 10, 109 ]\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -1, -10 ];\n* var offset = 99;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 0, 99 ]\n*/\nfunction minmaxViewBufferIndex( shape, strides, offset ) {\n\tvar ndims;\n\tvar min;\n\tvar max;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tmin = offset;\n\tmax = offset;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( shape[ i ] === 0 ) {\n\t\t\treturn [ offset, offset ];\n\t\t}\n\t\ts = strides[ i ];\n\t\tif ( s > 0 ) {\n\t\t\tmax += s * ( shape[i]-1 );\n\t\t} else if ( s < 0 ) {\n\t\t\tmin += s * ( shape[i]-1 ); // decrements min\n\t\t}\n\t}\n\treturn [ min, max ];\n}\n\n\n// EXPORTS //\n\nexport default minmaxViewBufferIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport minmax from './../../../../base/minmax-view-buffer-index';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a buffer length is compatible with provided ndarray meta data.\n*\n* @param {NonNegativeInteger} len - buffer length\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {boolean} boolean indicating if a buffer length is compatible\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var bool = isBufferLengthCompatible( 4, shape, strides, offset );\n* // returns true\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 2;\n*\n* var bool = isBufferLengthCompatible( 4, shape, strides, offset );\n* // returns false\n*/\nfunction isBufferLengthCompatible( len, shape, strides, offset ) {\n\t// Determine the minimum and maximum linear indices which are accessible by the array view:\n\tvar buf = minmax( shape, strides, offset );\n\n\t// If the indices are \"inbounds\", then the buffer length is compatible:\n\treturn ( buf[ 0 ] >= 0 && buf[ 1 ] < len );\n}\n\n\n// EXPORTS //\n\nexport default isBufferLengthCompatible;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.\n*\n* @module @stdlib/ndarray/base/minmax-view-buffer-index\n*\n* @example\n* import minmaxViewBufferIndex from '@stdlib/ndarray/base/minmax-view-buffer-index';\n*\n* var shape = [ 10, 10 ];\n* var strides = [ 10, 1 ];\n* var offset = 10;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 10, 109 ]\n*\n* @example\n* import minmaxViewBufferIndex from '@stdlib/ndarray/base/minmax-view-buffer-index';\n*\n* var shape = [ 10, 10 ];\n* var strides = [ -10, -1 ];\n* var offset = 99;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 0, 99 ]\n*\n* @example\n* import minmaxViewBufferIndex from '@stdlib/ndarray/base/minmax-view-buffer-index';\n*\n* var shape = [ 10, 10 ];\n* var strides = [ 1, 10 ];\n* var offset = 10;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 10, 109 ]\n*\n* @example\n* import minmaxViewBufferIndex from '@stdlib/ndarray/base/minmax-view-buffer-index';\n*\n* var shape = [ 10, 10 ];\n* var strides = [ -1, -10 ];\n* var offset = 99;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 0, 99 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view and assigns results to a provided output array.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} linear indices\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 10, 1 ];\n* var offset = 10;\n*\n* var out = [ 0, 0 ];\n* var idx = minmaxViewBufferIndex( shape, strides, offset, out );\n* // returns [ 10, 109 ]\n*\n* var bool = ( idx === out );\n* // returns true\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -10, -1 ];\n* var offset = 99;\n*\n* var out = [ 0, 0 ];\n* var idx = minmaxViewBufferIndex( shape, strides, offset, out );\n* // returns [ 0, 99 ]\n*\n* var bool = ( idx === out );\n* // returns true\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 1, 10 ];\n* var offset = 10;\n*\n* var out = [ 0, 0 ];\n* var idx = minmaxViewBufferIndex( shape, strides, offset, out );\n* // returns [ 10, 109 ]\n*\n* var bool = ( idx === out );\n* // returns true\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -1, -10 ];\n* var offset = 99;\n*\n* var out = [ 0, 0 ];\n* var idx = minmaxViewBufferIndex( shape, strides, offset, out );\n* // returns [ 0, 99 ]\n*\n* var bool = ( idx === out );\n* // returns true\n*/\nfunction minmaxViewBufferIndex( shape, strides, offset, out ) {\n\tvar ndims;\n\tvar min;\n\tvar max;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tmin = offset;\n\tmax = offset;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( shape[ i ] === 0 ) {\n\t\t\tout[ 0 ] = offset;\n\t\t\tout[ 1 ] = offset;\n\t\t\treturn out;\n\t\t}\n\t\ts = strides[ i ];\n\t\tif ( s > 0 ) {\n\t\t\tmax += s * ( shape[i]-1 );\n\t\t} else if ( s < 0 ) {\n\t\t\tmin += s * ( shape[i]-1 ); // decrements min\n\t\t}\n\t}\n\tout[ 0 ] = min;\n\tout[ 1 ] = max;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmaxViewBufferIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport BYTES_PER_ELEMENT from './bytes_per_element.json';\n\n\n// MAIN //\n\n/**\n* Returns the number of bytes per element provided an underlying array data type.\n*\n* @param {string} dtype - data type\n* @returns {(NonNegativeInteger|null)} number of bytes per element\n*\n* @example\n* var nbytes = bytesPerElement( 'float64' );\n* // returns 8\n*\n* nbytes = bytesPerElement( 'generic' );\n* // returns null\n*/\nfunction bytesPerElement( dtype ) {\n\treturn BYTES_PER_ELEMENT[ dtype ] || null;\n}\n\n\n// EXPORTS //\n\nexport default bytesPerElement;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns array iteration order.\n*\n* ## Notes\n*\n* -   Return value key:\n*\n*     -   `0`: unordered (i.e., strides of mixed sign; e.g., `[ 9, -3, 1 ]`)\n*     -   `1`: ordered left-to-right (i.e., all nonnegative strides)\n*     -   `-1`: ordered right-to-left (i.e., all negative strides)\n*\n* @param {IntegerArray} strides - stride array\n* @returns {integer} iteration order\n*\n* @example\n* var o = iterationOrder( [ 2, 1 ] );\n* // returns 1\n*\n* o = iterationOrder( [ -2, 1 ] );\n* // returns 0\n*\n* o = iterationOrder( [ -2, -1 ] );\n* // returns -1\n*/\nfunction iterationOrder( strides ) {\n\tvar cnt;\n\tvar i;\n\n\tcnt = 0;\n\tfor ( i = 0; i < strides.length; i++ ) {\n\t\tif ( strides[ i ] < 0 ) {\n\t\t\tcnt += 1;\n\t\t}\n\t}\n\tif ( cnt === 0 ) {\n\t\t// All nonnegative strides:\n\t\treturn 1|0; // asm-type annotation\n\t}\n\tif ( cnt === strides.length ) {\n\t\t// All negative strides:\n\t\treturn -1|0; // asm-type annotation\n\t}\n\t// Strides of mixed signs:\n\treturn 0|0; // asm-type annotation\n}\n\n\n// EXPORTS //\n\nexport default iterationOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Determines if an array is column-major contiguous.\n*\n* @private\n* @param {integer} order - **inferred** array order\n* @param {boolean} contiguous - boolean indicating is an array is contiguous\n* @returns {boolean} boolean indicating if an array is column-major contiguous\n*/\nfunction isColumnMajorContiguous( order, contiguous ) {\n\treturn contiguous && ( order === 2 || order === 3 );\n}\n\n\n// EXPORTS //\n\nexport default isColumnMajorContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Determines if an array is row-major contiguous.\n*\n* @private\n* @param {integer} order - **inferred** array order\n* @param {boolean} contiguous - boolean indicating is an array is contiguous\n* @returns {boolean} boolean indicating if an array is row-major contiguous\n*/\nfunction isRowMajorContiguous( order, contiguous ) {\n\treturn contiguous && ( order === 1 || order === 3 );\n}\n\n\n// EXPORTS //\n\nexport default isRowMajorContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string/replace';\nimport real from '@stdlib/complex/real';\nimport imag from '@stdlib/complex/imag';\n\n\n// VARIABLES //\n\nvar CTORS = {\n\t'int8': 'new Int8Array( [ {{data}} ] )',\n\t'uint8': 'new Uint8Array( [ {{data}} ] )',\n\t'uint8c': 'new Uint8ClampedArray( [ {{data}} ] )',\n\t'int16': 'new Int16Array( [ {{data}} ] )',\n\t'uint16': 'new Uint16Array( [ {{data}} ] )',\n\t'int32': 'new Int32Array( [ {{data}} ] )',\n\t'uint32': 'new Uint32Array( [ {{data}} ] )',\n\t'float32': 'new Float32Array( [ {{data}} ] )',\n\t'float64': 'new Float64Array( [ {{data}} ] )',\n\t'generic': '[ {{data}} ]',\n\t'binary': 'new Buffer( [ {{data}} ] )',\n\t'complex64': 'new Complex64Array( [ {{data}} ] )',\n\t'complex128': 'new Complex128Array( [ {{data}} ] )'\n};\n\n\n// MAIN //\n\n/**\n* Serializes an ndarray as a string.\n*\n* ## Notes\n*\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @private\n* @returns {string} string representation\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar buffer;\n\tvar ndims;\n\tvar ctor;\n\tvar str;\n\tvar dt;\n\tvar v;\n\tvar i;\n\n\tndims = this._shape.length;\n\tdt = this._dtype;\n\n\t// Function to invoke to create an ndarray:\n\tstr = 'ndarray( \\''+dt+'\\', ';\n\n\t// Data buffer parameter...\n\tbuffer = '';\n\tif ( this._length <= 100 ) {\n\t\tif ( dt === 'complex64' || dt === 'complex128' ) {\n\t\t\tfor ( i = 0; i < this._length; i++ ) {\n\t\t\t\tv = this.iget( i );\n\t\t\t\tbuffer += real( v ) + ', ' + imag( v );\n\t\t\t\tif ( i < this._length-1 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < this._length; i++ ) {\n\t\t\t\tbuffer += this.iget( i );\n\t\t\t\tif ( i < this._length-1 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// First three values...\n\t\tif ( dt === 'complex64' || dt === 'complex128' ) {\n\t\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\t\tv = this.iget( i );\n\t\t\t\tbuffer += real( v ) + ', ' + imag( v );\n\t\t\t\tif ( i < 2 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\t\tbuffer += this.iget( i );\n\t\t\t\tif ( i < 2 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbuffer += ', ..., ';\n\n\t\t// Last three values...\n\t\tif ( dt === 'complex64' || dt === 'complex128' ) {\n\t\t\tfor ( i = 2; i >= 0; i-- ) {\n\t\t\t\tv = this.iget( this._length-1-i );\n\t\t\t\tbuffer += real( v ) + ', ' + imag( v );\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 2; i >= 0; i-- ) {\n\t\t\t\tbuffer += this.iget( this._length-1-i );\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tctor = CTORS[ this.dtype ];\n\tstr += replace( ctor, '{{data}}', buffer );\n\tstr += ', ';\n\n\t// Array shape...\n\tif ( ndims === 0 ) {\n\t\tstr += '[]';\n\t} else {\n\t\tstr += '[ ' + this._shape.join( ', ' ) + ' ]';\n\t}\n\tstr += ', ';\n\n\t// Stride array...\n\tstr += '[ ';\n\tif ( ndims === 0 ) {\n\t\tstr += '0';\n\t} else {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( this._strides[ i ] < 0 ) {\n\t\t\t\tstr += -this._strides[ i ];\n\t\t\t} else {\n\t\t\t\tstr += this._strides[ i ];\n\t\t\t}\n\t\t\tif ( i < ndims-1 ) {\n\t\t\t\tstr += ', ';\n\t\t\t}\n\t\t}\n\t}\n\tstr += ' ]';\n\tstr += ', ';\n\n\t// Buffer offset:\n\tstr += '0';\n\tstr += ', ';\n\n\t// Order:\n\tstr += '\\'' + this._order + '\\'';\n\n\t// Close the function call:\n\tstr += ' )';\n\treturn str;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MODES from './modes.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray index modes.\n*\n* @returns {StringArray} list of ndarray index modes\n*\n* @example\n* var list = modes();\n* // returns [ 'throw', 'normalize', 'clamp', 'wrap' ]\n*/\nfunction modes() {\n\treturn MODES.slice();\n}\n\n\n// EXPORTS //\n\nexport default modes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported index modes to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `throw == 1`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects.\n*\n* @returns {Object} object mapping supported index modes to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `index_modes.h` enumeration!!!!\n\treturn {\n\t\t'throw': 1,\n\t\t'clamp': 2,\n\t\t'wrap': 3,\n\t\t'normalize': 4\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray index modes.\n*\n* @module @stdlib/ndarray/index-modes\n*\n* @example\n* import modes from '@stdlib/ndarray/index-modes';\n*\n* var list = modes();\n* // returns [ 'throw', 'normalize', 'clamp', 'wrap' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport modes from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( modes, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default modes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert/is-little-endian';\nimport ArrayBuffer from '@stdlib/array/buffer';\nimport DataView from '@stdlib/array/dataview';\nimport BigInt from '@stdlib/bigint/ctor';\nimport { enum as dtypes } from './../../../dtypes';\nimport { enum as orders } from './../../../orders';\nimport { enum as modes } from './../../../index-modes';\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\nvar ORDERS = orders();\nvar MODES = modes();\n\n\n// FUNCTIONS //\n\n/**\n* Serializes ndarray meta data to a `DataView`.\n*\n* ## Notes\n*\n* -   This function takes into account ndarray-like objects which may support index modes.\n*\n* -   This function defaults to returning cached serialized meta data. To force serialization, set the private `__meta_dataview__` property to `null`.\n*\n* -   Serialization is performed according to host byte order (endianness).\n*\n* -   Meta data format:\n*\n*     ```text\n*     | endianness (1 byte) | <dtype> (2 bytes) | <ndims> (8 bytes) | <shape> (ndims*8 bytes) | <strides> (ndims*8 bytes) | <offset> (8 bytes) | <order> (1 byte) | <mode> (1 byte) | <nsubmodes> (8 bytes) | <submodes> (nsubmodes*1 bytes) | <flags> (4 bytes) |\n*     ```\n*\n*     which translates to the following `ArrayBuffer` layout:\n*\n*     ```text\n*     ArrayBuffer[\n*         <endianness>[int8],\n*         <dtype>[int16],\n*         <ndims>[int64],\n*         <shape>[ndims*int64],\n*         <strides>[ndims*int64],\n*         <offset>[int64],\n*         <order>[int8],\n*         <mode>[int8],\n*         <nsubmodes>[int64],\n*         <submodes>[nsubmodes*int8],\n*         <flags>[int32]\n*     ]\n*     ```\n*\n*     where `strides` and `offset` are in units of bytes.\n*\n* -   If the endianness is `1`, the byte order is little endian. If the endianness is `0`, the byte order is big endian.\n*\n* -   Buffer length:\n*\n*     ```text\n*     1 + 2 + 8 + (ndims*8) + (ndims*8) + 8 + 1 + 1 + 8 + (nsubmodes*1) + 4 = 33 + (ndims*16) + nsubmodes\n*     ```\n*\n*     For example, consider a three-dimensional ndarray with one subscript index mode (submode):\n*\n*     ```text\n*     33 + (3*16) + 1 = 82 bytes\n*     ```\n*\n* -   Views:\n*\n*     -   endianness: `Int8Array( buf, 0, 1 )`\n*     -   dtype: `Int16Array( buf, 1, 1 )`\n*     -   ndims: `Int64Array( buf, 3, 1 )`\n*     -   shape: `Int64Array( buf, 11, ndims )`\n*     -   strides: `Int64Array( buf, 11+(ndims*8), ndims )`\n*     -   offset: `Int64Array( buf, 11+(ndims*16), 1 )`\n*     -   order: `Int8Array( buf, 19+(ndims*16), 1 )`\n*     -   mode: `Int8Array( buf, 20+(ndims*16), 1 )`\n*     -   nsubmodes: `Int64Array( buf, 21+(ndims*16), 1 )`\n*     -   submodes: `Int8Array( buf, 29+(ndims*16), nsubmodes )`\n*     -   flags: `Int32Array( buf, 29+(ndims*16)+nsubmodes, 1 )`\n*\n* @private\n* @returns {DataView} serialized meta data\n*/\nfunction meta2dataview() {\n\t/* eslint-disable no-invalid-this */\n\tvar nbytes;\n\tvar flgs;\n\tvar len;\n\tvar dt;\n\tvar sh;\n\tvar st;\n\tvar sm;\n\tvar v;\n\tvar m;\n\tvar o;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar i;\n\n\tm = this._mode || 'throw';\n\tsm = this._submode || [ m ];\n\tN = this._ndims;\n\tM = sm.length;\n\n\t// Compute the amount of memory we need to allocate for storing meta data:\n\tlen = 33 + (N*16) + M;\n\n\t// Check if we've already serialized ndarray meta data and can reuse an already allocated array buffer...\n\tv = this.__meta_dataview__;\n\tif ( v && v.byteLength === len ) { // Note: the byte length check is only a bare minimum sanity check, as cached contents may still be \"stale\" (e.g., shape and/or strides may have changed)\n\t\treturn v;\n\t}\n\t// Allocate raw memory and create a view for interfacing with the allocated memory:\n\tv = new DataView( new ArrayBuffer( len ) );\n\n\t// Retrieve ndarray meta data:\n\tsh = this._shape;\n\tst = this._strides;\n\tdt = this._dtype;\n\tnbytes = this._bytesPerElement;\n\n\t// Endianness: (byteoffset: 0; bytelength: 1)\n\to = 0;\n\tv.setInt8( o, ( IS_LITTLE_ENDIAN ) ? 1 : 0 );\n\n\t// Data type: (byteoffset: 1; bytelength: 2)\n\to += 1;\n\tv.setInt16( o, DTYPES[ dt ], IS_LITTLE_ENDIAN );\n\n\t// Number of dimensions: (byteoffset: 3; bytelength: 8)\n\to += 2;\n\tv.setBigInt64( o, BigInt( N ), IS_LITTLE_ENDIAN );\n\n\t// Shape and strides: (byteoffset: 11 and 11+(ndims*8), respectively; bytelength: ndims*8 for both shape and strides, and, thus, ndims*16 total)\n\ts = N * 8; // stride length between a dimension (shape[i]) and its associated stride\n\to += 8;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv.setBigInt64( o, BigInt( sh[i] ), IS_LITTLE_ENDIAN );\n\t\tv.setBigInt64( o+s, BigInt( st[i]*nbytes ), IS_LITTLE_ENDIAN );\n\t\to += 8;\n\t}\n\t// Offset: (byteoffset: 11+(ndims*16); bytelength: 8)\n\to += s;\n\tv.setBigInt64( o, BigInt( this._offset*nbytes ), IS_LITTLE_ENDIAN );\n\n\t// Order: (byteoffset: 19+(ndims*16); bytelength: 1)\n\to += 8;\n\tv.setInt8( o, ORDERS[ this._order ] );\n\n\t// Mode: (byteoffset: 20+(ndims*16); bytelength: 1)\n\to += 1;\n\tv.setInt8( o, MODES[ m ] );\n\n\t// Number of submodes: (byteoffset: 21+(ndims*16); bytelength: 8)\n\to += 1;\n\tv.setBigInt64( o, BigInt( M ), IS_LITTLE_ENDIAN );\n\n\t// Submodes: (byteoffset: 29+(ndims*16); bytelength: nsubmodes*1)\n\to += 8;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tv.setInt8( o, MODES[ sm[i] ] );\n\t\to += 1;\n\t}\n\t// Flags: (byteoffset: 29+(ndims*16)+nsubmodes; bytelength: 4)\n\tflgs = 0|0;\n\tflgs |= ( this._flags.READONLY ) ? 4 : 0; // 00000000 00000000 00000000 00000100\n\tv.setInt32( o, flgs, IS_LITTLE_ENDIAN );\n\n\t// Cache the serialized meta data:\n\tthis.__meta_dataview__ = v;\n\n\treturn v;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// EXPORTS //\n\nexport default meta2dataview;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert/is-little-endian';\nimport ArrayBuffer from '@stdlib/array/buffer';\nimport DataView from '@stdlib/array/dataview';\nimport Uint8Array from '@stdlib/array/uint8';\nimport { enum as dtypes } from './../../../dtypes';\nimport { enum as orders } from './../../../orders';\nimport { enum as modes } from './../../../index-modes';\nimport { assign as float64ToInt64Bytes } from '@stdlib/number/float64/base/to-int64-bytes';\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\nvar ORDERS = orders();\nvar MODES = modes();\n\n\n// FUNCTIONS //\n\n/**\n* Serializes ndarray meta data to a `DataView`.\n*\n* ## Notes\n*\n* -   This function takes into account ndarray-like objects which may support index modes.\n*\n* -   This function defaults to returning cached serialized meta data. To force serialization, set the private `__meta_dataview__` property to `null`.\n*\n* -   Serialization is performed according to host byte order (endianness).\n*\n* -   Meta data format:\n*\n*     ```text\n*     | endianness (1 byte) | <dtype> (2 bytes) | <ndims> (8 bytes) | <shape> (ndims*8 bytes) | <strides> (ndims*8 bytes) | <offset> (8 bytes) | <order> (1 byte) | <mode> (1 byte) | <nsubmodes> (8 bytes) | <submodes> (nsubmodes*1 bytes) | <flags> (4 bytes) |\n*     ```\n*\n*     which translates to the following `ArrayBuffer` layout:\n*\n*     ```text\n*     ArrayBuffer[\n*         <endianness>[int8],\n*         <dtype>[int16],\n*         <ndims>[int64],\n*         <shape>[ndims*int64],\n*         <strides>[ndims*int64],\n*         <offset>[int64],\n*         <order>[int8],\n*         <mode>[int8],\n*         <nsubmodes>[int64],\n*         <submodes>[nsubmodes*int8],\n*         <flags>[int32]\n*     ]\n*     ```\n*\n*     where `strides` and `offset` are in units of bytes.\n*\n* -   If the endianness is `1`, the byte order is little endian. If the endianness is `0`, the byte order is big endian.\n*\n* -   Buffer length:\n*\n*     ```text\n*     1 + 2 + 8 + (ndims*8) + (ndims*8) + 8 + 1 + 1 + 8 + (nsubmodes*1) + 4 = 33 + (ndims*16) + nsubmodes\n*     ```\n*\n*     For example, consider a three-dimensional ndarray with one subscript index mode (submode):\n*\n*     ```text\n*     33 + (3*16) + 1 = 82 bytes\n*     ```\n*\n* -   Views:\n*\n*     -   endianness: `Int8Array( buf, 0, 1 )`\n*     -   dtype: `Int16Array( buf, 1, 1 )`\n*     -   ndims: `Int64Array( buf, 3, 1 )`\n*     -   shape: `Int64Array( buf, 11, ndims )`\n*     -   strides: `Int64Array( buf, 11+(ndims*8), ndims )`\n*     -   offset: `Int64Array( buf, 11+(ndims*16), 1 )`\n*     -   order: `Int8Array( buf, 19+(ndims*16), 1 )`\n*     -   mode: `Int8Array( buf, 20+(ndims*16), 1 )`\n*     -   nsubmodes: `Int64Array( buf, 21+(ndims*16), 1 )`\n*     -   submodes: `Int8Array( buf, 29+(ndims*16), nsubmodes )`\n*     -   flags: `Int32Array( buf, 29+(ndims*16)+nsubmodes, 1 )`\n*\n* @private\n* @returns {DataView} serialized meta data\n*/\nfunction meta2dataview() {\n\t/* eslint-disable no-invalid-this */\n\tvar nbytes;\n\tvar bytes;\n\tvar flgs;\n\tvar len;\n\tvar dt;\n\tvar sh;\n\tvar st;\n\tvar sm;\n\tvar v;\n\tvar m;\n\tvar o;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar i;\n\n\tm = this._mode || 'throw';\n\tsm = this._submode || [ m ];\n\tN = this._ndims;\n\tM = sm.length;\n\n\t// Compute the amount of memory we need to allocate for storing meta data:\n\tlen = 33 + (N*16) + M;\n\n\t// Check if we've already serialized ndarray meta data and can reuse an already allocated array buffer...\n\tv = this.__meta_dataview__;\n\tif ( v && v.byteLength === len ) { // Note: the byte length check is only a bare minimum sanity check, as cached contents may still be \"stale\" (e.g., shape and/or strides may have changed)\n\t\treturn v;\n\t}\n\t// Allocate raw memory and create views for interfacing with the allocated memory:\n\tv = new DataView( new ArrayBuffer( len ) );\n\tbytes = new Uint8Array( v.buffer );\n\n\t// Retrieve ndarray meta data:\n\tsh = this._shape;\n\tst = this._strides;\n\tdt = this._dtype;\n\tnbytes = this._bytesPerElement;\n\n\t// Endianness: (byteoffset: 0; bytelength: 1)\n\to = 0;\n\tv.setInt8( o, ( IS_LITTLE_ENDIAN ) ? 1 : 0 );\n\n\t// Data type: (byteoffset: 1; bytelength: 2)\n\to += 1;\n\tv.setInt16( o, DTYPES[ dt ], IS_LITTLE_ENDIAN );\n\n\t// Number of dimensions: (byteoffset: 3; bytelength: 8)\n\to += 2;\n\tfloat64ToInt64Bytes( N, bytes, 1, o );\n\n\t// Shape and strides: (byteoffset: 11 and 11+(ndims*8), respectively; bytelength: ndims*8 for both shape and strides, and, thus, ndims*16 total)\n\ts = N * 8; // stride length between a dimension (shape[i]) and its associated stride\n\to += 8;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tfloat64ToInt64Bytes( sh[i], bytes, 1, o );\n\t\tfloat64ToInt64Bytes( st[i]*nbytes, bytes, 1, o+s );\n\t\to += 8;\n\t}\n\t// Offset: (byteoffset: 11+(ndims*16); bytelength: 8)\n\to += s;\n\tfloat64ToInt64Bytes( this._offset*nbytes, bytes, 1, o );\n\n\t// Order: (byteoffset: 19+(ndims*16); bytelength: 1)\n\to += 8;\n\tv.setInt8( o, ORDERS[ this._order ] );\n\n\t// Mode: (byteoffset: 20+(ndims*16); bytelength: 1)\n\to += 1;\n\tv.setInt8( o, MODES[ m ] );\n\n\t// Number of submodes: (byteoffset: 21+(ndims*16); bytelength: 8)\n\to += 1;\n\tfloat64ToInt64Bytes( M, bytes, 1, o );\n\n\t// Submodes: (byteoffset: 29+(ndims*16); bytelength: nsubmodes*1)\n\to += 8;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tv.setInt8( o, MODES[ sm[i] ] );\n\t\to += 1;\n\t}\n\t// Flags: (byteoffset: 29+(ndims*16)+nsubmodes; bytelength: 4)\n\tflgs = 0|0;\n\tflgs |= ( this._flags.READONLY ) ? 4 : 0; // 00000000 00000000 00000000 00000100\n\tv.setInt32( o, flgs, IS_LITTLE_ENDIAN );\n\n\t// Cache the serialized meta data:\n\tthis.__meta_dataview__ = v;\n\n\treturn v;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// EXPORTS //\n\nexport default meta2dataview;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport hasBigIntSupport from '@stdlib/assert/has-bigint-support';\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport bytesPerElement from './../../../base/bytes-per-element';\nimport iterationOrder from './../../../base/iteration-order';\nimport strides2order from './../../../base/strides2order';\nimport Boolean from '@stdlib/boolean/ctor';\nimport isColumnMajorContiguous from './is_column_major_contiguous.js';\nimport isRowMajorContiguous from './is_row_major_contiguous.js';\nimport isContiguous from './is_contiguous.js';\nimport copyFlags from './copy_flags.js';\nimport igetValue from './iget.js';\nimport isetValue from './iset.js';\nimport setValue from './set.js';\nimport getValue from './get.js';\nimport toJSON from './tojson.js';\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\nimport meta2dataview from './meta2dataview.js';\nimport meta2dataviewPolyfill from './meta2dataview.polyfill.js';\n\n\n// MAIN //\n\n/**\n* ndarray constructor.\n*\n* ## Notes\n*\n* -   To create a zero-dimensional array,\n*\n*     ```javascript\n*     var buffer = [ 1 ];\n*     var shape = [];\n*     var strides = [ 0 ];\n*     var offset = 0;\n*\n*     var out = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*     ```\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ndarray( dtype, buffer, shape, strides, offset, order ) {\n\tvar contiguous;\n\tvar nbytes;\n\tvar ord;\n\tvar len;\n\tvar i;\n\tif ( !(this instanceof ndarray) ) {\n\t\treturn new ndarray( dtype, buffer, shape, strides, offset, order );\n\t}\n\t// Compute the number of elements...\n\tlen = 1;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\t// Compute the number of bytes...\n\tif ( buffer.BYTES_PER_ELEMENT ) {\n\t\tnbytes = buffer.BYTES_PER_ELEMENT * len;\n\t} else {\n\t\tnbytes = null;\n\t}\n\t// Set private properties...\n\tthis._byteLength = nbytes;\n\tthis._bytesPerElement = bytesPerElement( dtype );\n\tthis._buffer = buffer;\n\tthis._dtype = dtype;\n\tthis._length = len;\n\tthis._ndims = shape.length;\n\tthis._offset = offset;\n\tthis._order = order;\n\tthis._shape = shape;\n\tthis._strides = strides;\n\tthis._accessors = Boolean( buffer.get && buffer.set );\n\n\tthis._iterationOrder = iterationOrder( strides );\n\n\t// Determine if the array can be stored contiguously:\n\tcontiguous = isContiguous( len, shape, strides, offset, this._iterationOrder ); // eslint-disable-line max-len\n\n\t// Infer the array \"order\" from the stride array (this is supplementary to the `order` parameter):\n\tord = strides2order( strides );\n\n\tthis._flags = {\n\t\t'ROW_MAJOR_CONTIGUOUS': isRowMajorContiguous( ord, contiguous ),\n\t\t'COLUMN_MAJOR_CONTIGUOUS': isColumnMajorContiguous( ord, contiguous ),\n\t\t'READONLY': false\n\t};\n\n\t// Initialize a property for caching serialized meta data:\n\tthis.__meta_dataview__ = null;\n\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof ndarray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = ndarray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( ndarray, 'name', 'ndarray' );\n\n/**\n* Size (in bytes) of the array (if known).\n*\n* @name byteLength\n* @memberof ndarray.prototype\n* @type {(NonNegativeInteger|null)}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var buffer = new Float64Array( [ 1, 2, 3, 4, 5, 6 ] );\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'float64', buffer, shape, strides, offset, 'row-major' );\n*\n* var byteLength = x.byteLength;\n* // returns 48\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'byteLength', function get() {\n\treturn this._byteLength;\n});\n\n/**\n* Size (in bytes) of each array element (if known).\n*\n* @name BYTES_PER_ELEMENT\n* @memberof ndarray.prototype\n* @type {(PositiveInteger|null)}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var buffer = new Float64Array( [ 1, 2, 3, 4, 5, 6 ] );\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'float64', buffer, shape, strides, offset, 'row-major' );\n*\n* var nbytes = x.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'BYTES_PER_ELEMENT', function get() {\n\treturn this._bytesPerElement;\n});\n\n/**\n* Pointer to the underlying data buffer.\n*\n* @name data\n* @memberof ndarray.prototype\n* @type {(Array|TypedArray|Buffer)}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var data = x.data;\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'data', function get() {\n\treturn this._buffer;\n});\n\n/**\n* Underlying data type.\n*\n* @name dtype\n* @memberof ndarray.prototype\n* @type {string}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var dtype = x.dtype;\n* // returns 'generic'\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'dtype', function get() {\n\treturn this._dtype;\n});\n\n/**\n* Meta information, such as information concerning the memory layout of the array.\n*\n* @name flags\n* @memberof ndarray.prototype\n* @type {Object}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var flgs = x.flags;\n* // returns <Object>\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'flags', function get() {\n\treturn copyFlags( this._flags );\n});\n\n/**\n* Length of the array.\n*\n* @name length\n* @memberof ndarray.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var len = x.length;\n* // returns 6\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Number of dimensions.\n*\n* @name ndims\n* @memberof ndarray.prototype\n* @type {PositiveInteger}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var ndims = x.ndims;\n* // returns 2\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'ndims', function get() {\n\treturn this._ndims;\n});\n\n/**\n* Index offset which specifies the buffer index at which to start iterating over array elements.\n*\n* @name offset\n* @memberof ndarray.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var o = x.offset;\n* // returns 0\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'offset', function get() {\n\treturn this._offset;\n});\n\n/**\n* Array order.\n*\n* ## Notes\n*\n* -   The array order is either row-major (C-style) or column-major (Fortran-style).\n*\n* @name order\n* @memberof ndarray.prototype\n* @type {string}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var order = x.order;\n* // returns 'row-major'\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'order', function get() {\n\treturn this._order;\n});\n\n/**\n* Shape of the array.\n*\n* @name shape\n* @memberof ndarray.prototype\n* @type {NonNegativeIntegerArray}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var s = x.shape;\n* // returns [ 3, 2 ]\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'shape', function get() {\n\treturn this._shape.slice();\n});\n\n/**\n* Index strides which specify how to access data along corresponding array dimensions.\n*\n* @name strides\n* @memberof ndarray.prototype\n* @type {IntegerArray}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var s = x.strides;\n* // returns [ 2, 1 ]\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'strides', function get() {\n\treturn this._strides.slice();\n});\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name get\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'get', getValue );\n\n/**\n* Returns an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @name iget\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'iget', igetValue );\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name set\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*\n* x.set( 1, 1, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.get( 1, 1 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'set', setValue );\n\n/**\n* Sets an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @name iset\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*\n* x.iset( 3, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.iget( 3 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'iset', isetValue );\n\n/**\n* Serializes an ndarray as a string.\n*\n* ## Notes\n*\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @name toString\n* @memberof ndarray.prototype\n* @type {Function}\n* @returns {string} serialized ndarray\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 2;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var str = x.toString();\n* // returns \"ndarray( 'generic', [ 3, 4, 5, 6, 7, 8 ], [ 3, 2 ], [ 2, 1 ], 0, 'row-major' )\"\n*/\nsetReadOnly( ndarray.prototype, 'toString', toString );\n\n/**\n* Serializes an ndarray as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying an `ndarray` instance.\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @name toJSON\n* @memberof ndarray.prototype\n* @type {Function}\n* @returns {Object} serialized ndarray\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 2;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var o = x.toJSON();\n* // e.g., returns { 'type': 'ndarray', 'dtype': 'generic', 'flags': {...}, 'offset': 0, 'order': 'row-major', 'shape': [ 3, 2 ], 'strides': [ 2, 1 ], 'data': [ 3, 4, 5, 6, 7, 8 ] }\n*/\nsetReadOnly( ndarray.prototype, 'toJSON', toJSON );\n\n/**\n* Serializes ndarray meta data to a `DataView`.\n*\n* ## Notes\n*\n* -   Meta data format:\n*\n*     ```text\n*     | <endianness> (1 byte) | <dtype> (2 bytes) | <ndims> (8 bytes) | <shape> (ndims*8 bytes) | <strides> (ndims*8 bytes) | <offset> (8 bytes) | <order> (1 byte) | <mode> (1 byte) | <nsubmodes> (8 bytes) | <submodes> (nsubmodes*1 bytes) | <flags> (4 bytes) |\n*     ```\n*\n*     where `strides` and `offset` are in units of bytes.\n*\n* -   If the endianness is `1`, the byte order is little endian. If the endianness is `0`, the byte order is big endian.\n*\n* -   Serialization is performed according to host byte order (endianness).\n*\n* -   Consumers of this method should treat the returned `DataView` as **immutable**. Otherwise, mutation can invalidate meta data and potentially affect other consumers.\n*\n* @private\n* @name __array_meta_dataview__\n* @memberof ndarray.prototype\n* @type {Function}\n* @returns {DataView} serialized meta data\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 2;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var dv = x.__array_meta_dataview__();\n* // returns <DataView>\n*/\nsetReadOnly( ndarray.prototype, '__array_meta_dataview__', ( hasBigIntSupport() ) ? meta2dataview : meta2dataviewPolyfill );\n\n\n// EXPORTS //\n\nexport default ndarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport minmaxViewBufferIndex from './../../../base/minmax-view-buffer-index';\n\n\n// MAIN //\n\n/**\n* Determines if an array is contiguous.\n*\n* @private\n* @param {NonNegativeInteger} len - array length\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @param {integer} iterationOrder - iteration order\n* @returns {boolean} boolean indicating if an array is contiguous\n*/\nfunction isContiguous( len, shape, strides, offset, iterationOrder ) {\n\tvar buf;\n\n\t// If an array does not contain any elements, then no data to store, and, if the array is unordered, adjacent array elements are not guaranteed to be stored next to each other.\n\tif ( len === 0 || iterationOrder === 0 ) {\n\t\treturn false;\n\t}\n\t// Ensure that the array is compatible with a single memory segment:\n\tbuf = minmaxViewBufferIndex( shape, strides, offset );\n\treturn ( len === ( buf[1]-buf[0]+1 ) );\n}\n\n\n// EXPORTS //\n\nexport default isContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default ndarray settings.\n*\n* @returns {Object} defaults\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t// Data types:\n\t\t'dtypes': {\n\t\t\t'default': 'float64',\n\t\t\t'numeric': 'float64',\n\t\t\t'real': 'float64',\n\t\t\t'floating_point': 'float64',\n\t\t\t'real_floating_point': 'float64',\n\t\t\t'complex_floating_point': 'complex128',\n\t\t\t'integer': 'int32',\n\t\t\t'signed_integer': 'int32',\n\t\t\t'unsigned_integer': 'uint32'\n\t\t},\n\n\t\t// Memory layout:\n\t\t'order': 'row-major',\n\n\t\t// Casting mode:\n\t\t'casting': 'safe',\n\n\t\t// Index mode:\n\t\t'index_mode': 'throw'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies ndarray flags.\n*\n* @private\n* @param {Object} flags - flags\n* @returns {Object} copy of input object\n*/\nfunction copyFlags( flags ) {\n\treturn {\n\t\t'ROW_MAJOR_CONTIGUOUS': flags.ROW_MAJOR_CONTIGUOUS,\n\t\t'COLUMN_MAJOR_CONTIGUOUS': flags.COLUMN_MAJOR_CONTIGUOUS,\n\t\t'READONLY': flags.READONLY\n\t};\n}\n\n\n// EXPORTS //\n\nexport default copyFlags;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} idx - indices\n* @returns {*} array element\n*/\nfunction get() {\n\t/* eslint-disable no-invalid-this */\n\tvar idx;\n\tvar i;\n\n\tidx = this._offset;\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\tidx += this._strides[ i ] * arguments[ i ];\n\t}\n\tif ( this._accessors ) {\n\t\treturn this._buffer.get( idx );\n\t}\n\treturn this._buffer[ idx ];\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array element located a specified linear view index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @returns {*} array element\n*/\nfunction iget( idx ) {\n\t/* eslint-disable no-invalid-this */\n\tvar strides;\n\tvar shape;\n\tvar ndims;\n\tvar ind;\n\tvar s;\n\tvar i;\n\n\tndims = this._ndims;\n\tif ( ndims === 0 ) {\n\t\tif ( this._accessors ) {\n\t\t\treturn this._buffer.get( this._offset );\n\t\t}\n\t\treturn this._buffer[ this._offset ];\n\t}\n\tif ( this._flags.ROW_MAJOR_CONTIGUOUS || this._flags.COLUMN_MAJOR_CONTIGUOUS ) { // eslint-disable-line max-len\n\t\t// Trivial case where we have all positive strides...\n\t\tif ( this._iterationOrder === 1 ) {\n\t\t\tif ( this._accessors ) {\n\t\t\t\treturn this._buffer.get( this._offset+idx );\n\t\t\t}\n\t\t\treturn this._buffer[ this._offset+idx ];\n\t\t}\n\t\t// Trivial case where we have all negative strides...\n\t\tif ( this._iterationOrder === -1 ) {\n\t\t\tif ( this._accessors ) {\n\t\t\t\treturn this._buffer.get( this.offset-idx );\n\t\t\t}\n\t\t\treturn this._buffer[ this._offset-idx ];\n\t\t}\n\t}\n\t// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...\n\tshape = this._shape;\n\tstrides = this._strides;\n\tind = this._offset;\n\tif ( this._order === 'column-major' ) {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tind += s * strides[ i ];\n\t\t}\n\t\tif ( this._accessors ) {\n\t\t\treturn this._buffer.get( ind );\n\t\t}\n\t\treturn this._buffer[ ind ];\n\t}\n\t// Case: row-major\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\ts = idx % shape[ i ];\n\t\tidx -= s;\n\t\tidx /= shape[ i ];\n\t\tind += s * strides[ i ];\n\t}\n\tif ( this._accessors ) {\n\t\treturn this._buffer.get( ind );\n\t}\n\treturn this._buffer[ ind ];\n}\n\n\n// EXPORTS //\n\nexport default iget;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*/\nfunction set() {\n\t/* eslint-disable no-invalid-this */\n\tvar idx;\n\tvar i;\n\n\tidx = this._offset;\n\tfor ( i = 0; i < arguments.length-1; i++ ) {\n\t\tidx += this._strides[ i ] * arguments[ i ];\n\t}\n\tif ( this._accessors ) {\n\t\tthis._buffer.set( arguments[ i ], idx );\n\t} else {\n\t\tthis._buffer[ idx ] = arguments[ i ];\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default set;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets an array element located a specified linear view index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*/\nfunction iset( idx, v ) {\n\t/* eslint-disable no-invalid-this */\n\tvar strides;\n\tvar shape;\n\tvar ndims;\n\tvar ind;\n\tvar s;\n\tvar i;\n\n\tndims = this._ndims;\n\tif ( ndims === 0 ) {\n\t\tif ( this._accessors ) {\n\t\t\tthis._buffer.set( idx, this._offset );\n\t\t} else {\n\t\t\tthis._buffer[ this._offset ] = idx;\n\t\t}\n\t\treturn this;\n\t}\n\tif ( this._flags.ROW_MAJOR_CONTIGUOUS || this._flags.COLUMN_MAJOR_CONTIGUOUS ) { // eslint-disable-line max-len\n\t\t// Trivial case where we have all positive strides...\n\t\tif ( this._iterationOrder === 1 ) {\n\t\t\tif ( this._accessors ) {\n\t\t\t\tthis._buffer.set( v, this._offset+idx );\n\t\t\t} else {\n\t\t\t\tthis._buffer[ this._offset+idx ] = v;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\t// Trivial case where we have all negative strides...\n\t\tif ( this._iterationOrder === -1 ) {\n\t\t\tif ( this._accessors ) {\n\t\t\t\tthis._buffer.set( v, this._offset-idx );\n\t\t\t} else {\n\t\t\t\tthis._buffer[ this._offset-idx ] = v;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t}\n\t// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...\n\tshape = this._shape;\n\tstrides = this._strides;\n\tind = this._offset;\n\tif ( this._order === 'column-major' ) {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tind += s * strides[ i ];\n\t\t}\n\t\tif ( this._accessors ) {\n\t\t\tthis._buffer.set( v, ind );\n\t\t} else {\n\t\t\tthis._buffer[ ind ] = v;\n\t\t}\n\t\treturn this;\n\t}\n\t// Case: row-major\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\ts = idx % shape[ i ];\n\t\tidx -= s;\n\t\tidx /= shape[ i ];\n\t\tind += s * strides[ i ];\n\t}\n\tif ( this._accessors ) {\n\t\tthis._buffer.set( v, ind );\n\t} else {\n\t\tthis._buffer[ ind ] = v;\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default iset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from '@stdlib/complex/real';\nimport imag from '@stdlib/complex/imag';\n\n\n// MAIN //\n\n/**\n* Serializes an ndarray as a JSON object.\n*\n* ## Notes\n*\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out;\n\tvar len;\n\tvar v;\n\tvar i;\n\n\tlen = this._length;\n\n\t// Build an object containing all ndarray properties needed to revive a serialized ndarray...\n\tout = {};\n\tout.type = 'ndarray';\n\tout.dtype = this.dtype;\n\tout.flags = {\n\t\t'READONLY': this._flags.READONLY\n\t};\n\tout.order = this._order;\n\tout.shape = this._shape.slice();\n\tout.strides = this._strides.slice();\n\n\t// Flip the signs of negative strides:\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( out.strides[ i ] < 0 ) {\n\t\t\tout.strides[ i ] *= -1;\n\t\t}\n\t}\n\t// Cast data to generic array...\n\tout.data = [];\n\tif ( out.dtype === 'complex64' || out.dtype === 'complex128' ) {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tv = this.iget( i );\n\t\t\tout.data.push( real( v ), imag( v ) );\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.data.push( this.iget( i ) );\n\t\t}\n\t}\n\treturn out;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defaults from './main.js';\n\n\n// VARIABLES //\n\nvar DEFAULTS = defaults();\nvar HASH = {\n\t'dtypes.default': DEFAULTS.dtypes.default,\n\t'dtypes.numeric': DEFAULTS.dtypes.numeric,\n\t'dtypes.real': DEFAULTS.dtypes.real,\n\t'dtypes.floating_point': DEFAULTS.dtypes.floating_point,\n\t'dtypes.real_floating_point': DEFAULTS.dtypes.real_floating_point,\n\t'dtypes.complex_floating_point': DEFAULTS.dtypes.complex_floating_point,\n\t'dtypes.integer': DEFAULTS.dtypes.integer,\n\t'dtypes.signed_integer': DEFAULTS.dtypes.signed_integer,\n\t'dtypes.unsigned_integer': DEFAULTS.dtypes.unsigned_integer,\n\t'order': DEFAULTS.order,\n\t'casting': DEFAULTS.casting,\n\t'index_mode': DEFAULTS.index_mode\n};\n\n\n// MAIN //\n\n/**\n* Returns a default ndarray setting.\n*\n* @param {string} name - setting name\n* @returns {*} default setting or null\n*\n* @example\n* var v = get( 'dtypes.default' );\n* // returns <string>\n*/\nfunction get( name ) {\n\tvar v = HASH[ name ];\n\treturn ( v === void 0 ) ? null : v;\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Restricts an index to the interval `[0,max]`.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @returns {NonNegativeInteger} index\n*\n* @example\n* var idx = clampIndex( -1, 10 );\n* // returns 0\n*\n* idx = clampIndex( 15, 10 );\n* // returns 10\n*\n* idx = clampIndex( 5, 10 );\n* // returns 5\n*/\nfunction clampIndex( idx, max ) {\n\tif ( idx < 0 ) {\n\t\treturn 0;\n\t}\n\tif ( idx > max ) {\n\t\treturn max;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default clampIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Wraps an index on the interval `[0,max]`.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @returns {NonNegativeInteger} index\n*\n* @example\n* var idx = wrapIndex( -1, 10 );\n* // returns 10\n*\n* idx = wrapIndex( 13, 10 );\n* // returns 2\n*\n* idx = wrapIndex( 6, 10 );\n* // returns 6\n*/\nfunction wrapIndex( idx, max ) {\n\tvar mp1 = max + 1;\n\tif ( idx < 0 ) {\n\t\tidx += mp1; // slight optimization to avoid modulo arithmetic when |idx| <= max+1\n\t\tif ( idx < 0 ) {\n\t\t\tidx %= mp1;\n\t\t\tif ( idx !== 0 ) {\n\t\t\t\tidx += mp1;\n\t\t\t}\n\t\t}\n\t\treturn idx;\n\t}\n\tif ( idx > max ) {\n\t\tidx -= mp1; // slight optimization to avoid modulo arithmetic when max+1 < idx <= 2*(max+1)\n\t\tif ( idx > max ) {\n\t\t\tidx %= mp1;\n\t\t}\n\t\treturn idx;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default wrapIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Normalizes an index to the interval `[0,max]`.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @returns {integer} index\n*\n* @example\n* var idx = normalizeIndex( -2, 10 );\n* // returns 9\n*\n* idx = normalizeIndex( 15, 10 );\n* // returns -1\n*\n* idx = normalizeIndex( 5, 10 );\n* // returns 5\n*/\nfunction normalizeIndex( idx, max ) {\n\tif ( idx < 0 ) {\n\t\tidx += max + 1;\n\t\tif ( idx < 0 ) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn idx;\n\t}\n\tif ( idx > max ) {\n\t\treturn -1;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default normalizeIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return default ndarray settings.\n*\n* @module @stdlib/ndarray/defaults\n*\n* @example\n* import defaults from '@stdlib/ndarray/defaults';\n*\n* var o = defaults();\n* // returns {...}\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport get from './get.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'get', get );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport modes from './../../../../index-modes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray index mode.\n*\n* @name isIndexMode\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray index mode\n*\n* @example\n* var bool = isIndexMode( 'wrap' );\n* // returns true\n*\n* bool = isIndexMode( 'clamp' );\n* // returns true\n*\n* bool = isIndexMode( 'throw' );\n* // returns true\n*\n* bool = isIndexMode( 'foo' );\n* // returns false\n*/\nvar isIndexMode = contains( modes() );\n\n\n// EXPORTS //\n\nexport default isIndexMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport clampIndex from './../../../base/clamp-index';\nimport wrapIndex from './../../../base/wrap-index';\nimport normalize from './../../../base/normalize-index';\nimport isIndexMode from './../../../base/assert/is-index-mode';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar TABLE = {\n\t'wrap': wrapIndex,\n\t'clamp': clampIndex,\n\t'normalize': normalizeIndex,\n\t'throw': throwIfOutOfBounds\n};\n\n\n// FUNCTIONS //\n\n/**\n* Returns an index if within bounds and throw an error otherwise.\n*\n* @private\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @throws {RangeError} index out-of-bounds\n* @returns {integer} index\n*\n* @example\n* var idx = throwIfOutOfBounds( 2, 9 );\n* // returns 2\n*\n* idx = throwIfOutOfBounds( 10, 9 );\n* // throws <RangeError>\n*\n* idx = throwIfOutOfBounds( -1, 9 );\n* // throws <RangeError>\n*/\nfunction throwIfOutOfBounds( idx, max ) {\n\tif ( idx < 0 || idx > max ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index must resolve to a value on the interval: [0, %d]. Value: `%d`.', max, idx ) );\n\t}\n\treturn idx;\n}\n\n/**\n* Normalizes an index before performing a strict bounds check.\n*\n* @private\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @throws {RangeError} index out-of-bounds\n* @returns {integer} index\n*\n* @example\n* var idx = normalizeIndex( 1, 10 );\n* // returns 1\n*\n* idx = normalizeIndex( -4, 10 );\n* // returns 7\n*\n* idx = normalizeIndex( -100, 10 );\n* // throws <RangeError>\n*/\nfunction normalizeIndex( idx, max ) {\n\tvar index = normalize( idx, max );\n\tif ( index < 0 || index > max ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index must resolve to a value on the interval: [0, %d]. Value: `%d`.', max, idx ) );\n\t}\n\treturn index;\n}\n\n\n// MAIN //\n\n/**\n* Returns a function for returning an index according to a provided index mode.\n*\n* @param {string} mode - specifies how to handle an out-of-bounds index\n* @throws {TypeError} first argument must be a recognized index mode\n* @returns {Function} function for returning an index\n*\n* @example\n* var ind = factory( 'clamp' );\n*\n* var idx = ind( 2, 9 );\n* // returns 2\n*\n* idx = ind( 10, 9 );\n* // returns 9\n*\n* idx = ind( -1, 9 );\n* // returns 0\n*\n* @example\n* var ind = factory( 'wrap' );\n*\n* var idx = ind( 2, 9 );\n* // returns 2\n*\n* idx = ind( 10, 9 );\n* // returns 0\n*\n* idx = ind( -1, 9 );\n* // returns 9\n*\n* @example\n* var ind = factory( 'throw' );\n*\n* var idx = ind( 2, 9 );\n* // returns 2\n*\n* idx = ind( 10, 9 );\n* // throws <RangeError>\n*\n* idx = ind( -1, 9 );\n* // throws <RangeError>\n*\n* @example\n* var ind = factory( 'normalize' );\n*\n* var idx = ind( 1, 10 );\n* // returns 1\n*\n* idx = ind( -4, 10 );\n* // returns 7\n*\n* idx = ind( -100, 10 );\n* // throws <RangeError>\n*/\nfunction factory( mode ) {\n\tif ( !isIndexMode( mode ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a recognized index mode. Value: `%s`.', mode ) );\n\t}\n\treturn TABLE[ mode ];\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport clampIndex from './../../../base/clamp-index';\nimport wrapIndex from './../../../base/wrap-index';\nimport normalizeIndex from './../../../base/normalize-index';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an index given an index mode.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @param {string} mode - specifies how to handle an index outside the interval `[0,max]`\n* @throws {RangeError} index out-of-bounds\n* @returns {integer} index\n*\n* @example\n* var idx = ind( 2, 9, 'clamp' );\n* // returns 2\n*\n* idx = ind( 10, 9, 'clamp' );\n* // returns 9\n*\n* idx = ind( -1, 9, 'clamp' );\n* // returns 0\n*\n* @example\n* var idx = ind( 2, 9, 'wrap' );\n* // returns 2\n*\n* idx = ind( 10, 9, 'wrap' );\n* // returns 0\n*\n* idx = ind( -1, 9, 'wrap' );\n* // returns 9\n*\n* @example\n* var idx = ind( 2, 9, 'throw' );\n* // returns 2\n*\n* idx = ind( 10, 9, 'throw' );\n* // throws <RangeError>\n*\n* idx = ind( -1, 9, 'throw' );\n* // throws <RangeError>\n*\n* @example\n* var idx = ind( 1, 10, 'normalize' );\n* // returns 1\n*\n* idx = ind( -4, 10, 'normalize' );\n* // returns 7\n*\n* idx = ind( -100, 10, 'normalize' );\n* // throws <RangeError>\n*/\nfunction ind( idx, max, mode ) {\n\tvar index;\n\tif ( mode === 'clamp' ) {\n\t\treturn clampIndex( idx, max );\n\t}\n\tif ( mode === 'wrap' ) {\n\t\treturn wrapIndex( idx, max );\n\t}\n\tindex = idx;\n\tif ( mode === 'normalize' ) {\n\t\tindex = normalizeIndex( index, max );\n\t}\n\tif ( index < 0 || index > max ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index must resolve to a value on the interval: [0, %d]. Value: `%d`.', max, idx ) );\n\t}\n\treturn index;\n}\n\n\n// EXPORTS //\n\nexport default ind;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an index given an index mode.\n*\n* @module @stdlib/ndarray/base/ind\n*\n* @example\n* import ind from '@stdlib/ndarray/base/ind';\n*\n* var idx = ind( -1, 10, 'wrap' );\n* // returns 10\n*\n* idx = ind( 14, 10, 'wrap' );\n* // returns 3\n*\n* idx = ind( 6, 10, 'wrap' );\n* // returns 6\n*\n* @example\n* import ind from '@stdlib/ndarray/base/ind';\n*\n* var idx = ind( -1, 10, 'clamp' );\n* // returns 0\n*\n* idx = ind( 14, 10, 'clamp' );\n* // returns 10\n*\n* idx = ind( 6, 10, 'clamp' );\n* // returns 6\n*\n* @example\n* import ind from '@stdlib/ndarray/base/ind';\n*\n* var idx = ind( 1, 10, 'throw' );\n* // returns 1\n*\n* idx = ind( 14, 10, 'throw' );\n* // throws <RangeError>\n*\n* idx = ind( -1, 10, 'throw' );\n* // throws <RangeError>\n*\n* @example\n* import ind from '@stdlib/ndarray/base/ind';\n*\n* var idx = ind( 1, 10, 'normalize' );\n* // returns 1\n*\n* idx = ind( -4, 10, 'normalize' );\n* // returns 7\n*\n* idx = ind( -100, 10, 'normalize' );\n* // throws <RangeError>\n*\n* @example\n* import ind from '@stdlib/ndarray/base/ind';\n*\n* var fcn = ind.factory( 'clamp' );\n*\n* var idx = fcn( -1, 10 );\n* // returns 0\n*\n* idx = fcn( 14, 10 );\n* // returns 10\n*\n* idx = fcn( 6, 10 );\n* // returns 6\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport factory from './factory.js';\nimport main from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport getIndex from './../../base/ind';\nimport parent from './../../base/ctor'; // eslint-disable-line stdlib/no-redeclare\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar base = parent.prototype.iget;\n\n\n// MAIN //\n\n/**\n* Returns an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @throws {TypeError} index must be an integer\n* @throws {RangeError} index exceeds array dimensions\n* @returns {*} array element\n*/\nfunction iget( idx ) {\n\tif ( this._ndims > 0 ) {\n\t\tif ( !isInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index must be an integer. Value: `%s`.', idx ) );\n\t\t}\n\t\tidx = getIndex( idx, this._length-1, this._mode );\n\t\treturn base.call( this, idx );\n\t}\n\treturn base.call( this );\n}\n\n\n// EXPORTS //\n\nexport default iget;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// METHODS //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport getIndex from './../../base/ind';\nimport parent from './../../base/ctor'; // eslint-disable-line stdlib/no-redeclare\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar base = parent.prototype.iset;\n\n\n// MAIN //\n\n/**\n* Sets an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @param {*} v - value to set\n* @throws {Error} cannot write to a read-only array\n* @throws {TypeError} index must be an integer\n* @throws {RangeError} index exceeds array dimensions\n* @returns {ndarray} ndarray instance\n*/\nfunction iset( idx, v ) {\n\tif ( this._flags.READONLY ) {\n\t\tthrow new Error( 'invalid invocation. Cannot write to a read-only array.' );\n\t}\n\tif ( this._ndims > 0 ) {\n\t\tif ( !isInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index must be an integer. Value: `%s`.', idx ) );\n\t\t}\n\t\tidx = getIndex( idx, this._length-1, this._mode );\n\t\tbase.call( this, idx, v );\n\t} else {\n\t\tbase.call( this, idx );\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default iset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies the contents of array-like value to a new array.\n*\n* @private\n* @param {ArrayLike} arr - input array\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} output array\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0 ];\n*\n* var out = copy( arr, arr.length );\n* // returns [ 1.0, 2.0, 3.0 ]\n*\n* var bool = ( arr === out );\n* // returns false\n*/\nfunction copy( arr, len ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default copy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport isArray from '@stdlib/assert/is-array';\nimport isIndexMode from './../../base/assert/is-index-mode';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {string} [options.submode] - specifies how to handle subscripts which exceed array dimensions\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'clamp',\n*     'submode': [ 'throw', 'wrap', 'clamp' ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a recognized mode. Option: `%s`.', 'mode', opts.mode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t\tif ( !isArray( opts.submode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array containing recognized modes. Option: `%s`.', 'submode', opts.submode ) );\n\t\t}\n\t\tif ( opts.submode.length === 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array containing recognized modes. Option: `%s`.', 'submode', opts.submode.join( ',' ) ) );\n\t\t}\n\t\tfor ( i = 0; i < opts.submode.length; i++ ) {\n\t\t\tif ( !isIndexMode( opts.submode[ i ] ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. Each submode must be a recognized mode. Option: `%s`.', opts.submode[ i ] ) );\n\t\t\t}\n\t\t}\n\t\topts.submode = opts.submode.slice();\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t\tif ( !isBoolean( opts.readonly ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', opts.readonly ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isCollection from '@stdlib/assert/is-collection';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert/is-nonnegative-integer-array';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { primitives as isIntegerArray } from '@stdlib/assert/is-integer-array';\nimport isFunction from '@stdlib/assert/is-function';\nimport isOrder from './../../base/assert/is-order';\nimport isDataType from './../../base/assert/is-data-type';\nimport isBufferLengthCompatible from './../../base/assert/is-buffer-length-compatible';\nimport numel from './../../base/numel';\nimport parent from './../../base/ctor'; // eslint-disable-line stdlib/no-redeclare\nimport defaults from './../../defaults';\nimport inherit from '@stdlib/utils/inherit';\nimport format from '@stdlib/string/format';\nimport iget from './iget.js';\nimport iset from './iset.js';\nimport get from './get.js';\nimport set from './set.js';\nimport copy from './copy_array.js';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\n/*\n* See the following references:\n*\n* -  https://stackoverflow.com/questions/22747068/is-there-a-max-number-of-arguments-javascript-functions-can-accept\n* -  https://bugs.webkit.org/show_bug.cgi?id=80797\n* -  https://github.com/numpy/numpy/issues/5744\n*\n* Note that the maximum number of function arguments can vary from engine to engine. Here, we choose something of a lowest common denominator which may **not** be valid everywhere.\n*/\nvar MAX_DIMS = 32767|0;\n\nvar INDEX_MODE = defaults.get( 'index_mode' );\nvar READONLY = false;\n\n\n// MAIN //\n\n/**\n* ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ndarray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar ndims;\n\tvar opts;\n\tvar err;\n\tvar sh;\n\tvar st;\n\n\tif ( !(this instanceof ndarray) ) {\n\t\tif ( arguments.length < 7 ) {\n\t\t\treturn new ndarray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new ndarray( dtype, buffer, shape, strides, offset, order, options ); // eslint-disable-line max-len\n\t}\n\tif ( !isDataType( dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a supported ndarray data type. Value: `%s`.', dtype ) );\n\t}\n\tif ( !isCollection( buffer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object, typed-array-like, or a Buffer. Value: `%s`.', buffer ) );\n\t} else if ( buffer.get && buffer.set && ( !isFunction( buffer.get ) || !isFunction( buffer.set ) ) ) { // eslint-disable-line max-len\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `get` and `set` properties must be functions. Value: `%s`.', buffer ) );\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tif ( !isCollection( shape) || shape.length > 0 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t\t}\n\t}\n\tndims = shape.length;\n\tif ( ndims > MAX_DIMS ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of dimensions must not exceed %u due to stack limits. Value: `%u`.', MAX_DIMS, ndims ) );\n\t}\n\tif ( !isIntegerArray( strides ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an array-like object containing integers. Value: `%s`.', strides ) );\n\t}\n\tif ( ndims > 0 ) {\n\t\tif ( strides.length !== ndims ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Fourth argument length must match the number of dimensions. Expected number of dimensions: `%u`. Strides length: `%u`.', ndims, strides.length ) );\n\t\t}\n\t} else if ( strides.length !== 1 ) {\n\t\tthrow new RangeError( 'invalid argument. Fourth argument length must be equal to 1 when creating a zero-dimensional ndarray.' );\n\t} else if ( strides[ 0 ] !== 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must contain a single element equal to 0. Value: `%d`.', strides[ 0 ] ) );\n\t}\n\tif ( !isNonNegativeInteger( offset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%s`.', offset ) );\n\t}\n\tif ( !isOrder( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Sixth argument must be a supported order. Value: `%s`.', order ) );\n\t}\n\tif ( ndims > 0 && !isBufferLengthCompatible( buffer.length, shape, strides, offset ) && numel( shape ) > 0 ) { // eslint-disable-line max-len\n\t\tthrow new Error( 'invalid arguments. Input buffer is incompatible with the specified meta data. Ensure that the offset is valid with regard to the strides array and that the buffer has enough elements to satisfy the desired array shape.' );\n\t}\n\topts = {};\n\topts.mode = INDEX_MODE;\n\topts.readonly = READONLY;\n\tif ( arguments.length > 6 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tthis._mode = opts.mode;\n\tif ( opts.submode === void 0 ) {\n\t\topts.submode = [ this._mode ];\n\t}\n\tthis._submode = opts.submode;\n\n\t// Copy `shape` and `strides` to prevent external mutation:\n\tsh = copy( shape, ndims );\n\tst = copy( strides, ndims || 1 );\n\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, sh, st, offset, order );\n\tthis._flags.READONLY = opts.readonly;\n\n\treturn this;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n// Inherit from the parent constructor:\ninherit( ndarray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof ndarray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = ndarray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( ndarray, 'name', 'ndarray' );\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name get\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'get', get );\n\n/**\n* Returns an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @name iget\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'iget', iget );\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name set\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*\n* x.set( 1, 1, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.get( 1, 1 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'set', set );\n\n/**\n* Sets an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @name iset\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*\n* x.iset( 3, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.iget( 3 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'iset', iset );\n\n\n// EXPORTS //\n\nexport default ndarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport getIndex from './../../base/ind';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} [idx] - indices\n* @throws {TypeError} provided indices must be integer valued\n* @throws {RangeError} index exceeds array dimensions\n* @throws {RangeError} number of indices must equal the number of dimensions\n* @returns {*} array element\n*/\nfunction get() {\n\tvar idx;\n\tvar ind;\n\tvar M;\n\tvar i;\n\n\tif ( arguments.length !== this._ndims ) {\n\t\tthrow new RangeError( format( 'invalid arguments. Number of indices must match the number of dimensions. ndims: `%u`. nargs: `%u`.', this._ndims, arguments.length ) );\n\t}\n\tidx = this._offset;\n\tM = this._submode.length;\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Indices must be integer valued. Argument: `%u`. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t\tind = getIndex( arguments[ i ], this._shape[ i ]-1, this._submode[ i%M ] ); // eslint-disable-line max-len\n\t\tidx += this._strides[ i ] * ind;\n\t}\n\tif ( this._accessors ) {\n\t\treturn this._buffer.get( idx );\n\t}\n\treturn this._buffer[ idx ];\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport getIndex from './../../base/ind';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @throws {Error} cannot write to a read-only array\n* @throws {TypeError} provided indices must be integer valued\n* @throws {RangeError} index exceeds array dimensions\n* @throws {RangeError} number of indices must equal the number of dimensions\n* @returns {ndarray} ndarray instance\n*/\nfunction set() {\n\tvar idx;\n\tvar ind;\n\tvar M;\n\tvar i;\n\n\tif ( this._flags.READONLY ) {\n\t\tthrow new Error( 'invalid invocation. Cannot write to a read-only array.' );\n\t}\n\tif ( arguments.length !== this._ndims+1 ) {\n\t\tthrow new RangeError( format( 'invalid arguments. Number of indices must match the number of dimensions. ndims: `%u`. nargs: `%u`.', this._ndims, arguments.length ) );\n\t}\n\tidx = this._offset;\n\tM = this._submode.length;\n\tfor ( i = 0; i < arguments.length-1; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Indices must be integer valued. Argument: `%i`. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t\tind = getIndex( arguments[ i ], this._shape[ i ]-1, this._submode[ i%M ] ); // eslint-disable-line max-len\n\t\tidx += this._strides[ i ] * ind;\n\t}\n\tif ( this._accessors ) {\n\t\tthis._buffer.set( arguments[ i ], idx );\n\t} else {\n\t\tthis._buffer[ idx ] = arguments[ i ];\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default set;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MODES from './modes.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray casting modes.\n*\n* @returns {StringArray} list of ndarray casting modes\n*\n* @example\n* var list = modes();\n* // returns [ 'none', 'equiv', 'safe', 'mostly-safe', 'same-kind', 'unsafe' ]\n*/\nfunction modes() {\n\treturn MODES.slice();\n}\n\n\n// EXPORTS //\n\nexport default modes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray casting modes.\n*\n* @module @stdlib/ndarray/casting-modes\n*\n* @example\n* import modes from '@stdlib/ndarray/casting-modes';\n*\n* var list = modes();\n* // returns [ 'none', 'equiv', 'safe', 'mostly-safe', 'same-kind', 'unsafe' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport modes from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( modes, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default modes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported casting modes to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `NO_CASTING == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects.\n*\n* @returns {Object} object mapping supported casting modes to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `casting_modes.h` enumeration!!!!\n\treturn {\n\t\t'none': 0,\n\t\t'equiv': 1,\n\t\t'safe': 2,\n\t\t'mostly-safe': 3,\n\t\t'same-kind': 4,\n\t\t'unsafe': 5\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport modes from './../../../../casting-modes';\n\n\n// VARIABLES //\n\nvar MODES = modes();\nvar len = MODES.length;\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray casting mode.\n*\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray casting mode\n*\n* @example\n* var bool = isCastingMode( 'none' );\n* // returns true\n*\n* bool = isCastingMode( 'equiv' );\n* // returns true\n*\n* bool = isCastingMode( 'safe' );\n* // returns true\n*\n* bool = isCastingMode( 'mostly-safe' );\n* // returns true\n*\n* bool = isCastingMode( 'same-kind' );\n* // returns true\n*\n* bool = isCastingMode( 'unsafe' );\n* // returns true\n*\n* bool = isCastingMode( 'foo' );\n* // returns false\n*/\nfunction isCastingMode( v ) {\n\tvar i;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( v === MODES[ i ] ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isCastingMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../dtypes';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the data type string associated with an ndarray data type enumeration constant.\n*\n* @param {integer} dtype - data type enumeration constant\n* @returns {(string|null)} data type string or null\n*\n* @example\n* import str2enum from '@stdlib/ndarray/base/dtype-str2enum';\n*\n* var v = str2enum( 'float64' );\n* // returns <number>\n*\n* var dt = enum2str( v );\n* // returns 'float64'\n*/\nfunction enum2str( dtype ) {\n\tvar v = hash[ dtype ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../dtypes';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with an ndarray data type string.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} dtype - data type string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'int8' );\n* // returns <number>\n*/\nfunction str2enum( dtype ) {\n\tvar v = ENUM[ dtype ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/dtype-enum2str';\nimport str2enum from './../../../base/dtype-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the data type string associated with a supported ndarray data type value.\n*\n* @param {*} dtype - data type value\n* @returns {(string|null)} data type string or null\n*\n* @example\n* import str2enum from '@stdlib/ndarray/base/dtype-str2enum';\n*\n* var v = resolve( str2enum( 'float64' ) );\n* // returns 'float64'\n*/\nfunction resolve( dtype ) {\n\tvar t = ( typeof dtype );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( dtype ) === null ) ? null : dtype;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( dtype );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils/keys';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport resolve from './../../base/dtype-resolve-str';\nimport SAFE_CASTS from './safe_casts.json';\n\n\n// VARIABLES //\n\nvar TABLE;\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of safe casts for each ndarray data type.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( SAFE_CASTS );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = SAFE_CASTS[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n/**\n* Generates a table of safe casts for each ndarray data type.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( SAFE_CASTS );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = SAFE_CASTS[ dt1 ];\n\t\ttmp = [];\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\tif ( o[ dt2 ] === 1 ) {\n\t\t\t\ttmp.push( dt2 );\n\t\t\t}\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray data types to which a provided ndarray data type can be safely cast.\n*\n* @param {*} [dtype] - ndarray data type value\n* @returns {(Object|StringArray|null)} list of ndarray data types or null\n*\n* @example\n* var list = safeCasts( 'float32' );\n* // returns [...]\n*/\nfunction safeCasts( dtype ) {\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tif ( TABLE === void 0 ) {\n\t\t// Lazily generate table...\n\t\tTABLE = generateTable();\n\t}\n\tdtype = resolve( dtype );\n\tif ( hasOwnProp( TABLE, dtype ) ) {\n\t\treturn TABLE[ dtype ].slice();\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default safeCasts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport safeCasts from './../../../../safe-casts';\n\n\n// VARIABLES //\n\nvar TABLE = safeCasts();\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a provided ndarray data type can be safely cast to another ndarray data type.\n*\n* @param {string} from - ndarray data type\n* @param {string} to - ndarray data type\n* @returns {boolean} boolean indicating if a data type can be safely cast to another data type\n*\n* @example\n* var bool = isSafeCast( 'float32', 'float64' );\n* // returns true\n*\n* bool = isSafeCast( 'float64', 'int32' );\n* // returns false\n*/\nfunction isSafeCast( from, to ) {\n\tif ( from === to ) {\n\t\treturn true;\n\t}\n\treturn ( TABLE[ from ][ to ] > 0 );\n}\n\n\n// EXPORTS //\n\nexport default isSafeCast;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils/keys';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport resolve from './../../base/dtype-resolve-str';\nimport CASTS from './data.json';\n\n\n// VARIABLES //\n\nvar TABLE;\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of casts for each ndarray data type.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( CASTS );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = CASTS[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n/**\n* Generates a table of casts for each ndarray data type.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( CASTS );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = CASTS[ dt1 ];\n\t\ttmp = [];\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\tif ( o[ dt2 ] === 1 ) {\n\t\t\t\ttmp.push( dt2 );\n\t\t\t}\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray data types to which a provided ndarray data type can be safely cast and, for floating-point data types, can be downcast.\n*\n* @param {*} [dtype] - ndarray data type value\n* @returns {(Object|StringArray|null)} list of ndarray data types or null\n*\n* @example\n* var list = mostlySafeCasts( 'float32' );\n* // returns [...]\n*/\nfunction mostlySafeCasts( dtype ) {\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tif ( TABLE === void 0 ) {\n\t\t// Lazily generate table...\n\t\tTABLE = generateTable();\n\t}\n\tdtype = resolve( dtype );\n\tif ( hasOwnProp( TABLE, dtype ) ) {\n\t\treturn TABLE[ dtype ].slice();\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default mostlySafeCasts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport casts from './../../../../mostly-safe-casts';\n\n\n// VARIABLES //\n\nvar TABLE = casts();\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a provided ndarray data type can be safely cast or, for floating-point data types, downcast to another ndarray data type.\n*\n* @param {string} from - ndarray data type\n* @param {string} to - ndarray data type\n* @returns {boolean} boolean indicating if a data type can be cast to another data type\n*\n* @example\n* var bool = isMostlySafeCast( 'float32', 'float64' );\n* // returns true\n*\n* bool = isMostlySafeCast( 'float64', 'int32' );\n* // returns false\n*/\nfunction isMostlySafeCast( from, to ) {\n\tif ( from === to ) {\n\t\treturn true;\n\t}\n\treturn ( TABLE[ from ][ to ] > 0 );\n}\n\n\n// EXPORTS //\n\nexport default isMostlySafeCast;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils/keys';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport resolve from './../../base/dtype-resolve-str';\nimport SAME_KIND_CASTS from './same_kind_casts.json';\n\n\n// VARIABLES //\n\nvar TABLE;\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of same \"kind\" casts for each ndarray data type.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( SAME_KIND_CASTS );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = SAME_KIND_CASTS[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n/**\n* Generates a table of same \"kind\" casts for each ndarray data type.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( SAME_KIND_CASTS );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = SAME_KIND_CASTS[ dt1 ];\n\t\ttmp = [];\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\tif ( o[ dt2 ] === 1 ) {\n\t\t\t\ttmp.push( dt2 );\n\t\t\t}\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray data types to which a provided ndarray data type can be safely cast or cast within the same \"kind\".\n*\n* @param {*} [dtype] - ndarray data type value\n* @returns {(Object|StringArray|null)} list of ndarray data types or null\n*\n* @example\n* var list = sameKindCasts( 'float32' );\n* // returns [...]\n*/\nfunction sameKindCasts( dtype ) {\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tif ( TABLE === void 0 ) {\n\t\t// Lazily generate table...\n\t\tTABLE = generateTable();\n\t}\n\tdtype = resolve( dtype );\n\tif ( hasOwnProp( TABLE, dtype ) ) {\n\t\treturn TABLE[ dtype ].slice();\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default sameKindCasts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sameKindCasts from './../../../../same-kind-casts';\n\n\n// VARIABLES //\n\nvar TABLE = sameKindCasts();\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a provided ndarray data type can be safely cast to, or is of the same \"kind\" as, another ndarray data type.\n*\n* @param {string} from - ndarray data type\n* @param {string} to - ndarray data type\n* @returns {boolean} boolean indicating if a data type can be cast to another data type\n*\n* @example\n* var bool = isSameKindCast( 'float32', 'float64' );\n* // returns true\n*\n* bool = isSameKindCast( 'uint16', 'int16' );\n* // returns false\n*/\nfunction isSameKindCast( from, to ) {\n\tif ( from === to ) {\n\t\treturn true;\n\t}\n\treturn ( TABLE[ from ][ to ] > 0 );\n}\n\n\n// EXPORTS //\n\nexport default isSameKindCast;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSafeCast from './../../../../base/assert/is-safe-data-type-cast';\nimport isMostlySafeCast from './../../../../base/assert/is-mostly-safe-data-type-cast';\nimport isSameKindCast from './../../../../base/assert/is-same-kind-data-type-cast';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a provided ndarray data type can be cast to another ndarray data type according to a specified casting mode.\n*\n* @param {string} from - ndarray data type\n* @param {string} to - ndarray data type\n* @param {string} casting - ndarray casting mode\n* @returns {boolean} boolean indicating if a data type can be cast to another data type\n*\n* @example\n* var bool = isAllowedCast( 'float32', 'float64', 'safe' );\n* // returns true\n*\n* bool = isAllowedCast( 'float64', 'int32', 'safe' );\n* // returns false\n*/\nfunction isAllowedCast( from, to, casting ) {\n\t// Anything goes for \"unsafe\" casting...\n\tif ( casting === 'unsafe' ) {\n\t\treturn true;\n\t}\n\t// \"Casting\" to the same data type is always allowed, regardless of the casting mode...\n\tif ( from === to ) {\n\t\treturn true;\n\t}\n\t// No casts between different data types are allowed in \"none\" or \"equiv\" casting modes...\n\tif ( casting === 'none' || casting === 'equiv' ) {\n\t\treturn false;\n\t}\n\t// In \"safe\" casting mode, only casts which preserve values are allowed...\n\tif ( casting === 'safe' ) {\n\t\treturn isSafeCast( from, to );\n\t}\n\t// In \"mostly-safe\" casting mode, in addition to \"safe\" casts, for floating-point data types, downcasts are allowed...\n\tif ( casting === 'mostly-safe' ) {\n\t\treturn isMostlySafeCast( from, to );\n\t}\n\t// In \"same-kind\" casting mode, in addition to \"safe\" casts, casts within a \"kind\" (e.g., between signed integers or between floating-point numbers) are allowed...\n\treturn isSameKindCast( from, to );\n}\n\n\n// EXPORTS //\n\nexport default isAllowedCast;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Buffer from '@stdlib/buffer/ctor';\nimport Float64Array from '@stdlib/array/float64';\nimport Float32Array from '@stdlib/array/float32';\nimport Int16Array from '@stdlib/array/int16';\nimport Int32Array from '@stdlib/array/int32';\nimport Int8Array from '@stdlib/array/int8';\nimport Uint16Array from '@stdlib/array/uint16';\nimport Uint32Array from '@stdlib/array/uint32';\nimport Uint8Array from '@stdlib/array/uint8';\nimport Uint8ClampedArray from '@stdlib/array/uint8c';\nimport Complex64Array from '@stdlib/array/complex64';\nimport Complex128Array from '@stdlib/array/complex128';\n\n\n// MAIN //\n\n// Mapping from data types to underlying buffer constructors...\nvar ctors = {\n\t'binary': Buffer,\n\t'float64': Float64Array,\n\t'float32': Float32Array,\n\t'generic': Array, // TODO: replace with `stdlib` pkg\n\t'int16': Int16Array,\n\t'int32': Int32Array,\n\t'int8': Int8Array,\n\t'uint16': Uint16Array,\n\t'uint32': Uint32Array,\n\t'uint8': Uint8Array,\n\t'uint8c': Uint8ClampedArray,\n\t'complex64': Complex64Array,\n\t'complex128': Complex128Array\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport table from './ctors.js';\n\n\n// MAIN //\n\n/**\n* Returns an ndarray data buffer constructor.\n*\n* @param {string} dtype - data type\n* @returns {(Function|null)} data buffer constructor or null\n*\n* @example\n* var ctor = ctors( 'float64' );\n* // returns <Function>\n*\n* @example\n* var ctor = ctors( 'float' );\n* // returns null\n*/\nfunction ctors( dtype ) {\n\treturn table[ dtype ] || null;\n}\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bufferCtors from './../../../base/buffer-ctors';\nimport allocUnsafe from '@stdlib/buffer/alloc-unsafe';\nimport zeros from './zeros.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a zero-filled generic array.\n*\n* @private\n* @param {NonNegativeInteger} size - buffer size\n* @returns {Array} zero-filled generic array\n*/\nfunction generic( size ) {\n\tvar buf;\n\tvar i;\n\n\tbuf = [];\n\tfor ( i = 0; i < size; i++ ) {\n\t\tbuf.push( 0 );\n\t}\n\treturn buf;\n}\n\n/**\n* Returns a zero-filled binary buffer.\n*\n* @private\n* @param {NonNegativeInteger} size - buffer size\n* @returns {Buffer} zero-filled binary buffer\n*/\nfunction binary( size ) {\n\treturn zeros( allocUnsafe( size ) );\n}\n\n/**\n* Returns a zero-filled typed array.\n*\n* @private\n* @param {string} dtype - data type\n* @param {NonNegativeInteger} size - buffer size\n* @returns {(TypedArray|null)} zero-filled typed array\n*/\nfunction typedarray( dtype, size ) {\n\tvar ctor = bufferCtors( dtype );\n\tif ( ctor ) {\n\t\treturn new ctor( size );\n\t}\n\treturn null;\n}\n\n\n// MAIN //\n\n/**\n* Returns a zero-filled contiguous linear ndarray data buffer.\n*\n* @param {string} dtype - data type\n* @param {NonNegativeInteger} size - buffer size\n* @returns {(Array|TypedArray|Buffer|null)} data buffer\n*\n* @example\n* var buf = buffer( 'float64', 3 );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]\n*/\nfunction buffer( dtype, size ) {\n\tif ( dtype === 'generic' ) {\n\t\treturn generic( size );\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn binary( size );\n\t}\n\treturn typedarray( dtype, size );\n}\n\n\n// EXPORTS //\n\nexport default buffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills an array-like object with zeros.\n*\n* @private\n* @param {(Array|TypedArray|Buffer)} v - array-like object to fill\n* @returns {(Array|TypedArray|Buffer)} input value\n*\n* @example\n* var arr = zeros( new Array( 2 ) );\n* // returns [ 0, 0 ]\n*/\nfunction zeros( v ) {\n\tvar i;\n\tfor ( i = 0; i < v.length; i++ ) {\n\t\tv[ i ] = 0;\n\t}\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Mapping from ndarray data buffer constructors to data types...\nvar dtypes = {\n\t'Buffer': 'binary',\n\t'Float32Array': 'float32',\n\t'Float64Array': 'float64',\n\t'Array': 'generic',\n\t'Int16Array': 'int16',\n\t'Int32Array': 'int32',\n\t'Int8Array': 'int8',\n\t'Object': 'generic',\n\t'Uint16Array': 'uint16',\n\t'Uint32Array': 'uint32',\n\t'Uint8Array': 'uint8',\n\t'Uint8ClampedArray': 'uint8c',\n\t'Complex64Array': 'complex64',\n\t'Complex128Array': 'complex128'\n};\n\n\n// EXPORTS //\n\nexport default dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array/float64';\nimport Float32Array from '@stdlib/array/float32';\nimport Uint32Array from '@stdlib/array/uint32';\nimport Int32Array from '@stdlib/array/int32';\nimport Uint16Array from '@stdlib/array/uint16';\nimport Int16Array from '@stdlib/array/int16';\nimport Uint8Array from '@stdlib/array/uint8';\nimport Uint8ClampedArray from '@stdlib/array/uint8c';\nimport Int8Array from '@stdlib/array/int8';\nimport Complex64Array from '@stdlib/array/complex64';\nimport Complex128Array from '@stdlib/array/complex128';\n\n\n// MAIN //\n\n// Note: order should match `dtypes` order\nvar CTORS = [\n\tFloat64Array,\n\tFloat32Array,\n\tInt32Array,\n\tUint32Array,\n\tInt16Array,\n\tUint16Array,\n\tInt8Array,\n\tUint8Array,\n\tUint8ClampedArray,\n\tComplex64Array,\n\tComplex128Array\n];\n\n\n// EXPORTS //\n\nexport default CTORS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Note: order should match `ctors` order\nvar DTYPES = [\n\t'float64',\n\t'float32',\n\t'int32',\n\t'uint32',\n\t'int16',\n\t'uint16',\n\t'int8',\n\t'uint8',\n\t'uint8c',\n\t'complex64',\n\t'complex128'\n];\n\n\n// EXPORTS //\n\nexport default DTYPES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isBuffer from '@stdlib/assert/is-buffer';\nimport isArray from '@stdlib/assert/is-array';\nimport constructorName from '@stdlib/utils/constructor-name';\nimport ctor2dtype from './ctor2dtype.js';\nimport CTORS from './ctors.js';\nimport DTYPES from './dtypes.js';\n\n\n// VARIABLES //\n\nvar NTYPES = DTYPES.length;\n\n\n// MAIN //\n\n/**\n* Returns the data type of an ndarray data buffer.\n*\n* @param {*} value - input value\n* @returns {(string|null)} data type\n*\n* @example\n* var dt = dtype( [ 1, 2, 3 ] );\n* // returns 'generic'\n*\n* var dt = dtype( 'beep' );\n* // returns null\n*/\nfunction dtype( value ) {\n\tvar i;\n\tif ( isArray( value ) ) {\n\t\treturn 'generic';\n\t}\n\tif ( isBuffer( value ) ) {\n\t\treturn 'binary';\n\t}\n\tfor ( i = 0; i < NTYPES; i++ ) {\n\t\tif ( value instanceof CTORS[ i ] ) {\n\t\t\treturn DTYPES[ i ];\n\t\t}\n\t}\n\t// If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:\n\treturn ctor2dtype[ constructorName( value ) ] || null;\n}\n\n\n// EXPORTS //\n\nexport default dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDataType from './../../base/assert/is-data-type';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the data type of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray having a supported data type\n* @returns {string} data type\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'dtype': 'float64'\n* });\n*\n* var dt = dtype( x );\n* // returns 'float64'\n*/\nfunction dtype( x ) {\n\tvar dt;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tdt = x.dtype;\n\tif ( isDataType( dt ) ) {\n\t\treturn dt;\n\t}\n\t// A data type is essential for interpreting the memory associated with an ndarray object, so no fallbacks or workarounds for data type resolution...\n\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray having a supported data type. Value: `%s`.', dt ) );\n}\n\n\n// EXPORTS //\n\nexport default dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isCollection from '@stdlib/assert/is-collection';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the shape of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {NonNegativeIntegerArray} shape\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var out = shape( zeros( [ 3, 3, 3 ] ) );\n* // returns [ 3, 3, 3 ]\n*/\nfunction shape( x ) {\n\tvar out;\n\tvar sh;\n\tvar d;\n\tvar i;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tsh = x.shape;\n\tif ( !isCollection( sh ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\t// Copy the shape in order to avoid unintended mutation...\n\tout = [];\n\tfor ( i = 0; i < sh.length; i++ ) {\n\t\td = sh[ i ];\n\t\tif ( !isNonNegativeInteger( d ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tout.push( d );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default shape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isOrder from './../../base/assert/is-order';\nimport shape2strides from './../../base/shape2strides';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the strides of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {IntegerArray} strides\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var out = strides( zeros( [ 3, 3, 3 ] ) );\n* // returns [ 9, 3, 1 ]\n*/\nfunction strides( x ) {\n\tvar out;\n\tvar ord;\n\tvar sh;\n\tvar st;\n\tvar d;\n\tvar i;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tst = x.strides; // TODO: consider whether we want to support ecosystem libraries, such as scijs/ndarray, which name this property `stride`\n\tif ( !isCollection( st ) ) {\n\t\t// WARNING: if no strides array, try to derive the strides from the shape. Note, however, that there is a lot that can go wrong here, as the only thing we are requiring is that the shape is a collection. The main point of going through the effort to compute strides is to support minimal ndarray-esque objects, where the only essential attributes are `shape` and `dtype` and where other attributes can be computed (e.g., `strides`, `offset`, `ndims`, `order`, etc), assuming single-segment contiguous data stored in row-major order...\n\t\tsh = x.shape;\n\t\tif ( !isCollection( sh ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( sh.length === 0 ) {\n\t\t\treturn [ 0 ];\n\t\t}\n\t\tord = x.order;\n\t\tif ( !isOrder( ord ) ) {\n\t\t\tord = 'row-major';\n\t\t}\n\t\treturn shape2strides( sh, ord );\n\t}\n\t// Copy the strides in order to avoid unintended mutation...\n\tout = [];\n\tfor ( i = 0; i < st.length; i++ ) {\n\t\td = st[ i ];\n\t\tif ( !isInteger( d ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tout.push( d );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isCollection from '@stdlib/assert/is-collection';\nimport strides2offset from './../../base/strides2offset';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the index offset specifying the underlying buffer index of the first iterated ndarray element.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {NonNegativeInteger} index offset\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var n = offset( zeros( [ 3, 3, 3 ] ) );\n* // returns 0\n*/\nfunction offset( x ) {\n\tvar st;\n\tvar sh;\n\tvar n;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tn = x.offset;\n\tif ( isNonNegativeInteger( n ) ) {\n\t\treturn n;\n\t}\n\tsh = x.shape;\n\tif ( !isCollection( sh ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tst = x.strides;\n\tif ( sh.length === 0 || !isCollection( st ) ) {\n\t\treturn 0;\n\t}\n\tn = strides2offset( sh, st );\n\tif ( isNonNegativeInteger( n ) ) {\n\t\treturn n;\n\t}\n\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n}\n\n\n// EXPORTS //\n\nexport default offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isCollection from '@stdlib/assert/is-collection';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the number of ndarray dimensions.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {NonNegativeInteger} number of dimensions\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var n = ndims( zeros( [ 3, 3, 3 ] ) );\n* // returns 3\n*/\nfunction ndims( x ) {\n\tvar sh;\n\tvar n;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tn = x.ndims;\n\tif ( isNonNegativeInteger( n ) ) {\n\t\treturn n;\n\t}\n\tsh = x.shape;\n\tif ( !isCollection( sh ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\treturn sh.length;\n}\n\n\n// EXPORTS //\n\nexport default ndims;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isOrder from './../../base/assert/is-order';\nimport strides from './../../strides';\nimport ndims from './../../ndims';\nimport strides2order from './../../base/strides2order';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COLUMN_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Returns the layout order of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {(string|null)} layout order\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'order': 'row-major'\n* });\n*\n* var out = order( x );\n* // returns 'row-major'\n*/\nfunction order( x ) {\n\tvar st;\n\tvar o;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\to = x.order;\n\tif ( isOrder( o ) ) {\n\t\treturn o;\n\t}\n\t// Try to infer the layout order from the strides array...\n\tst = strides( x );\n\to = strides2order( st );\n\tif ( o === 1 || o === 3 ) {\n\t\treturn ROW_MAJOR; // for o == 3 (both row- and column-major; e.g., one-dimensional ndarrays), default to row-major\n\t}\n\tif ( o === 2 ) {\n\t\treturn COLUMN_MAJOR;\n\t}\n\t// o === 0\n\tif ( ndims( x ) === 0 ) {\n\t\treturn ROW_MAJOR; // default to row-major for zero-dimensional ndarrays\n\t}\n\t// Case: mixed strides (e.g., [ 2, 3, 1 ] )\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default order;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert/is-collection';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the underlying data buffer of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {Collection} underlying data buffer\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'dtype': 'float64'\n* });\n*\n* var out = data( x );\n* // returns <Float64Array>\n*/\nfunction data( x ) {\n\tvar out;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tout = x.data;\n\tif ( isCollection( out ) ) {\n\t\treturn out;\n\t}\n\t// A data buffer is essential for operating on an ndarray object, so no fallbacks or workarounds for data buffer resolution...\n\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n}\n\n\n// EXPORTS //\n\nexport default data;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport isInteger from '@stdlib/math/base/assert/is-integer';\n\n\n// MAIN //\n\n/**\n* Tests (loosely) if an input value is an array-like object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if an input value is an array-like object\n*\n* @example\n* var bool = isArrayLikeObject( [] );\n* // returns true\n*\n* @example\n* var bool = isArrayLikeObject( '' );\n* // returns false\n*/\nfunction isArrayLikeObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length < PINF\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArrayLikeObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bufferCtors from './../../base/buffer-ctors';\nimport allocUnsafe from '@stdlib/buffer/alloc-unsafe';\n\n\n// MAIN //\n\n/**\n* Casts buffer elements by copying those elements to a buffer of another data type.\n*\n* @private\n* @param {(Array|TypedArray|Buffer)} buffer - input buffer\n* @param {NonNegativeInteger} len - number of elements to cast\n* @param {string} dtype - data type\n* @returns {(Array|TypedArray|Buffer)} output buffer\n*\n* @example\n* var b = castBuffer( [ 1.0, 2.0, 3.0 ], 3, 'float64' );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]\n*/\nfunction castBuffer( buffer, len, dtype ) {\n\tvar ctor;\n\tvar out;\n\tvar i;\n\n\tctor = bufferCtors( dtype );\n\tif ( dtype === 'generic') {\n\t\tout = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.push( buffer[ i ] );\n\t\t}\n\t} else if ( dtype === 'binary' ) {\n\t\tout = allocUnsafe( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = buffer[ i ];\n\t\t}\n\t} else {\n\t\tout = new ctor( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = buffer[ i ]; // TODO: wrap and use accessors here and above\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default castBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport castReturn from '@stdlib/complex/base/cast-return';\nimport complexCtors from '@stdlib/complex/ctors';\nimport bufferCtors from './../../base/buffer-ctors';\nimport allocUnsafe from '@stdlib/buffer/alloc-unsafe';\nimport ndarray from './../../base/ctor';\nimport getDType from './../../dtype';\nimport getShape from './../../shape';\nimport getStrides from './../../strides';\nimport getOffset from './../../offset';\nimport getOrder from './../../order';\nimport getData from './../../data-buffer';\n\n\n// FUNCTIONS //\n\n/**\n* Copies a \"generic\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @returns {Array} output data buffer\n*/\nfunction generic( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( arr.iget( i ) ); // as output buffer is generic, should work with both real- and complex-valued ndarrays\n\t}\n\treturn out;\n}\n\n/**\n* Copies a \"binary\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @returns {Array} output data buffer\n*/\nfunction binary( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = allocUnsafe( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = arr.iget( i ); // we're assuming that we're doing something sensible here (e.g., not trying to cast a complex-valued ndarray to a \"binary\" ndarray or a double-precision floating-point ndarray to binary, etc)\n\t}\n\treturn out;\n}\n\n/**\n* Copies a \"typed\" ndarray view.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {string} dtype - data type\n* @returns {Array} output data buffer\n*/\nfunction typed( arr, dtype ) {\n\tvar ctor;\n\tvar len;\n\tvar out;\n\tvar set;\n\tvar fcn;\n\tvar o;\n\tvar i;\n\n\tctor = bufferCtors( dtype );\n\tlen = arr.length;\n\tout = new ctor( len );\n\n\t// If the output data buffer is a complex number array, we need to use accessors...\n\to = arraylike2object( out );\n\tif ( o.accessorProtocol ) {\n\t\tset = o.accessors[ 1 ];\n\t\tfcn = castReturn( wrapper, 1, complexCtors( dtype ) );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tset( out, i, fcn( i ) ); // we're assuming that we're doing something sensible here (e.g., not trying to cast arbitrary objects to complex numbers, etc)\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr.iget( i ); // we're assuming that we're doing something sensible here (e.g., not trying to cast an ndarray containing generic objects to a double-precision floating-point array or a complex-valued ndarray to a real-valued ndarray, etc)\n\t\t}\n\t}\n\treturn out;\n\n\t/**\n\t* Returns the ndarray element specified by a provided linear index.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} i - linear index\n\t* @returns {*} value\n\t*/\n\tfunction wrapper( i ) {\n\t\treturn arr.iget( i );\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Copies an ndarray view to a data buffer.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {string} dtype - data type\n* @returns {(Array|TypedArray|Buffer)} output data buffer\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n*\n* var buffer = [ 1.0, 2.0, 3.0 ];\n* var shape = [ 3 ];\n* var strides = [ -1 ];\n* var vec = ndarray( 'generic', buffer, shape, strides, 2, 'row-major' );\n*\n* var b = copyView( vec, 'float64' );\n* // returns <Float64Array>[ 3.0, 2.0, 1.0 ]\n*/\nfunction copyView( arr, dtype ) {\n\tvar x;\n\n\t// Create a new \"base\" view, thus ensuring we have an `.iget` method and associated meta data...\n\tx = new ndarray( getDType( arr ), getData( arr ), getShape( arr ), getStrides( arr ), getOffset( arr ), getOrder( arr ) ); // eslint-disable-line max-len\n\n\tif ( dtype === 'generic') {\n\t\treturn generic( x );\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn binary( x );\n\t}\n\treturn typed( x, dtype );\n}\n\n\n// EXPORTS //\n\nexport default copyView;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Prepends singleton dimensions in order to satisfy a minimum number of dimensions.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {Array} shape - array dimensions\n* @param {NonNegativeInteger} ndmin - minimum number of dimensions\n* @returns {Array} output shape array\n*/\nfunction expandShape( ndims, shape, ndmin ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < ndmin-ndims; i++ ) {\n\t\tout.push( 1 );\n\t}\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tout.push( shape[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default expandShape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Expands a strides array to accommodate an expanded array shape (i.e., an array shape with prepended singleton dimensions).\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {Array} shape - expanded array shape\n* @param {Array} strides - strides array\n* @param {string} order - memory layout order\n* @returns {Array} output strides array\n*\n* @example\n* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 1, 2 ], 'column-major' );\n* // returns [ 1, 1, 1, 2 ]\n*\n* @example\n* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 2, 1 ], 'row-major' );\n* // returns [ 4, 4, 2, 1 ]\n*/\nfunction expandStrides( ndims, shape, strides, order ) {\n\tvar out;\n\tvar N;\n\tvar s;\n\tvar i;\n\tvar j;\n\n\tN = strides.length;\n\tj = ndims - N;\n\tout = [];\n\tif ( order === 'row-major' ) {\n\t\ts = abs( strides[ 0 ] ) * shape[ j ]; // at `j` is the size of the first non-prepended dimension\n\t\tfor ( i = 0; i < j; i++ ) {\n\t\t\tout.push( s );\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( strides[ i ] );\n\t\t}\n\t} else { // column-major\n\t\tfor ( i = 0; i < j; i++ ) {\n\t\t\tout.push( 1 );\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( strides[ i ] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default expandStrides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport isObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isArray from '@stdlib/assert/is-array';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport shape2strides from './../../base/shape2strides';\nimport strides2offset from './../../base/strides2offset';\nimport strides2order from './../../base/strides2order';\nimport numel from './../../base/numel';\nimport ndarray from './../../ctor';\nimport isDataType from './../../base/assert/is-data-type';\nimport isOrder from './../../base/assert/is-order';\nimport isCastingMode from './../../base/assert/is-casting-mode';\nimport isAllowedCast from './../../base/assert/is-allowed-data-type-cast';\nimport createBuffer from './../../base/buffer';\nimport getBufferDType from './../../base/buffer-dtype';\nimport getDType from './../../dtype';\nimport getShape from './../../shape';\nimport getStrides from './../../strides';\nimport getOffset from './../../offset';\nimport getOrder from './../../order';\nimport getData from './../../data-buffer';\nimport arrayShape from '@stdlib/array/shape';\nimport flatten from '@stdlib/array/base/flatten';\nimport format from '@stdlib/string/format';\nimport isArrayLikeObject from './is_array_like_object.js';\nimport getDefaults from './defaults.js';\nimport castBuffer from './cast_buffer.js';\nimport copyView from './copy_view.js';\nimport expandShape from './expand_shape.js';\nimport expandStrides from './expand_strides.js';\n\n\n// VARIABLES //\n\nvar defaults = getDefaults();\n\n\n// MAIN //\n\n/**\n* Returns a multidimensional array.\n*\n* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [buffer] - data source\n* @param {Options} [options] - function options\n* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [options.buffer] - data source\n* @param {string} [options.dtype=\"float64\"] - underlying storage data type (if the input data is not of the same type, this option specifies the data type to which to cast the input data)\n* @param {string} [options.order=\"row-major\"] - specifies the memory layout of the array as either row-major (C-style) or column-major (Fortran-style)\n* @param {NonNegativeIntegerArray} [options.shape] - array shape\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.copy=false] - boolean indicating whether to copy source data to a new data buffer\n* @param {boolean} [options.flatten=true] - boolean indicating whether to automatically flatten generic array data sources\n* @param {NonNegativeInteger} [options.ndmin=0] - minimum number of dimensions\n* @param {string} [options.casting=\"safe\"] - casting rule used to determine what constitutes an acceptable cast\n* @param {boolean} [options.readonly=false] - boolean indicating if an array should be read-only\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide either an array shape, data source, or both\n* @throws {Error} invalid cast\n* @throws {RangeError} data source must be compatible with specified meta data\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1\n*\n* @example\n* var opts = {\n*     'dtype': 'generic',\n*     'flatten': false\n* };\n*\n* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0 );\n* // returns [ 1, 2 ]\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var opts = {\n*     'shape': [ 2, 2 ]\n* };\n*\n* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );\n* // returns <ndarray>\n*\n* var v = arr.get( 0, 0 );\n* // returns 1.0\n*/\nfunction array() {\n\tvar options;\n\tvar strides;\n\tvar buffer;\n\tvar offset;\n\tvar order;\n\tvar dtype;\n\tvar btype;\n\tvar shape;\n\tvar ndims;\n\tvar nopts;\n\tvar opts;\n\tvar osh;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\n\tif ( arguments.length === 1 ) {\n\t\tif ( isArrayLikeObject( arguments[ 0 ] ) ) {\n\t\t\tbuffer = arguments[ 0 ];\n\t\t\toptions = {};\n\t\t} else {\n\t\t\toptions = arguments[ 0 ];\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a valid data source, options argument, or both. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'buffer' ) ) {\n\t\t\t\tbuffer = options.buffer;\n\t\t\t\tif ( !isArrayLikeObject( buffer ) ) { // weak test\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an array-like object, typed-array-like, a Buffer, or an ndarray. Option: `%s`.', 'buffer', buffer ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tbuffer = arguments[ 0 ];\n\t\tif ( !isArrayLikeObject( buffer ) ) { // weak test\n\t\t\tthrow new TypeError( format( 'invalid option. Data source must be an array-like object, typed-array-like, a Buffer, or an ndarray. Value: `%s`.', buffer ) );\n\t\t}\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\t// Note: we ignore whether `options` has a `buffer` property\n\t}\n\tif ( buffer ) {\n\t\tif ( isndarrayLike( buffer ) ) {\n\t\t\tbtype = getDType( buffer );\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\tbtype = getBufferDType( buffer );\n\t\t\tFLG = false;\n\t\t}\n\t}\n\tnopts = {};\n\topts = {};\n\n\t// Validate some options before others...\n\tif ( hasOwnProp( options, 'casting' ) ) {\n\t\topts.casting = options.casting;\n\t\tif ( !isCastingMode( opts.casting ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized casting mode. Option: `%s`.', 'casting', opts.casting ) );\n\t\t}\n\t} else {\n\t\topts.casting = defaults.casting;\n\t}\n\tif ( hasOwnProp( options, 'flatten' ) ) {\n\t\topts.flatten = options.flatten;\n\t\tif ( !isBoolean( opts.flatten ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'flatten', opts.flatten ) );\n\t\t}\n\t} else {\n\t\topts.flatten = defaults.flatten;\n\t}\n\tif ( hasOwnProp( options, 'ndmin' ) ) {\n\t\topts.ndmin = options.ndmin;\n\t\tif ( !isNonNegativeInteger( opts.ndmin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'ndmin', opts.ndmin ) );\n\t\t}\n\t\t// TODO: validate that minimum number of dimensions does not exceed the maximum number of possible dimensions (in theory, infinite; in practice, determined by max array length; see https://github.com/stdlib-js/stdlib/blob/ac350059877c036640775d6b30d0e98e840d07cf/lib/node_modules/%40stdlib/ndarray/ctor/lib/main.js#L57)\n\t} else {\n\t\topts.ndmin = defaults.ndmin;\n\t}\n\n\t// Validate the remaining options...\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\tdtype = options.dtype;\n\t\tif ( !isDataType( dtype ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized data type. Option: `%s`.', 'dtype', dtype ) );\n\t\t}\n\t\tif ( btype && !isAllowedCast( btype, dtype, opts.casting ) ) {\n\t\t\tthrow new Error( format( 'invalid option. Data type cast is not allowed. Casting mode: `%s`. From: `%s`. To: `%s`.', opts.casting, btype, dtype ) );\n\t\t}\n\t} else if ( btype ) {\n\t\t// TODO: reconcile difference in behavior when provided a generic array and no `dtype` option. Currently, we cast here, but do not allow casting a generic array (by default) when explicitly providing a `dtype` option.\n\n\t\t// Only cast generic array data sources when not provided an ndarray...\n\t\tif ( !FLG && btype === 'generic' ) {\n\t\t\tdtype = defaults.dtype;\n\t\t} else {\n\t\t\tdtype = btype;\n\t\t}\n\t} else {\n\t\tdtype = defaults.dtype;\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\torder = options.order;\n\t\tif ( order === 'any' || order === 'same' ) {\n\t\t\tif ( FLG ) {\n\t\t\t\t// If the user indicated that \"any\" order suffices (meaning the user does not care about ndarray order), then we use the default order, unless the input ndarray is either unequivocally \"row-major\" or \"column-major\" or configured as such....\n\t\t\t\tif ( order === 'any' ) {\n\t\t\t\t\t// Compute the layout order in order to ascertain whether an ndarray can be considered both \"row-major\" and \"column-major\":\n\t\t\t\t\tord = strides2order( getStrides( buffer ) );\n\n\t\t\t\t\t// If the ndarray can be considered both \"row-major\" and \"column-major\", then use the default order; otherwise, use the ndarray's stated layout order...\n\t\t\t\t\tif ( ord === 3 ) {\n\t\t\t\t\t\torder = defaults.order;\n\t\t\t\t\t} else {\n\t\t\t\t\t\torder = getOrder( buffer );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Otherwise, use the same order as the provided ndarray...\n\t\t\t\telse if ( order === 'same' ) {\n\t\t\t\t\torder = getOrder( buffer );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\torder = defaults.order;\n\t\t\t}\n\t\t} else if ( !isOrder( order ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', order ) );\n\t\t}\n\t} else {\n\t\torder = defaults.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\tnopts.mode = options.mode;\n\t} else {\n\t\tnopts.mode = defaults.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\tnopts.submode = options.submode;\n\t} else {\n\t\tnopts.submode = [ nopts.mode ];\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\tnopts.readonly = options.readonly;\n\t} else {\n\t\tnopts.readonly = defaults.readonly;\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t} else {\n\t\topts.copy = defaults.copy;\n\t}\n\t// If not provided a shape, infer from a provided data source...\n\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\tshape = options.shape;\n\t\tif ( !isArrayLikeObject( shape ) ) { // weak test\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an array-like object containing nonnegative integers. Option: `%s`.', 'shape', shape ) );\n\t\t}\n\t\tndims = shape.length;\n\t\tlen = numel( shape );\n\t} else if ( buffer ) {\n\t\tif ( FLG ) {\n\t\t\tshape = getShape( buffer );\n\t\t\tndims = shape.length;\n\t\t\tlen = numel( shape );\n\t\t} else if ( opts.flatten && isArray( buffer ) ) {\n\t\t\tshape = arrayShape( buffer );\n\t\t\tosh = shape; // cache a reference to the inferred shape\n\t\t\tndims = shape.length;\n\t\t\tlen = numel( shape );\n\t\t} else {\n\t\t\tndims = 1;\n\t\t\tlen = buffer.length;\n\t\t\tshape = [ len ]; // assume a 1-dimensional array (vector)\n\t\t}\n\t} else {\n\t\tthrow new Error( 'invalid arguments. Must provide either a data source, array shape, or both.' );\n\t}\n\t// Adjust the array shape to satisfy the minimum number of dimensions...\n\tif ( ndims < opts.ndmin ) {\n\t\tshape = expandShape( ndims, shape, opts.ndmin );\n\t\tndims = opts.ndmin;\n\t}\n\t// If not provided a data buffer, create it; otherwise, see if we need to cast a provided data buffer to another data type or perform a copy...\n\tif ( FLG ) {\n\t\tif ( numel( buffer.shape ) !== len ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Array shape is incompatible with provided data source. Number of data source elements does not match array shape.' );\n\t\t}\n\t\tif ( btype !== dtype || opts.copy ) {\n\t\t\tbuffer = copyView( buffer, dtype );\n\t\t} else {\n\t\t\tstrides = getStrides( buffer );\n\t\t\toffset = getOffset( buffer );\n\t\t\tbuffer = getData( buffer );\n\t\t\tif ( strides.length < ndims ) {\n\t\t\t\t// Account for augmented dimensions (note: expanding the strides array to account for prepended singleton dimensions does **not** affect the index offset):\n\t\t\t\tstrides = expandStrides( ndims, shape, strides, order );\n\t\t\t}\n\t\t}\n\t} else if ( buffer ) {\n\t\tif ( btype === 'generic' && opts.flatten ) {\n\t\t\tbuffer = flatten( buffer, osh || arrayShape( buffer ), order === 'column-major' );\n\t\t}\n\t\tif ( buffer.length !== len ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Array shape is incompatible with provided data source. Number of data source elements does not match array shape.' );\n\t\t}\n\t\tif ( btype !== dtype || opts.copy ) {\n\t\t\tbuffer = castBuffer( buffer, len, dtype );\n\t\t}\n\t} else {\n\t\tbuffer = createBuffer( dtype, len );\n\t}\n\t// If we have yet to determine array strides, we assume that we can compute the strides, along with the index offset, for a **contiguous** data source based solely on the array shape and specified memory layout order...\n\tif ( strides === void 0 ) {\n\t\tstrides = shape2strides( shape, order );\n\t\toffset = strides2offset( shape, strides );\n\t}\n\treturn new ndarray( dtype, buffer, shape, strides, offset, order, nopts );\n}\n\n\n// EXPORTS //\n\nexport default array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport settings from './../../defaults';\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'casting': settings.get( 'casting' ),\n\t\t'copy': false,\n\t\t'dtype': settings.get( 'dtypes.default' ),\n\t\t'flatten': true,\n\t\t'mode': settings.get( 'index_mode' ),\n\t\t'ndmin': 0,\n\t\t'order': settings.get( 'order' ),\n\t\t'readonly': false\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array is column-major based on a provided stride array.\n*\n* @param {IntegerArray} strides - stride array\n* @returns {boolean} boolean indicating if an array is column-major\n*\n* @example\n* var bool = isColumnMajor( [ 1, 2 ] );\n* // returns true\n*\n* bool = isColumnMajor( [ 2, 1 ] );\n* // returns false\n*/\nfunction isColumnMajor( strides ) {\n\tvar ndims;\n\tvar s1;\n\tvar s2;\n\tvar i;\n\n\tndims = strides.length;\n\tif ( ndims === 0 ) {\n\t\treturn false;\n\t}\n\ts1 = abs( strides[ 0 ] );\n\tfor ( i = 1; i < ndims; i++ ) {\n\t\ts2 = abs( strides[ i ] );\n\t\tif ( s2 < s1 ) {\n\t\t\treturn false;\n\t\t}\n\t\ts1 = s2;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default isColumnMajor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../../base/numel';\nimport minmax from './../../../../base/minmax-view-buffer-index';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array is compatible with a single memory segment.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {boolean} boolean indicating if an array is compatible with a single memory segment\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var bool = isSingleSegmentCompatible( shape, strides, offset );\n* // returns true\n*\n* @example\n* var shape = [ 10 ];\n* var strides = [ 3 ];\n* var offset = 0;\n*\n* var bool = isSingleSegmentCompatible( shape, strides, offset );\n* // returns false\n*/\nfunction isSingleSegmentCompatible( shape, strides, offset ) {\n\tvar len;\n\tvar buf;\n\n\t// Compute the total number of elements:\n\tlen = numel( shape );\n\tif ( len === 0 ) {\n\t\treturn false;\n\t}\n\t// Determine the minimum and maximum linear indices which are accessible by the array view:\n\tbuf = minmax( shape, strides, offset );\n\n\treturn ( len === ( buf[1]-buf[0]+1 ) );\n}\n\n\n// EXPORTS //\n\nexport default isSingleSegmentCompatible;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray complex-valued floating-point data type.\n*\n* @name isComplexFloatingPointDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray complex-valued floating-point data type\n*\n* @example\n* var bool = isComplexFloatingPointDataType( 'binary' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'complex64' );\n* // returns true\n*\n* bool = isComplexFloatingPointDataType( 'complex128' );\n* // returns true\n*\n* bool = isComplexFloatingPointDataType( 'float32' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'float64' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'generic' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'int16' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'int32' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'int8' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'uint16' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'uint32' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'uint8' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'uint8c' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'foo' );\n* // returns false\n*/\nvar isComplexFloatingPointDataType = contains( dtypes( 'complex_floating_point' ) ); // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default isComplexFloatingPointDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray floating-point data type.\n*\n* @name isFloatingPointDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray floating-point data type\n*\n* @example\n* var bool = isFloatingPointDataType( 'binary' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'float32' );\n* // returns true\n*\n* bool = isFloatingPointDataType( 'float64' );\n* // returns true\n*\n* bool = isFloatingPointDataType( 'generic' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'int16' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'int32' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'int8' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'uint16' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'uint32' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'uint8' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'uint8c' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'foo' );\n* // returns false\n*/\nvar isFloatingPointDataType = contains( dtypes( 'floating_point' ) );\n\n\n// EXPORTS //\n\nexport default isFloatingPointDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray integer data type.\n*\n* @name isIntegerDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray integer data type\n*\n* @example\n* var bool = isIntegerDataType( 'binary' );\n* // returns false\n*\n* bool = isIntegerDataType( 'float32' );\n* // returns false\n*\n* bool = isIntegerDataType( 'float64' );\n* // returns false\n*\n* bool = isIntegerDataType( 'generic' );\n* // returns false\n*\n* bool = isIntegerDataType( 'int16' );\n* // returns true\n*\n* bool = isIntegerDataType( 'int32' );\n* // returns true\n*\n* bool = isIntegerDataType( 'int8' );\n* // returns true\n*\n* bool = isIntegerDataType( 'uint16' );\n* // returns true\n*\n* bool = isIntegerDataType( 'uint32' );\n* // returns true\n*\n* bool = isIntegerDataType( 'uint8' );\n* // returns true\n*\n* bool = isIntegerDataType( 'uint8c' );\n* // returns true\n*\n* bool = isIntegerDataType( 'foo' );\n* // returns false\n*/\nvar isIntegerDataType = contains( dtypes( 'integer' ) );\n\n\n// EXPORTS //\n\nexport default isIntegerDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray numeric data type.\n*\n* @name isNumericDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray numeric data type\n*\n* @example\n* var bool = isNumericDataType( 'binary' );\n* // returns false\n*\n* bool = isNumericDataType( 'float32' );\n* // returns true\n*\n* bool = isNumericDataType( 'float64' );\n* // returns true\n*\n* bool = isNumericDataType( 'generic' );\n* // returns false\n*\n* bool = isNumericDataType( 'int16' );\n* // returns true\n*\n* bool = isNumericDataType( 'int32' );\n* // returns true\n*\n* bool = isNumericDataType( 'int8' );\n* // returns true\n*\n* bool = isNumericDataType( 'uint16' );\n* // returns true\n*\n* bool = isNumericDataType( 'uint32' );\n* // returns true\n*\n* bool = isNumericDataType( 'uint8' );\n* // returns true\n*\n* bool = isNumericDataType( 'uint8c' );\n* // returns true\n*\n* bool = isNumericDataType( 'foo' );\n* // returns false\n*/\nvar isNumericDataType = contains( dtypes( 'numeric' ) );\n\n\n// EXPORTS //\n\nexport default isNumericDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether an ndarray is read-only.\n*\n* @param {ndarray} arr - input ndarray\n* @returns {boolean} boolean indicating whether an ndarray is read-only\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ 1, 2, 3, 4 ], {\n*     'readonly': true\n* });\n* var bool = isReadOnly( x );\n* // returns true\n*\n* x = array( [ 1, 2, 3, 4 ] );\n* bool = isReadOnly( x );\n* // returns false\n*/\nfunction isReadOnly( arr ) {\n\tvar flags = arr.flags;\n\treturn ( flags && flags.READONLY === true );\n}\n\n\n// EXPORTS //\n\nexport default isReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray real-valued data type.\n*\n* @name isRealDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray real-valued data type\n*\n* @example\n* var bool = isRealDataType( 'binary' );\n* // returns false\n*\n* bool = isRealDataType( 'float32' );\n* // returns true\n*\n* bool = isRealDataType( 'float64' );\n* // returns true\n*\n* bool = isRealDataType( 'complex128' );\n* // returns false\n*\n* bool = isRealDataType( 'generic' );\n* // returns false\n*\n* bool = isRealDataType( 'int16' );\n* // returns true\n*\n* bool = isRealDataType( 'int32' );\n* // returns true\n*\n* bool = isRealDataType( 'int8' );\n* // returns true\n*\n* bool = isRealDataType( 'uint16' );\n* // returns true\n*\n* bool = isRealDataType( 'uint32' );\n* // returns true\n*\n* bool = isRealDataType( 'uint8' );\n* // returns true\n*\n* bool = isRealDataType( 'uint8c' );\n* // returns true\n*\n* bool = isRealDataType( 'foo' );\n* // returns false\n*/\nvar isRealDataType = contains( dtypes( 'real' ) );\n\n\n// EXPORTS //\n\nexport default isRealDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray real-valued floating-point data type.\n*\n* @name isRealFloatingPointDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray real-valued floating-point data type\n*\n* @example\n* var bool = isRealFloatingPointDataType( 'binary' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'float32' );\n* // returns true\n*\n* bool = isRealFloatingPointDataType( 'float64' );\n* // returns true\n*\n* bool = isRealFloatingPointDataType( 'generic' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'int16' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'int32' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'int8' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'uint16' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'uint32' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'uint8' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'uint8c' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'foo' );\n* // returns false\n*/\nvar isRealFloatingPointDataType = contains( dtypes( 'real_floating_point' ) ); // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default isRealFloatingPointDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array is row-major based on a provided stride array.\n*\n* @param {IntegerArray} strides - stride array\n* @returns {boolean} boolean indicating if an array is row-major\n*\n* @example\n* var bool = isRowMajor( [ 2, 1 ] );\n* // returns true\n*\n* bool = isRowMajor( [ 1, 2 ] );\n* // returns false\n*/\nfunction isRowMajor( strides ) {\n\tvar ndims;\n\tvar s1;\n\tvar s2;\n\tvar i;\n\n\tndims = strides.length;\n\tif ( ndims === 0 ) {\n\t\treturn false;\n\t}\n\ts1 = abs( strides[ 0 ] );\n\tfor ( i = 1; i < ndims; i++ ) {\n\t\ts2 = abs( strides[ i ] );\n\t\tif ( s2 > s1 ) {\n\t\t\treturn false;\n\t\t}\n\t\ts1 = s2;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default isRowMajor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray signed integer data type.\n*\n* @name isSignedIntegerDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray signed integer data type\n*\n* @example\n* var bool = isSignedIntegerDataType( 'binary' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'float32' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'float64' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'generic' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'int16' );\n* // returns true\n*\n* bool = isSignedIntegerDataType( 'int32' );\n* // returns true\n*\n* bool = isSignedIntegerDataType( 'int8' );\n* // returns true\n*\n* bool = isSignedIntegerDataType( 'uint16' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'uint32' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'uint8' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'uint8c' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'foo' );\n* // returns false\n*/\nvar isSignedIntegerDataType = contains( dtypes( 'signed_integer' ) );\n\n\n// EXPORTS //\n\nexport default isSignedIntegerDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport dtypes from './../../../../dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray unsigned integer data type.\n*\n* @name isUnsignedIntegerDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray unsigned integer data type\n*\n* @example\n* var bool = isUnsignedIntegerDataType( 'binary' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'float32' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'float64' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'generic' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'int16' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'int32' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'int8' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'uint16' );\n* // returns true\n*\n* bool = isUnsignedIntegerDataType( 'uint32' );\n* // returns true\n*\n* bool = isUnsignedIntegerDataType( 'uint8' );\n* // returns true\n*\n* bool = isUnsignedIntegerDataType( 'uint8c' );\n* // returns true\n*\n* bool = isUnsignedIntegerDataType( 'foo' );\n* // returns false\n*/\nvar isUnsignedIntegerDataType = contains( dtypes( 'unsigned_integer' ) );\n\n\n// EXPORTS //\n\nexport default isUnsignedIntegerDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name isAllowedDataTypeCast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-allowed-data-type-cast}\n*/\nimport isAllowedDataTypeCast from './../../../base/assert/is-allowed-data-type-cast';\nsetReadOnly( ns, 'isAllowedDataTypeCast', isAllowedDataTypeCast );\n\n/**\n* @name isBufferLengthCompatible\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-buffer-length-compatible}\n*/\nimport isBufferLengthCompatible from './../../../base/assert/is-buffer-length-compatible';\nsetReadOnly( ns, 'isBufferLengthCompatible', isBufferLengthCompatible );\n\n/**\n* @name isBufferLengthCompatibleShape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-buffer-length-compatible-shape}\n*/\nimport isBufferLengthCompatibleShape from './../../../base/assert/is-buffer-length-compatible-shape';\nsetReadOnly( ns, 'isBufferLengthCompatibleShape', isBufferLengthCompatibleShape );\n\n/**\n* @name isCastingMode\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-casting-mode}\n*/\nimport isCastingMode from './../../../base/assert/is-casting-mode';\nsetReadOnly( ns, 'isCastingMode', isCastingMode );\n\n/**\n* @name isColumnMajor\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-column-major}\n*/\nimport isColumnMajor from './../../../base/assert/is-column-major';\nsetReadOnly( ns, 'isColumnMajor', isColumnMajor );\n\n/**\n* @name isColumnMajorContiguous\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-column-major-contiguous}\n*/\nimport isColumnMajorContiguous from './../../../base/assert/is-column-major-contiguous';\nsetReadOnly( ns, 'isColumnMajorContiguous', isColumnMajorContiguous );\n\n/**\n* @name isComplexFloatingPointDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-complex-floating-point-data-type}\n*/\nimport isComplexFloatingPointDataType from './../../../base/assert/is-complex-floating-point-data-type';\nsetReadOnly( ns, 'isComplexFloatingPointDataType', isComplexFloatingPointDataType );\n\n/**\n* @name isContiguous\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-contiguous}\n*/\nimport isContiguous from './../../../base/assert/is-contiguous';\nsetReadOnly( ns, 'isContiguous', isContiguous );\n\n/**\n* @name isDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-data-type}\n*/\nimport isDataType from './../../../base/assert/is-data-type';\nsetReadOnly( ns, 'isDataType', isDataType );\n\n/**\n* @name isFloatingPointDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-floating-point-data-type}\n*/\nimport isFloatingPointDataType from './../../../base/assert/is-floating-point-data-type';\nsetReadOnly( ns, 'isFloatingPointDataType', isFloatingPointDataType );\n\n/**\n* @name isIndexMode\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-index-mode}\n*/\nimport isIndexMode from './../../../base/assert/is-index-mode';\nsetReadOnly( ns, 'isIndexMode', isIndexMode );\n\n/**\n* @name isIntegerDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-integer-data-type}\n*/\nimport isIntegerDataType from './../../../base/assert/is-integer-data-type';\nsetReadOnly( ns, 'isIntegerDataType', isIntegerDataType );\n\n/**\n* @name isMostlySafeDataTypeCast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-mostly-safe-data-type-cast}\n*/\nimport isMostlySafeDataTypeCast from './../../../base/assert/is-mostly-safe-data-type-cast';\nsetReadOnly( ns, 'isMostlySafeDataTypeCast', isMostlySafeDataTypeCast );\n\n/**\n* @name isNumericDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-numeric-data-type}\n*/\nimport isNumericDataType from './../../../base/assert/is-numeric-data-type';\nsetReadOnly( ns, 'isNumericDataType', isNumericDataType );\n\n/**\n* @name isOrder\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-order}\n*/\nimport isOrder from './../../../base/assert/is-order';\nsetReadOnly( ns, 'isOrder', isOrder );\n\n/**\n* @name isReadOnly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-read-only}\n*/\nimport isReadOnly from './../../../base/assert/is-read-only';\nsetReadOnly( ns, 'isReadOnly', isReadOnly );\n\n/**\n* @name isRealDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-real-data-type}\n*/\nimport isRealDataType from './../../../base/assert/is-real-data-type';\nsetReadOnly( ns, 'isRealDataType', isRealDataType );\n\n/**\n* @name isRealFloatingPointDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-real-floating-point-data-type}\n*/\nimport isRealFloatingPointDataType from './../../../base/assert/is-real-floating-point-data-type';\nsetReadOnly( ns, 'isRealFloatingPointDataType', isRealFloatingPointDataType );\n\n/**\n* @name isRowMajor\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-row-major}\n*/\nimport isRowMajor from './../../../base/assert/is-row-major';\nsetReadOnly( ns, 'isRowMajor', isRowMajor );\n\n/**\n* @name isRowMajorContiguous\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-row-major-contiguous}\n*/\nimport isRowMajorContiguous from './../../../base/assert/is-row-major-contiguous';\nsetReadOnly( ns, 'isRowMajorContiguous', isRowMajorContiguous );\n\n/**\n* @name isSafeDataTypeCast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-safe-data-type-cast}\n*/\nimport isSafeDataTypeCast from './../../../base/assert/is-safe-data-type-cast';\nsetReadOnly( ns, 'isSafeDataTypeCast', isSafeDataTypeCast );\n\n/**\n* @name isSameKindDataTypeCast\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-same-kind-data-type-cast}\n*/\nimport isSameKindDataTypeCast from './../../../base/assert/is-same-kind-data-type-cast';\nsetReadOnly( ns, 'isSameKindDataTypeCast', isSameKindDataTypeCast );\n\n/**\n* @name isSignedIntegerDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-signed-integer-data-type}\n*/\nimport isSignedIntegerDataType from './../../../base/assert/is-signed-integer-data-type';\nsetReadOnly( ns, 'isSignedIntegerDataType', isSignedIntegerDataType );\n\n/**\n* @name isSingleSegmentCompatible\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-single-segment-compatible}\n*/\nimport isSingleSegmentCompatible from './../../../base/assert/is-single-segment-compatible';\nsetReadOnly( ns, 'isSingleSegmentCompatible', isSingleSegmentCompatible );\n\n/**\n* @name isUnsignedIntegerDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assert/is-unsigned-integer-data-type}\n*/\nimport isUnsignedIntegerDataType from './../../../base/assert/is-unsigned-integer-data-type';\nsetReadOnly( ns, 'isUnsignedIntegerDataType', isUnsignedIntegerDataType );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the data type of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {string} data type\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'dtype': 'float64'\n* });\n*\n* var dt = dtype( x );\n* // returns 'float64'\n*/\nfunction dtype( x ) {\n\treturn x.dtype;\n}\n\n\n// EXPORTS //\n\nexport default dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array/base/copy-indexed';\n\n\n// MAIN //\n\n/**\n* Returns the shape of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {boolean} copy - boolean indicating whether to explicitly copy the value assigned to the input ndarray's `shape` property\n* @returns {NonNegativeIntegerArray} shape\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var out = shape( zeros( [ 3, 3, 3 ] ), false );\n* // returns [ 3, 3, 3 ]\n*/\nfunction shape( x, copy ) {\n\tvar sh = x.shape;\n\tif ( copy ) {\n\t\treturn copyIndexed( sh );\n\t}\n\treturn sh;\n}\n\n\n// EXPORTS //\n\nexport default shape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../../base/numel';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a buffer length is compatible with a provided shape array.\n*\n* @param {NonNegativeInteger} len - buffer length\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {boolean} boolean indicating if a buffer length is compatible with a provided shape array\n*\n* @example\n* var shape = [ 2, 2 ];\n*\n* var bool = isBufferLengthCompatibleShape( 4, shape );\n* // returns true\n*\n* @example\n* var shape = [ 2, 2 ];\n*\n* var bool = isBufferLengthCompatibleShape( 3, shape );\n* // returns false\n*/\nfunction isBufferLengthCompatibleShape( len, shape ) { // eslint-disable-line id-length\n\treturn ( len >= numel( shape ) );\n}\n\n\n// EXPORTS //\n\nexport default isBufferLengthCompatibleShape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSingleSegmentCompatible from './../../../../base/assert/is-single-segment-compatible';\nimport iterationOrder from './../../../../base/iteration-order';\nimport isColumnMajor from './../../../../base/assert/is-column-major';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array is column-major contiguous.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {boolean} boolean indicating if an array is column-major contiguous\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 1, 2 ];\n* var offset = 0;\n*\n* var bool = isColumnMajorContiguous( shape, strides, offset );\n* // returns true\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 1, -2 ];\n* var offset = 2;\n*\n* var bool = isColumnMajorContiguous( shape, strides, offset );\n* // returns false\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 2 ];\n* var offset = 0;\n*\n* var bool = isColumnMajorContiguous( shape, strides, offset );\n* // returns false\n*/\nfunction isColumnMajorContiguous( shape, strides, offset ) {\n\treturn (\n\t\titerationOrder( strides ) !== 0 &&\n\t\tisColumnMajor( strides ) &&\n\t\tisSingleSegmentCompatible( shape, strides, offset )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isColumnMajorContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSingleSegmentCompatible from './../../../../base/assert/is-single-segment-compatible';\nimport iterationOrder from './../../../../base/iteration-order';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array is contiguous.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {boolean} boolean indicating if an array is contiguous\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var bool = isContiguous( shape, strides, offset );\n* // returns true\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ -2, 1 ];\n* var offset = 2;\n*\n* var bool = isContiguous( shape, strides, offset );\n* // returns false\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 2 ];\n* var offset = 0;\n*\n* var bool = isContiguous( shape, strides, offset );\n* // returns false\n*/\nfunction isContiguous( shape, strides, offset ) {\n\treturn (\n\t\titerationOrder( strides ) !== 0 &&\n\t\tisSingleSegmentCompatible( shape, strides, offset )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSingleSegmentCompatible from './../../../../base/assert/is-single-segment-compatible';\nimport iterationOrder from './../../../../base/iteration-order';\nimport isRowMajor from './../../../../base/assert/is-row-major';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array is row-major contiguous.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {boolean} boolean indicating if an array is row-major contiguous\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var bool = isRowMajorContiguous( shape, strides, offset );\n* // returns true\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ -2, 1 ];\n* var offset = 2;\n*\n* var bool = isRowMajorContiguous( shape, strides, offset );\n* // returns false\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 2 ];\n* var offset = 0;\n*\n* var bool = isRowMajorContiguous( shape, strides, offset );\n* // returns false\n*/\nfunction isRowMajorContiguous( shape, strides, offset ) {\n\treturn (\n\t\titerationOrder( strides ) !== 0 &&\n\t\tisRowMajor( strides ) &&\n\t\tisSingleSegmentCompatible( shape, strides, offset )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isRowMajorContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport shape2strides from './../../../base/shape2strides';\nimport copyIndexed from '@stdlib/array/base/copy-indexed';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\n\n\n// MAIN //\n\n/**\n* Returns the strides of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {boolean} copy - boolean indicating whether to explicitly copy the value assigned to the input ndarray's `strides` property\n* @returns {IntegerArray} strides\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var out = strides( zeros( [ 3, 3, 3 ] ), false );\n* // returns [ 9, 3, 1 ]\n*/\nfunction strides( x, copy ) {\n\tvar ord;\n\tvar sh;\n\tvar st;\n\n\tst = x.strides;\n\tif ( typeof st !== 'object' || st === null ) {\n\t\tsh = x.shape;\n\t\tif ( sh.length === 0 ) {\n\t\t\treturn [ 0 ];\n\t\t}\n\t\tord = x.order;\n\t\tif ( typeof ord !== 'string' ) {\n\t\t\tord = ROW_MAJOR;\n\t\t}\n\t\treturn shape2strides( sh, ord );\n\t}\n\tif ( copy ) {\n\t\treturn copyIndexed( st );\n\t}\n\treturn st;\n}\n\n\n// EXPORTS //\n\nexport default strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2offset from './../../../base/strides2offset';\n\n\n// MAIN //\n\n/**\n* Returns the index offset specifying the underlying buffer index of the first iterated ndarray element.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {NonNegativeInteger} index offset\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var n = offset( zeros( [ 3, 3, 3 ] ) );\n* // returns 0\n*/\nfunction offset( x ) {\n\tvar st;\n\tvar sh;\n\tvar o;\n\n\to = x.offset;\n\tif ( typeof o === 'number' ) {\n\t\treturn o;\n\t}\n\tsh = x.shape;\n\tif ( sh.length === 0 ) {\n\t\treturn 0;\n\t}\n\tst = x.strides;\n\tif ( typeof st !== 'object' || st === null ) {\n\t\treturn 0;\n\t}\n\treturn strides2offset( sh, st );\n}\n\n\n// EXPORTS //\n\nexport default offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from './../../../base/strides2order';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COLUMN_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Returns the layout order of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {(string|null)} layout order\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'order': 'row-major'\n* });\n*\n* var out = order( x );\n* // returns 'row-major'\n*/\nfunction order( x ) {\n\tvar st;\n\tvar o;\n\n\to = x.order;\n\tif ( typeof o === 'string' ) {\n\t\treturn o;\n\t}\n\t// Try to infer the layout order from the strides array...\n\tst = x.strides;\n\tif ( typeof st !== 'object' || st === null ) {\n\t\treturn ROW_MAJOR; // WARNING: default to row-major for ndarray-like objects lacking strides. This may or may not be accurate, and we're defaulting to row-major here based on the belief that row-major is more likely given that, e.g., JavaScript arrays are similar to C arrays (i.e., stored in row-major order).\n\t}\n\to = strides2order( st );\n\tif ( o === 1 || o === 3 ) {\n\t\treturn ROW_MAJOR; // for o == 3 (both row- and column-major; e.g., one-dimensional ndarrays), default to row-major\n\t}\n\tif ( o === 2 ) {\n\t\treturn COLUMN_MAJOR;\n\t}\n\t// o === 0\n\tif ( x.shape.length === 0 ) {\n\t\treturn ROW_MAJOR; // default to row-major for zero-dimensional ndarrays\n\t}\n\t// Case: mixed strides (e.g., [ 2, 3, 1 ] )\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default order;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the underlying data buffer of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {Collection} underlying data buffer\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'dtype': 'float64'\n* });\n*\n* var out = data( x );\n* // returns <Float64Array>\n*/\nfunction data( x ) {\n\treturn x.data;\n}\n\n\n// EXPORTS //\n\nexport default data;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array/base/assert/is-accessor-array';\nimport accessorGetter from '@stdlib/array/base/accessor-getter';\nimport accessorSetter from '@stdlib/array/base/accessor-setter';\nimport getter from '@stdlib/array/base/getter';\nimport setter from '@stdlib/array/base/setter';\nimport numel from './../../../base/numel';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOffset from './../../../base/offset';\nimport getOrder from './../../../base/order';\nimport getData from './../../../base/data-buffer';\n\n\n// MAIN //\n\n/**\n* Converts an ndarray-like to an object likely to have the same \"shape\".\n*\n* ## Notes\n*\n* -   This function is intended as a potential performance optimization. In V8, for example, even if two objects share common properties, if those properties were added in different orders or if one object has additional properties not shared by the other object, then those objects will have different \"hidden\" classes. If a function is provided many objects having different \"shapes\", some JavaScript VMs (e.g., V8) will consider the function \"megamorphic\" and fail to perform various runtime optimizations. Accordingly, the intent of this function is to standardize the \"shape\" of the object holding ndarray meta data to ensure that internal functions operating on ndarrays are provided consistent argument \"shapes\".\n*\n* -   The returned object has the following properties:\n*\n*     -   **ref**: reference to the original ndarray-like object.\n*     -   **dtype**: underlying data type.\n*     -   **data**: data buffer.\n*     -   **length**: number of elements.\n*     -   **shape**: array dimensions.\n*     -   **strides**: array strides.\n*     -   **offset**: index offset.\n*     -   **order**: order.\n*     -   **accessorProtocol**: `boolean` indicating whether the data buffer supports the get/set protocol (i.e., uses accessors for getting and setting elements).\n*     -   **accessors**: a two-element array whose first element is an accessor for retrieving an ndarray element and whose second element is an accessor for setting an ndarray element.\n*\n* @param {ndarrayLike} x - ndarray-like object\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @returns {Object} object containing ndarray meta data\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );\n*\n* var obj = ndarraylike2object( x );\n* // returns {...}\n*/\nfunction ndarraylike2object( x ) {\n\tvar xbuf;\n\tvar bool;\n\tvar sh;\n\tvar dt;\n\n\txbuf = getData( x );\n\tsh = getShape( x, true );\n\tdt = getDType( x );\n\n\tbool = isAccessorArray( xbuf );\n\n\treturn {\n\t\t'ref': x,\n\t\t'dtype': dt,\n\t\t'data': xbuf,\n\t\t'length': numel( sh ),\n\t\t'shape': sh,\n\t\t'strides': getStrides( x, true ),\n\t\t'offset': getOffset( x ),\n\t\t'order': getOrder( x ),\n\t\t'accessorProtocol': bool,\n\t\t'accessors': ( bool ) ?\n\t\t\t[ accessorGetter( dt ), accessorSetter( dt ) ] :\n\t\t\t[ getter( dt ), setter( dt ) ]\n\t};\n}\n\n\n// EXPORTS //\n\nexport default ndarraylike2object;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array/base/zero-to';\nimport copy from '@stdlib/array/base/copy-indexed';\nimport take from '@stdlib/array/base/take-indexed';\nimport sort2ins from './sort2ins.js';\n\n\n// MAIN //\n\n/**\n* Reorders ndarray dimensions and associated strides for loop interchange.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **sh**: dimensions sorted in loop order.\n*     -   **sx**: input ndarray strides sorted in loop order.\n*     -   **sy**: output ndarray strides sorted in loop order.\n*\n* @param {NonNegativeIntegerArray} sh - array dimensions\n* @param {IntegerArray} sx - input array stride lengths\n* @param {IntegerArray} sy - output array stride lengths\n* @returns {Object} loop interchange data\n*\n* @example\n* var sh = [ 2, 3, 4 ];\n*\n* var sx = [ 12, 4, 1 ]; // row-major\n* var sy = [ 1, -2, 6 ]; // column-major\n*\n* var o = loopOrder( sh, sx, sy );\n* // returns {...}\n*\n* var ssh = o.sh;\n* // returns [ 4, 3, 2 ]\n*\n* var ssx = o.sx;\n* // returns [ 1, 4, 12 ]\n*\n* var ssy = o.sy;\n* // returns [ 6, -2, 1 ]\n*/\nfunction loopOrder( sh, sx, sy ) {\n\tvar idx;\n\n\t// Initialize a loop interchange index array for generating a loop order permutation:\n\tidx = zeroTo( sh.length );\n\n\t// Sort the input array strides in increasing order (of magnitude):\n\tsx = copy( sx );\n\tsort2ins( sx, idx );\n\n\t// Permute the shape and output array strides based on the sorted input array strides:\n\tsh = take( sh, idx );\n\tsy = take( sy, idx );\n\n\treturn {\n\t\t'sh': sh,\n\t\t'sx': sx,\n\t\t'sy': sy\n\t};\n}\n\n\n// EXPORTS //\n\nexport default loopOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Simultaneously sorts two arrays based on the sort order of the first array using insertion sort.\n*\n* ## Notes\n*\n* -   The first array is sorted in increasing order according to absolute value.\n* -   The algorithm has space complexity `O(1)` and worst case time complexity `O(N^2)`.\n* -   The algorithm is efficient for small arrays (typically `N <= 20``) and is particularly efficient for sorting arrays which are already substantially sorted.\n* -   The algorithm is **stable**, meaning that the algorithm does **not** change the order of array elements which are equal or equivalent.\n* -   The input arrays are sorted in-place (i.e., the input arrays are mutated).\n*\n* @private\n* @param {Array} x - first array\n* @param {Array} y - second array\n* @returns {void}\n*\n* @example\n* var x = [ -4, -2, 3, 1 ];\n* var y = [ 0, 1, 2, 3 ];\n*\n* sort2ins( x, y );\n*\n* console.log( x );\n* // => [ 1, -2, 3, -4 ]\n*\n* console.log( y );\n* // => [ 3, 1, 2, 0 ]\n*/\nfunction sort2ins( x, y ) {\n\tvar avx;\n\tvar aux;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tix = 1;\n\tiy = 1;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < x.length; i++ ) {\n\t\tvx = x[ ix ];\n\t\tavx = ( vx < 0 ) ? -vx : vx;\n\n\t\tvy = y[ iy ];\n\n\t\tjx = ix - 1;\n\t\tjy = iy - 1;\n\n\t\t// Shift all larger values to the left of the current element to the right...\n\t\twhile ( jx >= 0 ) {\n\t\t\tux = x[ jx ];\n\t\t\taux = ( ux < 0 ) ? -ux : ux;\n\t\t\tif ( aux <= avx ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[ jx+1 ] = ux;\n\t\t\ty[ jy+1 ] = y[ jy ];\n\t\t\tjx -= 1;\n\t\t\tjy -= 1;\n\t\t}\n\t\tx[ jx+1 ] = vx;\n\t\ty[ jy+1 ] = vy;\n\t\tix += 1;\n\t\tiy += 1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar defaults = {\n\t// Define a default block size (in bytes):\n\t'BLOCK_SIZE_IN_BYTES': 64|0, // 64b is a common cache line size. How applicable the common cache line size is here is debatable, given that, depending on the associated stride(s), the innermost loop may not iterate over adjacent elements. The primary goal is to have a block size in which all data within a block can always fit in (L1) cache, regardless of cache size (i.e., cache-oblivious). For reference, a common L1 cache size is 32kB per core. For best performance, block sizes should be tuned based on system hardware; however, such tuning is not readily available to us here. Without obvious better alternatives, 64b has some theoretical (and practical) underpinning, and it should be good enough for most inputs, especially for ndarrays with near contiguity.\n\n\t// Define a default block size (in elements):\n\t'BLOCK_SIZE_IN_ELEMENTS': 8|0 // 64 bytes / 8 bytes per element (i.e., default element size is same as a double)\n};\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bytesPerElement from './../../../base/bytes-per-element';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns a loop block size for multi-dimensional array tiled loops.\n*\n* @param {string} dtypeX - input array data type\n* @param {string} dtypeY - output array data type\n* @returns {integer} block size (in units of elements)\n*\n* @example\n* var bsize = unaryBlockSize( 'float64', 'float64' );\n* // returns <number>\n*/\nfunction unaryBlockSize( dtypeX, dtypeY ) {\n\tvar nbx;\n\tvar nby;\n\n\tnbx = bytesPerElement( dtypeX );\n\tnby = bytesPerElement( dtypeY );\n\tif ( nbx === null || nby === null ) { // e.g., \"generic\" arrays\n\t\treturn defaults.BLOCK_SIZE_IN_ELEMENTS;\n\t}\n\tif ( nbx > nby ) {\n\t\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nbx )|0; // asm type annotation\n\t}\n\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nby )|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default unaryBlockSize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Converts a linear index in an array view to a linear index in an underlying data buffer.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - location of the first indexed value **based** on the stride array\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {integer} idx - linear index in an array view\n* @param {string} mode - specifies how to handle a linear index which exceeds array dimensions\n* @throws {RangeError} linear index must not exceed array dimensions\n* @returns {NonNegativeInteger} linear index in an underlying data buffer\n*\n* @example\n* var shape = [ 3, 3 ];\n* var strides = [ -3, 1 ];\n* var offset = 6;\n* var order = 'row-major';\n* var mode = 'throw';\n*\n* var ind = vind2bind( shape, strides, offset, order, 1, mode );\n* // returns 7\n*/\nfunction vind2bind( shape, strides, offset, order, idx, mode ) {\n\tvar ndims;\n\tvar len;\n\tvar ind;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\tif ( mode === 'clamp' ) {\n\t\tif ( idx < 0 ) {\n\t\t\tidx = 0;\n\t\t} else if ( idx >= len ) {\n\t\t\tidx = len - 1;\n\t\t}\n\t} else if ( mode === 'wrap' ) {\n\t\tif ( idx < 0 ) {\n\t\t\tidx += len; // slight optimization to avoid modulo arithmetic when |idx| <= len\n\t\t\tif ( idx < 0 ) {\n\t\t\t\tidx %= len;\n\t\t\t\tif ( idx !== 0 ) {\n\t\t\t\t\tidx += len;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( idx >= len ) {\n\t\t\tidx -= len; // slight optimization to avoid modulo arithmetic when len < idx <= 2*len\n\t\t\tif ( idx >= len ) {\n\t\t\t\tidx %= len;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( mode === 'normalize' && idx < 0 ) {\n\t\t\tidx += len;\n\t\t}\n\t\tif ( idx < 0 || idx >= len ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Linear index must not exceed array dimensions. Number of array elements: `%u`. Value: `%d`.', len, idx ) );\n\t\t}\n\t}\n\t// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...\n\tind = offset;\n\tif ( order === 'column-major' ) {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tind += s * strides[ i ];\n\t\t}\n\t\treturn ind;\n\t}\n\t// Case: row-major\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\ts = idx % shape[ i ];\n\t\tidx -= s;\n\t\tidx /= shape[ i ];\n\t\tind += s * strides[ i ];\n\t}\n\treturn ind;\n}\n\n\n// EXPORTS //\n\nexport default vind2bind;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexDataType from './../../../base/assert/is-complex-floating-point-data-type';\nimport isRealDataType from './../../../base/assert/is-real-data-type';\nimport iterationOrder from './../../../base/iteration-order';\nimport castReturn from '@stdlib/complex/base/cast-return';\nimport complexCtors from '@stdlib/complex/ctors';\nimport minmaxViewBufferIndex from './../../../base/minmax-view-buffer-index';\nimport ndarray2object from './../../../base/ndarraylike2object';\nimport blockedaccessorassign2d from './2d_blocked_accessors.js';\nimport blockedaccessorassign3d from './3d_blocked_accessors.js';\nimport blockedaccessorassign4d from './4d_blocked_accessors.js';\nimport blockedaccessorassign5d from './5d_blocked_accessors.js';\nimport blockedaccessorassign6d from './6d_blocked_accessors.js';\nimport blockedaccessorassign7d from './7d_blocked_accessors.js';\nimport blockedaccessorassign8d from './8d_blocked_accessors.js';\nimport blockedaccessorassign9d from './9d_blocked_accessors.js';\nimport blockedaccessorassign10d from './10d_blocked_accessors.js';\nimport blockedassign2d from './2d_blocked.js';\nimport blockedassign3d from './3d_blocked.js';\nimport blockedassign4d from './4d_blocked.js';\nimport blockedassign5d from './5d_blocked.js';\nimport blockedassign6d from './6d_blocked.js';\nimport blockedassign7d from './7d_blocked.js';\nimport blockedassign8d from './8d_blocked.js';\nimport blockedassign9d from './9d_blocked.js';\nimport blockedassign10d from './10d_blocked.js';\nimport accessorassign0d from './0d_accessors.js';\nimport accessorassign1d from './1d_accessors.js';\nimport accessorassign2d from './2d_accessors.js';\nimport accessorassign3d from './3d_accessors.js';\nimport accessorassign4d from './4d_accessors.js';\nimport accessorassign5d from './5d_accessors.js';\nimport accessorassign6d from './6d_accessors.js';\nimport accessorassign7d from './7d_accessors.js';\nimport accessorassign8d from './8d_accessors.js';\nimport accessorassign9d from './9d_accessors.js';\nimport accessorassign10d from './10d_accessors.js';\nimport accessorassignnd from './nd_accessors.js';\nimport assign0d from './0d.js';\nimport assign1d from './1d.js';\nimport assign2d from './2d.js';\nimport assign3d from './3d.js';\nimport assign4d from './4d.js';\nimport assign5d from './5d.js';\nimport assign6d from './6d.js';\nimport assign7d from './7d.js';\nimport assign8d from './8d.js';\nimport assign9d from './9d.js';\nimport assign10d from './10d.js';\nimport assignnd from './nd.js';\n\n\n// VARIABLES //\n\nvar ASSIGN = [\n\tassign0d,\n\tassign1d,\n\tassign2d,\n\tassign3d,\n\tassign4d,\n\tassign5d,\n\tassign6d,\n\tassign7d,\n\tassign8d,\n\tassign9d,\n\tassign10d\n];\nvar ACCESSOR_ASSIGN = [\n\taccessorassign0d,\n\taccessorassign1d,\n\taccessorassign2d,\n\taccessorassign3d,\n\taccessorassign4d,\n\taccessorassign5d,\n\taccessorassign6d,\n\taccessorassign7d,\n\taccessorassign8d,\n\taccessorassign9d,\n\taccessorassign10d\n];\nvar BLOCKED_ASSIGN = [\n\tblockedassign2d, // 0\n\tblockedassign3d,\n\tblockedassign4d,\n\tblockedassign5d,\n\tblockedassign6d,\n\tblockedassign7d,\n\tblockedassign8d,\n\tblockedassign9d,\n\tblockedassign10d // 8\n];\nvar BLOCKED_ACCESSOR_ASSIGN = [\n\tblockedaccessorassign2d, // 0\n\tblockedaccessorassign3d,\n\tblockedaccessorassign4d,\n\tblockedaccessorassign5d,\n\tblockedaccessorassign6d,\n\tblockedaccessorassign7d,\n\tblockedaccessorassign8d,\n\tblockedaccessorassign9d,\n\tblockedaccessorassign10d // 8\n];\nvar MAX_DIMS = ASSIGN.length - 1;\n\n\n// MAIN //\n\n/**\n* Assigns elements in an input ndarray to elements in an output ndarray.\n*\n* ## Notes\n*\n* -   Each provided ndarray should be an `object` with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing one input array and one output array\n* @throws {Error} arrays must have the same number of dimensions\n* @throws {Error} arrays must have the same shape\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign( [ x, y ] );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign( arrays ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar ymmv;\n\tvar shx;\n\tvar shy;\n\tvar iox;\n\tvar ioy;\n\tvar len;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ns;\n\tvar x;\n\tvar y;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarrays and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\ty = ndarray2object( arrays[ 1 ] );\n\n\t// Determine whether we are casting a real data type to a complex data type and we need to use a specialized accessor (note: we don't support the other way, complex-to-real, as this is not an allowed (mostly) safe cast)...\n\tif ( isRealDataType( x.dtype ) && isComplexDataType( y.dtype ) ) {\n\t\tx.accessorProtocol = true;\n\t\tx.accessors[ 0 ] = castReturn( x.accessors[ 0 ], 2, complexCtors( y.dtype ) ); // eslint-disable-line max-len\n\t}\n\t// Verify that the input and output arrays have the same number of dimensions...\n\tshx = x.shape;\n\tshy = y.shape;\n\tndims = shx.length;\n\tif ( ndims !== shy.length ) {\n\t\tthrow new Error( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == '+ndims+'. ndims(y) == '+shy.length+'.' );\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_ASSIGN[ ndims ]( x, y );\n\t\t}\n\t\treturn ASSIGN[ ndims ]( x, y );\n\t}\n\t// Verify that the input and output arrays have the same dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\t\tif ( d !== shy[ i ] ) {\n\t\t\tthrow new Error( 'invalid arguments. Arrays must have the same shape.' );\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 ) {\n\t\treturn;\n\t}\n\t// Determine whether the ndarrays are one-dimensional and thus readily translate to one-dimensional strided arrays...\n\tif ( ndims === 1 ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_ASSIGN[ ndims ]( x, y );\n\t\t}\n\t\treturn ASSIGN[ ndims ]( x, y );\n\t}\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarrays as being equivalent to one-dimensional strided arrays...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\ty.shape = x.shape;\n\t\tx.strides = [ sx[i] ];\n\t\ty.strides = [ sy[i] ];\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_ASSIGN[ 1 ]( x, y );\n\t\t}\n\t\treturn ASSIGN[ 1 ]( x, y );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && x.order === y.order ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array views:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\t\tymmv = minmaxViewBufferIndex( shy, sy, y.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarrays as linear one-dimensional strided arrays...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) && len === ( ymmv[1]-ymmv[0]+1 ) ) {\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioy === 1 ) {\n\t\t\t\toy = ymmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toy = ymmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\ty.shape = x.shape;\n\t\t\tx.strides = [ iox ];\n\t\t\ty.strides = [ ioy ];\n\t\t\tx.offset = ox;\n\t\t\ty.offset = oy;\n\t\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_ASSIGN[ 1 ]( x, y );\n\t\t\t}\n\t\t\treturn ASSIGN[ 1 ]( x, y );\n\t\t}\n\t\t// At least one ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_ASSIGN[ ndims ]( x, y );\n\t\t\t}\n\t\t\treturn ASSIGN[ ndims ]( x, y );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_ASSIGN[ ndims-2 ]( x, y );\n\t\t}\n\t\treturn BLOCKED_ASSIGN[ ndims-2 ]( x, y );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\treturn accessorassignnd( x, y );\n\t}\n\tassignnd( x, y );\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a zero-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0 ] );\n* var ybuf = new Float64Array( 1 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign0d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0 ]\n*/\nfunction assign0d( x, y ) {\n\ty.data[ y.offset ] = x.data[ x.offset ];\n}\n\n\n// EXPORTS //\n\nexport default assign0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a one-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign1d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0 ]\n*/\nfunction assign1d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dy0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tybuf[ iy ] = xbuf[ ix ];\n\t\tix += dx0;\n\t\tiy += dy0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a two-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign2d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0 ]\n*/\nfunction assign2d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a three-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign3d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign3d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a four-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n* var sy = [ 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign4d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign4d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a five-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign5d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign5d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a six-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign6d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign6d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a seven-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign7d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign7d( x, y ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in an eight-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign8d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign8d( x, y ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a nine-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign9d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign9d( x, y ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a ten-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assign10d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction assign10d( x, y ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a zero-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Complex64Array( 2 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign0d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 3.0\n*\n* var im = imagf( v );\n* // returns 4.0\n*/\nfunction assign0d( x, y ) {\n\ty.accessors[ 1 ]( y.data, y.offset, x.accessors[ 0 ]( x.data, x.offset ) );\n}\n\n\n// EXPORTS //\n\nexport default assign0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a one-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign1d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign1d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dy0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a two-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign2d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign2d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a three-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign3d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign3d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a four-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign4d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign4d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a five-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign5d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign5d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a six-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign6d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign6d( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a seven-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign7d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign7d( x, y ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in an eight-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign8d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign8d( x, y ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a nine-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign9d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign9d( x, y ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Assigns elements in a ten-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assign10d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assign10d( x, y ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assign10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a two-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign2d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0 ]\n*/\nfunction blockedassign2d( x, y ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar ox1;\n\tvar oy1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a three-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign3d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction blockedassign3d( x, y ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a four-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n* var sy = [ 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign4d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction blockedassign4d( x, y ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a five-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign5d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction blockedassign5d( x, y ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a six-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign6d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction blockedassign6d( x, y ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a seven-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign7d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction blockedassign7d( x, y ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in an eight-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign8d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction blockedassign8d( x, y ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a nine-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign9d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction blockedassign9d( x, y ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a ten-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* blockedassign10d( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0, 10.0, 11.0 ]\n*/\nfunction blockedassign10d( x, y ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = xbuf[ ix ];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a two-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign2d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign2d( x, y ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar ox1;\n\tvar oy1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a three-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign3d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign3d( x, y ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a four-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign4d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign4d( x, y ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a five-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign5d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign5d( x, y ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a six-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign6d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign6d( x, y ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a seven-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign7d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign7d( x, y ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in an eight-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign8d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign8d( x, y ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a nine-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign9d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign9d( x, y ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Assigns elements in a ten-dimensional input ndarray to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* blockedassign10d( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction blockedassign10d( x, y ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedassign10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../base/numel';\nimport vind2bind from './../../../base/vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Assigns elements in an n-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Copy elements:\n* assignnd( x, y );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 1.0\n*\n* var im = imagf( v );\n* // returns 2.0\n*/\nfunction assignnd( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar get;\n\tvar set;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tset( ybuf, iy, get( xbuf, ix ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assignnd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../base/numel';\nimport vind2bind from './../../../base/vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Assigns elements in an n-dimensional input ndarray to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Copy elements:\n* assignnd( x, y );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 2.0, 3.0, 6.0, 7.0 ]\n*/\nfunction assignnd( x, y ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tybuf[ iy ] = xbuf[ ix ];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default assignnd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar defaults = {\n\t// Define a default block size (in bytes):\n\t'BLOCK_SIZE_IN_BYTES': 64|0, // 64b is a common cache line size. How applicable the common cache line size is here is debatable, given that, depending on the associated stride(s), the innermost loop may not iterate over adjacent elements. The primary goal is to have a block size in which all data within a block can always fit in (L1) cache, regardless of cache size (i.e., cache-oblivious). For reference, a common L1 cache size is 32kB per core. For best performance, block sizes should be tuned based on system hardware; however, such tuning is not readily available to us here. Without obvious better alternatives, 64b has some theoretical (and practical) underpinning, and it should be good enough for most inputs, especially for ndarrays with near contiguity.\n\n\t// Define a default block size (in elements):\n\t'BLOCK_SIZE_IN_ELEMENTS': 8|0 // 64 bytes / 8 bytes per element (i.e., default element size is same as a double)\n};\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolve from './../../../base/dtype-resolve-str';\nimport table from './table.js';\n\n\n// VARIABLES //\n\nvar TABLE;\n\n\n// MAIN //\n\n/**\n* Returns the single letter character abbreviation for an underlying array data type.\n*\n* @param {*} [dtype] - data type value\n* @returns {(Object|string|null)} single letter character abbreviation(s)\n*\n* @example\n* var obj = dtypeChar();\n* // returns {...}\n*\n* @example\n* var ch = dtypeChar( 'float64' );\n* // returns 'd'\n*\n* ch = dtypeChar( 'generic' );\n* // returns 'o'\n*/\nfunction dtypeChar( dtype ) {\n\tif ( arguments.length === 0 ) {\n\t\treturn table();\n\t}\n\tif ( TABLE === void 0 ) {\n\t\tTABLE = table();\n\t}\n\treturn TABLE[ resolve( dtype ) ] || null;\n}\n\n\n// EXPORTS //\n\nexport default dtypeChar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport dtypeChar from './../../../base/dtype-char';\n\n\n// VARIABLES //\n\nvar TABLE;\n\n\n// MAIN //\n\n/**\n* Returns the data type string associated with a provided single letter abbreviation.\n*\n* @param {string} ch - single letter character abbreviation\n* @returns {(Object|string|null)} data type string\n*\n* @example\n* var obj = char2dtype();\n* // returns {...}\n*\n* @example\n* var out = char2dtype( 'd' );\n* // returns 'float64'\n*\n* out = char2dtype( '(' );\n* // returns null\n*/\nfunction char2dtype( ch ) {\n\tif ( arguments.length === 0 ) {\n\t\treturn objectInverse( dtypeChar() );\n\t}\n\tif ( TABLE === void 0 ) {\n\t\tTABLE = objectInverse( dtypeChar() );\n\t}\n\treturn TABLE[ ch ] || null;\n}\n\n\n// EXPORTS //\n\nexport default char2dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolve from './../../../base/dtype-resolve-str';\nimport table from './table.js';\n\n\n// VARIABLES //\n\nvar TABLE;\n\n\n// MAIN //\n\n/**\n* Returns the description for a provided data type.\n*\n* @param {*} [dtype] - data type value\n* @returns {(Object|string|null)} description(s)\n*\n* @example\n* var obj = dtypeDesc();\n* // returns {...}\n*\n* @example\n* var desc = dtypeDesc( 'float64' );\n* // returns '...'\n*\n* desc = dtypeDesc( 'generic' );\n* // returns '...'\n*/\nfunction dtypeDesc( dtype ) {\n\tif ( arguments.length === 0 ) {\n\t\treturn table();\n\t}\n\tif ( TABLE === void 0 ) {\n\t\tTABLE = table();\n\t}\n\treturn TABLE[ resolve( dtype ) ] || null;\n}\n\n\n// EXPORTS //\n\nexport default dtypeDesc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copy from '@stdlib/array/base/copy-indexed';\nimport ndarray from './../../../base/ctor';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOffset from './../../../base/offset';\nimport getOrder from './../../../base/order';\nimport getDType from './../../../base/dtype';\nimport getData from './../../../base/data-buffer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Broadcasts an ndarray to a specified shape.\n*\n* ## Notes\n*\n* -   The returned array is a view on the input array data buffer. The view is typically **not** contiguous. As more than one element of a returned view may refer to the same memory location, writing to the view may affect multiple elements. If you need to write to the returned array, copy the array before performing operations which may mutate elements.\n*\n* @param {ndarray} arr - input array\n* @param {NonNegativeIntegerArray} shape - desired shape\n* @throws {Error} input array cannot have more dimensions than the desired shape\n* @throws {Error} input array dimension sizes must be `1` or equal to the corresponding dimension in the provided shape\n* @throws {Error} input array and desired shape must be broadcast compatible\n* @returns {ndarray} broadcasted array\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = broadcastArray( x, [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 1\n*\n* v = y.get( 1, 1, 0 );\n* // returns 3\n*\n* v = y.get( 2, 0, 0 );\n* // returns 1\n*\n* v = y.get( 2, 1, 1 );\n* // returns 4\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var y = broadcastArray( x, [ 3, 2 ] );\n* // throws <Error>\n*/\nfunction broadcastArray( arr, shape ) {\n\tvar strides;\n\tvar dim;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar M;\n\tvar d;\n\tvar i;\n\tvar j;\n\n\tN = shape.length;\n\tsh = getShape( arr, false );\n\tM = sh.length;\n\tif ( N < M ) {\n\t\tthrow new Error( 'invalid argument. Cannot broadcast an array to a shape having fewer dimensions. Arrays can only be broadcasted to shapes having the same or more dimensions.' );\n\t}\n\t// Initialize a strides array...\n\tstrides = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstrides.push( 0 );\n\t}\n\t// Determine the output array strides...\n\tst = getStrides( arr, false );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\tj = M - N + i;\n\t\tif ( j < 0 ) {\n\t\t\t// Prepended singleton dimension; stride is zero...\n\t\t\tcontinue;\n\t\t}\n\t\td = sh[ j ];\n\t\tdim = shape[ i ];\n\t\tif ( dim !== 0 && dim < d ) {\n\t\t\tthrow new Error( format( 'invalid argument. Input array cannot be broadcast to the specified shape, as the specified shape has a dimension whose size is less than the size of the corresponding dimension in the input array. Array shape: (%s). Desired shape: (%s). Dimension: %u.', copy( sh ).join( ', ' ), copy( shape ).join( ', ' ), i ) );\n\t\t}\n\t\tif ( d === dim ) {\n\t\t\tstrides[ i ] = st[ j ];\n\t\t} else if ( d === 1 ) {\n\t\t\t// In order to broadcast dimensions, we set the stride for that dimension to zero...\n\t\t\tstrides[ i ] = 0;\n\t\t} else {\n\t\t\t// At this point, we know that `dim > d` and that `d` does not equal `1` (e.g., `dim=3` and `d=2`); in which case, the shapes are considered incompatible (even for desired shapes which are multiples of array dimensions, as might be desired when \"tiling\" an array; e.g., `dim=4` and `d=2`)...\n\t\t\tthrow new Error( format( 'invalid argument. Input array and the specified shape are broadcast incompatible. Array shape: (%s). Desired shape: (%s). Dimension: %u.', copy( sh ).join( ', ' ), copy( shape ).join( ', ' ), i ) );\n\t\t}\n\t}\n\treturn ndarray( getDType( arr ), getData( arr ), copy( shape ), strides, getOffset( arr ), getOrder( arr ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default broadcastArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping data type strings to single letter abbreviations.\n*\n* @private\n* @returns {Object} object mapping data type string to single letter abbreviations\n*/\nfunction table() {\n\treturn {\n\t\t'binary': 'r',\n\n\t\t'bool': 'x',\n\n\t\t'complex64': 'c',\n\t\t'complex128': 'z',\n\n\t\t'float16': 'h',\n\t\t'bfloat16': 'e',\n\t\t'float32': 'f',\n\t\t'float64': 'd',\n\t\t'float128': 'g',\n\n\t\t'generic': 'o',\n\n\t\t'int8': 's',\n\t\t'int16': 'k',\n\t\t'int32': 'i',\n\t\t'int64': 'l',\n\t\t'int128': 'm',\n\t\t'int256': 'n',\n\n\t\t'uint8': 'b',\n\t\t'uint8c': 'a',\n\t\t'uint16': 't',\n\t\t'uint32': 'u',\n\t\t'uint64': 'v',\n\t\t'uint128': 'w',\n\t\t'uint256': 'y'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default table;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/dtype-enum2str';\nimport str2enum from './../../../base/dtype-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported ndarray data type value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} dtype - data type value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'int8' );\n* // returns <number>\n*/\nfunction resolve( dtype ) {\n\tvar t = ( typeof dtype );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( dtype ) ) ? dtype : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( dtype );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert/is-array-like-object';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport resolve from './../../../base/dtype-resolve-str';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Transforms a list of array argument data types into a list of signatures.\n*\n* @param {ArrayLikeObject} dtypes - list of array argument data types\n* @param {NonNegativeInteger} nin - number of input array arguments\n* @param {NonNegativeInteger} nout - number of output array arguments\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {RangeError} first argument must contain at least one element\n* @throws {RangeError} length of the first argument is incompatible with the second and third arguments\n* @returns {StringArray} list of signatures\n*\n* @example\n* var dtypes = [\n*     'float64', 'float64',\n*     'float32', 'float32'\n* ];\n*\n* var sigs = dtypes2signatures( dtypes, 1, 1 );\n* // returns [ '(float64) => (float64)', '(float32) => (float32)' ]\n*/\nfunction dtypes2signatures( dtypes, nin, nout ) {\n\tvar len;\n\tvar out;\n\tvar tmp;\n\tvar dt;\n\tvar N;\n\tvar M;\n\tvar i;\n\tvar m;\n\n\tif ( !isArrayLikeObject( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', dtypes ) );\n\t}\n\tif ( !isNonNegativeInteger( nin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', nin ) );\n\t}\n\tif ( !isNonNegativeInteger( nout ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', nout ) );\n\t}\n\tlen = dtypes.length;\n\tif ( len === 0 ) {\n\t\tthrow new RangeError( 'invalid argument. First argument must contain at least one element.' );\n\t}\n\tN = nin + nout;\n\tif ( len%N !== 0 ) {\n\t\tthrow new RangeError( 'invalid arguments. Length of the first argument is incompatible with the second and third arguments.' );\n\t}\n\tout = [];\n\n\t// Create a temporary array for storing signatures...\n\ttmp = [];\n\n\t// [ '(', <in_dtype>, ', ', ..., ') => (', <out_dtype>, ', ', ..., ')' ] => 1+nin+nin-1+1+nout+nout-1+1 => 1 + (2*nin) + (2*nout) => 1 + (2*(nin+nout))\n\tM = 2 * N;\n\tm = 2 * nin;\n\tfor ( i = 0; i <= M; i++ ) {\n\t\tif ( i === 0 ) {\n\t\t\tif ( i === m ) {\n\t\t\t\ttmp.push( '() => (' );\n\t\t\t} else {\n\t\t\t\ttmp.push( '(' );\n\t\t\t}\n\t\t} else if ( i === M ) {\n\t\t\tif ( i === m ) {\n\t\t\t\ttmp.push( ') => ()' );\n\t\t\t} else {\n\t\t\t\ttmp.push( ')' );\n\t\t\t}\n\t\t} else if ( i === m ) {\n\t\t\ttmp.push( ') => (' );\n\t\t} else if ( i%2 === 1 ) {\n\t\t\ttmp.push( '' );\n\t\t} else {\n\t\t\ttmp.push( ', ' );\n\t\t}\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdt = resolve( dtypes[ i ] );\n\t\tif ( dt === null ) {\n\t\t\tdt = dtypes[ i ];\n\t\t}\n\t\tm = i % N;\n\t\ttmp[ (2*m)+1 ] = dt;\n\t\tif ( m === N-1 ) {\n\t\t\tout.push( tmp.join( '' ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dtypes2signatures;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeMultiSlice from '@stdlib/slice/base/normalize-multi-slice';\nimport nonreducedDimensions from '@stdlib/slice/base/nonreduced-dimensions';\nimport sliceShape from '@stdlib/slice/base/shape';\nimport take from '@stdlib/array/base/take-indexed';\nimport zeros from '@stdlib/array/base/zeros';\nimport numel from './../../../base/numel';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOffset from './../../../base/offset';\nimport getOrder from './../../../base/order';\nimport getData from './../../../base/data-buffer';\nimport format from '@stdlib/string/format';\nimport sliceStart from './slice_start.js';\nimport slice2strides from './slice_strides.js';\nimport empty from './empty.js';\n\n\n// MAIN //\n\n/**\n* Returns a view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {MultiSlice} s - multi-slice object\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import Slice from '@stdlib/slice/ctor';\n* import MultiSlice from '@stdlib/slice/multi';\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new MultiSlice( new Slice( null, null, -2 ), new Slice( null, null, -1 ) );\n* // returns <MultiSlice>\n*\n* var y = slice( x, s, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 6.0, 5.0 ], [ 2.0, 1.0 ] ]\n*/\nfunction slice( x, s, strict, writable ) {\n\tvar strides;\n\tvar offset;\n\tvar dtype;\n\tvar shape;\n\tvar order;\n\tvar sdims;\n\tvar ndims;\n\tvar ctor;\n\tvar sh;\n\tvar ns;\n\n\t// Retrieve array meta data:\n\tdtype = getDType( x );\n\tshape = getShape( x, true );\n\tstrides = getStrides( x, true );\n\toffset = getOffset( x );\n\torder = getOrder( x );\n\tndims = shape.length;\n\n\t// Ensure that the number of array dimensions matches the number of slices:\n\tif ( s.ndims !== ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), s.ndims ) );\n\t}\n\t// Resolve the output array constructor:\n\tctor = x.constructor;\n\n\t// If provided a zero-dimensional input array, return a zero-dimensional array view...\n\tif ( ndims === 0 ) {\n\t\treturn new ctor( dtype, getData( x ), shape, strides, offset, order, {\n\t\t\t'readonly': !writable\n\t\t});\n\t}\n\t// Resolve the indices of the non-reduced dimensions:\n\tsdims = nonreducedDimensions( s );\n\n\t// Normalize the slice object based on the array shape:\n\tns = normalizeMultiSlice( s, shape, true );\n\n\t// Check whether the slice exceeds array bounds...\n\tif ( ns.code ) {\n\t\tif ( strict ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t}\n\t\t// Normalize again, this time allowing for out-of-bounds indices:\n\t\tns = normalizeMultiSlice( s, shape, false );\n\n\t\t// Compute the slice shape:\n\t\tsh = sliceShape( ns );\n\n\t\t// If the non-reduced dimensions contain elements, this means that at least one reduced dimension exceeded array bounds; in which case, we generate a shape containing zeros:\n\t\tif ( numel( take( sh, sdims ) ) > 0 ) {\n\t\t\tsh = zeros( sh.length );\n\t\t}\n\t} else {\n\t\t// Compute the slice shape:\n\t\tsh = sliceShape( ns );\n\t}\n\t// If the slice does not contain any elements, return an empty array...\n\tif ( numel( sh ) === 0 ) {\n\t\treturn empty( ctor, dtype, take( sh, sdims ), order, !writable );\n\t}\n\t// Resolve the index offset of the first element indexed by the slice:\n\toffset = sliceStart( ns, strides, offset ); // TODO: @stdlib/ndarray/base/sind2bind\n\n\t// Remove reduced dimensions from the slice shape:\n\tsh = take( sh, sdims );\n\n\t// If all dimensions were reduced, return a zero-dimensional array...\n\tif ( sh.length === 0 ) {\n\t\treturn new ctor( dtype, getData( x ), [], [ 0 ], offset, order, {\n\t\t\t'readonly': !writable\n\t\t});\n\t}\n\t// Update strides according to slice steps:\n\tstrides = slice2strides( ns, strides, sdims ); // TODO: @stdlib/ndarray/base/slice2strides???\n\n\t// Return a slice view:\n\treturn new ctor( dtype, getData( x ), sh, strides, offset, order, {\n\t\t'readonly': !writable\n\t});\n}\n\n\n// EXPORTS //\n\nexport default slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport buffer from './../../../base/buffer';\nimport zeros from '@stdlib/array/base/zeros';\n\n\n// MAIN //\n\n/**\n* Returns an empty n-dimensional ndarray.\n*\n* @private\n* @param {Function} ctor - ndarray constructor\n* @param {string} dtype - array data type\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - layout order\n* @param {boolean} readonly - boolean indicating whether a returned array should be read-only\n* @returns {ndarray} empty ndarray\n*/\nfunction empty( ctor, dtype, shape, order, readonly ) {\n\tvar strides;\n\tvar ndims;\n\n\tndims = shape.length;\n\tif ( ndims === 0 ) {\n\t\tstrides = [ 0 ];\n\t} else {\n\t\tstrides = zeros( ndims );\n\t}\n\treturn new ctor( dtype, buffer( dtype, 0 ), shape, strides, 0, order, {\n\t\t'readonly': readonly\n\t});\n}\n\n\n// EXPORTS //\n\nexport default empty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves the index offset of the first element indexed by a normalized multi-slice.\n*\n* @private\n* @param {MultiSlice} slice - normalized multi-slice object\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - array index offset\n* @returns {NonNegativeInteger} index offset of the first element indexed by a normalized multi-slice object\n*/\nfunction sliceStart( slice, strides, offset ) {\n\tvar data;\n\tvar idx;\n\tvar i;\n\n\tdata = slice.data;\n\tidx = offset;\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tidx += strides[ i ] * data[ i ].start;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default sliceStart;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves slice strides for a provided normalized multi-slice object.\n*\n* @private\n* @param {MultiSlice} slice - normalized multi-slice object\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeIntegerArray} rdims - indices of non-reduced dimensions\n* @returns {IntegerArray} slice strides\n*\n* @example\n* import Slice from '@stdlib/slice/ctor';\n* import MultiSlice from '@stdlib/slice/multi';\n*\n* var s = new MultiSlice( new Slice( 2, 3, 1 ), new Slice( 10, null, -2 ) );\n* // returns <MultiSlice>\n*\n* var strides = slice2strides( s, [ 8, 2 ], [ 1 ] );\n* // returns [ -4 ]\n*/\nfunction slice2strides( slice, strides, rdims ) {\n\tvar data;\n\tvar out;\n\tvar i;\n\tvar j;\n\n\tdata = slice.data;\n\tout = [];\n\tfor ( i = 0; i < rdims.length; i++ ) {\n\t\tj = rdims[ i ];\n\t\tout.push( strides[j] * data[j].step );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default slice2strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the number of ndarray dimensions.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {NonNegativeInteger} number of dimensions\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var n = ndims( zeros( [ 3, 3, 3 ] ) );\n* // returns 3\n*/\nfunction ndims( x ) {\n\tvar n = x.ndims; // Note: intentionally cache in case `ndims` is lazily resolved via accessor\n\tif ( typeof n === 'number' ) {\n\t\treturn n;\n\t}\n\treturn x.shape.length;\n}\n\n\n// EXPORTS //\n\nexport default ndims;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport Slice from '@stdlib/slice/ctor';\nimport slice from './../../../base/slice';\nimport filled from '@stdlib/array/base/filled';\nimport ndims from './../../../base/ndims';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a view of an input ndarray in which the order of elements along a specified dimension is reversed.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to reverse\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = reverseDimension( x, 0, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 5.0, 6.0 ], [ 3.0, 4.0 ], [ 1.0, 2.0 ] ]\n*/\nfunction reverseDimension( x, dim, writable ) {\n\tvar args;\n\tvar N;\n\tvar d;\n\n\t// Retrieve the number of array dimensions:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index...\n\td = dim;\n\tif ( d < 0 ) {\n\t\td += N;\n\t\tif ( d < 0 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t\t}\n\t} else if ( d >= N ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Define a list of MultiSlice constructor arguments:\n\targs = filled( null, N );\n\targs[ d ] = new Slice( null, null, -1 );\n\n\t// Return a new array view:\n\treturn slice( x, args2multislice( args ), true, writable );\n}\n\n\n// EXPORTS //\n\nexport default reverseDimension;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string/format';\nimport trunc from '@stdlib/math/base/special/trunc';\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - location of the first indexed value **based** on the stride array\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {integer} idx - linear index\n* @param {string} mode - specifies how to handle a linear index which exceeds array dimensions\n* @param {(Array|TypedArray|Object)} out - destination object\n* @throws {RangeError} linear index must not exceed array dimensions\n* @returns {(Array|TypedArray|Object)} subscripts\n*\n* @example\n* var shape = [ 3, 3, 3 ];\n* var strides = [ 9, 6, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var s = [ 0, 0, 0 ];\n* var out = ind2sub( shape, strides, offset, order, 17, 'throw', s );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( out === s );\n* // returns true\n*/\nfunction ind2sub( shape, strides, offset, order, idx, mode, out ) {\n\tvar ndims;\n\tvar len;\n\tvar k;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\tif ( mode === 'clamp' ) {\n\t\tif ( idx < 0 ) {\n\t\t\tidx = 0;\n\t\t} else if ( idx >= len ) {\n\t\t\tidx = len - 1;\n\t\t}\n\t} else if ( mode === 'wrap' ) {\n\t\tif ( idx < 0 ) {\n\t\t\tidx += len; // slight optimization to avoid modulo arithmetic when |idx| <= len\n\t\t\tif ( idx < 0 ) {\n\t\t\t\tidx %= len;\n\t\t\t\tif ( idx !== 0 ) {\n\t\t\t\t\tidx += len;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( idx >= len ) {\n\t\t\tidx -= len; // slight optimization to avoid modulo arithmetic when len < idx <= 2*len\n\t\t\tif ( idx >= len ) {\n\t\t\t\tidx %= len;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( mode === 'normalize' && idx < 0 ) {\n\t\t\tidx += len;\n\t\t}\n\t\tif ( idx < 0 || idx >= len ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Linear index must not exceed array dimensions. Number of array elements: `%u`. Value: `%d`.', len, idx ) );\n\t\t}\n\t}\n\tif ( offset === 0 ) {\n\t\tif ( order === 'column-major' ) {\n\t\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\t\ts = idx % shape[ i ];\n\t\t\t\tidx -= s;\n\t\t\t\tidx /= shape[ i ];\n\t\t\t\tout[ i ] = s;\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: row-major\n\t\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tout[ i ] = s;\n\t\t}\n\t\treturn out;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\t\ts = strides[ i ];\n\t\t\tif ( s < 0 ) {\n\t\t\t\tk = trunc( idx/s );\n\t\t\t\tidx -= k * s;\n\t\t\t\tout[ i ] = shape[ i ] - 1 + k;\n\t\t\t} else {\n\t\t\t\tk = trunc( idx/s );\n\t\t\t\tidx -= k * s;\n\t\t\t\tout[ i ] = k;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\t// Case: row-major\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\ts = strides[ i ];\n\t\tif ( s < 0 ) {\n\t\t\tk = trunc( idx/s );\n\t\t\tidx -= k * s;\n\t\t\tout[ i ] = shape[ i ] - 1 + k;\n\t\t} else {\n\t\t\tk = trunc( idx/s );\n\t\t\tidx -= k * s;\n\t\t\tout[ i ] = k;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ind2sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport zeros from '@stdlib/array/base/zeros';\nimport getSubscripts from './assign.js';\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a linear index exceeds array dimensions.\n*     -   **normalize**: normalize negative indices and throw an error when a linear index exceeds array dimensions.\n*     -   **wrap**: wrap around a linear index exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.\n*\n* -   When provided a stride array containing negative strides, if an `offset` is greater than `0`, the function interprets the linear index as an index into the underlying data buffer for the array, thus returning subscripts from the perspective of that buffer. If an `offset` is equal to `0`, the function treats the linear index as an index into an array view, thus returning subscripts from the perspective of that view.\n*\n*     ```text\n*     Dims: 2x2\n*     Buffer: [ 1, 2, 3, 4 ]\n*\n*     View = [ a00, a01,\n*              a10, a11 ]\n*\n*     Strides: 2,1\n*     Offset: 0\n*\n*     View = [ 1, 2,\n*              3, 4 ]\n*\n*     Strides: 2,-1\n*     Offset: 1\n*\n*     View = [ 2, 1,\n*              4, 3 ]\n*\n*     Strides: -2,1\n*     Offset: 2\n*\n*     View = [ 3, 4,\n*              1, 2 ]\n*\n*     Strides: -2,-1\n*     Offset: 3\n*\n*     View = [ 4, 3,\n*              2, 1 ]\n*     ```\n*\n*     ```javascript\n*     var shape = [ 2, 2 ];\n*     var order = 'row-major';\n*     var strides = [ -2, 1 ];\n*     var offset = 2;\n*     var mode = 'throw';\n*\n*     // From the perspective of a view...\n*     var s = ind2sub( shape, strides, 0, order, 0, mode );\n*     // returns [ 0, 0 ]\n*\n*     s = ind2sub( shape, strides, 0, order, 1, mode );\n*     // returns [ 0, 1 ]\n*\n*     s = ind2sub( shape, strides, 0, order, 2, mode );\n*     // returns [ 1, 0 ]\n*\n*     s = ind2sub( shape, strides, 0, order, 3, mode );\n*     // returns [ 1, 1 ]\n*\n*     // From the perspective of an underlying buffer...\n*     s = ind2sub( shape, strides, offset, order, 0, mode );\n*     // returns [ 1, 0 ]\n*\n*     s = ind2sub( shape, strides, offset, order, 1, mode );\n*     // returns [ 1, 1 ]\n*\n*     s = ind2sub( shape, strides, offset, order, 2, mode );\n*     // returns [ 0, 0 ]\n*\n*     s = ind2sub( shape, strides, offset, order, 3, mode );\n*     // returns [ 0, 1 ]\n*     ```\n*\n*     In short, from the perspective of a view, view data is always ordered.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - location of the first indexed value **based** on the stride array\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {integer} idx - linear index\n* @param {string} mode - specifies how to handle a linear index which exceeds array dimensions\n* @throws {RangeError} linear index must not exceed array dimensions\n* @returns {Array} subscripts\n*\n* @example\n* var shape = [ 3, 3, 3 ];\n* var strides = [ 9, 6, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var s = ind2sub( shape, strides, offset, order, 17, 'throw' );\n* // returns [ 1, 2, 2 ]\n*/\nfunction ind2sub( shape, strides, offset, order, idx, mode ) {\n\treturn getSubscripts( shape, strides, offset, order, idx, mode, zeros( shape.length ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ind2sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a linear index to an array of subscripts.\n*\n* @module @stdlib/ndarray/base/ind2sub\n*\n* @example\n* import ind2sub from '@stdlib/ndarray/base/ind2sub';\n*\n* var shape = [ 3, 3, 3 ];\n* var strides = [ 9, 6, 1 ];\n* var offset = 0;\n*\n* var s = ind2sub( shape, strides, offset, 'row-major', 17, 'throw' );\n* // returns [ 1, 2, 2 ]\n*\n* @example\n* import ind2sub from '@stdlib/ndarray/base/ind2sub';\n*\n* var shape = [ 3, 3, 3 ];\n* var strides = [ 9, 6, 1 ];\n* var offset = 0;\n*\n* var s = [ 0, 0, 0 ];\n* var out = ind2sub.assign( shape, strides, offset, 'row-major', 17, 'throw', s );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( out === s );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\n\n\n// FUNCTIONS //\n\n/**\n* Returns the next Cartesian index (row-major).\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeIntegerArray} idx - current dimension indices\n* @param {NonNegativeInteger} dim - index of the dimension from which to start incrementing (inclusive)\n* @param {(Array|TypedArray|Object)} out - output array\n* @returns {(Array|TypedArray|Object)} output array\n*/\nfunction rowmajor( ndims, shape, idx, dim, out ) {\n\tvar i;\n\tvar j;\n\n\t// Set dimension indices which are skipped...\n\tfor ( i = ndims-1; i > dim; i-- ) {\n\t\tout[ i ] = idx[ i ];\n\t}\n\t// Search for the first dimension in which we don't have to \"carry the one\"...\n\tfor ( i = dim; i >= 0; i-- ) {\n\t\tj = ( idx[ i ] + 1 ) % shape[ i ];\n\t\tout[ i ] = j;\n\n\t\t// If the current index value is greater than zero, we can continue iterating within the current sub-array...\n\t\tif ( j > 0 ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t// Set dimension indices which did not get updated...\n\tfor ( i -= 1; i >= 0; i-- ) {\n\t\tout[ i ] = idx[ i ];\n\t}\n\treturn out;\n}\n\n/**\n* Returns the next Cartesian index (column-major).\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeIntegerArray} idx - current dimension indices\n* @param {NonNegativeInteger} dim - index of the dimension from which to start incrementing (inclusive)\n* @param {(Array|TypedArray|Object)} out - output array\n* @returns {(Array|TypedArray|Object)} output array\n*/\nfunction columnmajor( ndims, shape, idx, dim, out ) {\n\tvar i;\n\tvar j;\n\n\t// Set dimension indices which are skipped...\n\tfor ( i = 0; i < dim; i++ ) {\n\t\tout[ i ] = idx[ i ];\n\t}\n\t// Search for the first dimension in which we don't have to \"carry the one\"...\n\tfor ( i = dim; i < ndims; i++ ) {\n\t\tj = ( idx[ i ] + 1 ) % shape[ i ];\n\t\tout[ i ] = j;\n\n\t\t// If the current index value is greater than zero, we can continue iterating within the current sub-array...\n\t\tif ( j > 0 ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t// Set dimension indices which did not get updated...\n\tfor ( i += 1; i < ndims; i++ ) {\n\t\tout[ i ] = idx[ i ];\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns the next Cartesian index (i.e., set of subscripts/dimension indices) and assigns results to a provided output array.\n*\n* ## Notes\n*\n* -   The function does not check whether the current index is the \"last\" index. Instead, if the function is provided dimension indices corresponding to the last element, the function will cycle back to the \"first\" index.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - index iteration order\n* @param {NonNegativeIntegerArray} idx - current dimension indices\n* @param {integer} dim - index of the dimension from which to start incrementing (inclusive)\n* @param {(Array|TypedArray|Object)} out - output array\n* @returns {(Array|TypedArray|Object|null)} output array (or null)\n*\n* @example\n* var shape = [ 12 ];\n* var idx = nextCartesianIndex( shape, 'row-major', [ 2 ], 0, [ 0 ] );\n* // returns [ 3 ]\n*\n* @example\n* var shape = [ 2, 2, 2 ];\n*\n* var out = [ 0, 0, 0 ];\n* var idx = nextCartesianIndex( shape, 'row-major', [ 0, 0, 1 ], -1, out );\n* // returns [ 0, 1, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1, out );\n* // returns [ 0, 1, 1 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1, out );\n* // returns [ 1, 0, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1, out );\n* // returns [ 1, 0, 1 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1, out );\n* // returns [ 1, 1, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1, out );\n* // returns [ 1, 1, 1 ]\n*\n* @example\n* var shape = [];\n* var idx = nextCartesianIndex( shape, 'row-major', [], 0, [] );\n* // returns null\n*\n* @example\n* var shape = [ 12 ];\n* var idx = nextCartesianIndex( shape, 'row-major', [ 2 ], -10, [ 0 ] );\n* // returns null\n*\n* @example\n* var shape = [ 12 ];\n* var idx = nextCartesianIndex( shape, 'column-major', [ 2 ], 10, [ 0 ] );\n* // returns null\n*/\nfunction nextCartesianIndex( shape, order, idx, dim, out ) {\n\tvar ndims = shape.length;\n\tif ( ndims === 0 ) {\n\t\treturn null;\n\t}\n\tif ( dim < 0 ) {\n\t\tdim += ndims;\n\t\tif ( dim < 0 ) {\n\t\t\t// Out-of-bounds:\n\t\t\treturn null;\n\t\t}\n\t} else if ( dim >= ndims ) {\n\t\t// Out-of-bounds:\n\t\treturn null;\n\t}\n\tif ( order === ROW_MAJOR ) {\n\t\treturn rowmajor( ndims, shape, idx, dim, out );\n\t}\n\t// order === 'column-major'\n\treturn columnmajor( ndims, shape, idx, dim, out );\n}\n\n\n// EXPORTS //\n\nexport default nextCartesianIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport zeros from '@stdlib/array/base/zeros';\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns the next Cartesian index (i.e., set of subscripts/dimension indices).\n*\n* ## Notes\n*\n* -   The function does not check whether the current index is the \"last\" index. Instead, if the function is provided dimension indices corresponding to the last element, the function will cycle back to the \"first\" index.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - index iteration order\n* @param {NonNegativeIntegerArray} idx - current dimension indices\n* @param {integer} dim - index of the dimension from which to start incrementing (inclusive)\n* @returns {(NonNegativeIntegerArray|null)} updated dimension indices\n*\n* @example\n* var shape = [ 12 ];\n* var idx = nextCartesianIndex( shape, 'row-major', [ 2 ], 0 );\n* // returns [ 3 ]\n*\n* @example\n* var shape = [ 2, 2, 2 ];\n*\n* var idx = nextCartesianIndex( shape, 'row-major', [ 0, 0, 1 ], -1 );\n* // returns [ 0, 1, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 0, 1, 1 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 1, 0, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 1, 0, 1 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 1, 1, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 1, 1, 1 ]\n*\n* @example\n* var shape = [];\n* var idx = nextCartesianIndex( shape, 'row-major', [], 0 );\n* // returns null\n*\n* @example\n* var shape = [ 12 ];\n* var idx = nextCartesianIndex( shape, 'row-major', [ 2 ], -10 );\n* // returns null\n*\n* @example\n* var shape = [ 12 ];\n* var idx = nextCartesianIndex( shape, 'column-major', [ 2 ], 10 );\n* // returns null\n*/\nfunction nextCartesianIndex( shape, order, idx, dim ) {\n\treturn assign( shape, order, idx, dim, zeros( shape.length ) );\n}\n\n\n// EXPORTS //\n\nexport default nextCartesianIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array/base/zero-to';\nimport copy from '@stdlib/array/base/copy-indexed';\nimport take from '@stdlib/array/base/take-indexed';\nimport sort2ins from './sort2ins.js';\n\n\n// MAIN //\n\n/**\n* Reorders ndarray dimensions and associated strides for loop interchange.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **sh**: dimensions sorted in loop order.\n*     -   **sx**: ndarray strides sorted in loop order.\n*\n* @param {NonNegativeIntegerArray} sh - array dimensions\n* @param {IntegerArray} sx - array stride lengths\n* @returns {Object} loop interchange data\n*\n* @example\n* var sh = [ 2, 3, 4 ];\n*\n* var sx = [ 12, 4, 1 ]; // row-major\n*\n* var o = loopOrder( sh, sx );\n* // returns {...}\n*\n* var ssh = o.sh;\n* // returns [ 4, 3, 2 ]\n*\n* var ssx = o.sx;\n* // returns [ 1, 4, 12 ]\n*/\nfunction loopOrder( sh, sx ) {\n\tvar idx;\n\n\t// Initialize a loop interchange index array for generating a loop order permutation:\n\tidx = zeroTo( sh.length );\n\n\t// Sort the array strides in increasing order (of magnitude):\n\tsx = copy( sx );\n\tsort2ins( sx, idx );\n\n\t// Permute the shape based on the sorted array strides:\n\tsh = take( sh, idx );\n\n\treturn {\n\t\t'sh': sh,\n\t\t'sx': sx\n\t};\n}\n\n\n// EXPORTS //\n\nexport default loopOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Simultaneously sorts two arrays based on the sort order of the first array using insertion sort.\n*\n* ## Notes\n*\n* -   The first array is sorted in increasing order according to absolute value.\n* -   The algorithm has space complexity `O(1)` and worst case time complexity `O(N^2)`.\n* -   The algorithm is efficient for small arrays (typically `N <= 20``) and is particularly efficient for sorting arrays which are already substantially sorted.\n* -   The algorithm is **stable**, meaning that the algorithm does **not** change the order of array elements which are equal or equivalent.\n* -   The input arrays are sorted in-place (i.e., the input arrays are mutated).\n*\n* @private\n* @param {Array} x - first array\n* @param {Array} y - second array\n* @returns {void}\n*\n* @example\n* var x = [ -4, -2, 3, 1 ];\n* var y = [ 0, 1, 2, 3 ];\n*\n* sort2ins( x, y );\n*\n* console.log( x );\n* // => [ 1, -2, 3, -4 ]\n*\n* console.log( y );\n* // => [ 3, 1, 2, 0 ]\n*/\nfunction sort2ins( x, y ) {\n\tvar avx;\n\tvar aux;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tix = 1;\n\tiy = 1;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < x.length; i++ ) {\n\t\tvx = x[ ix ];\n\t\tavx = ( vx < 0 ) ? -vx : vx;\n\n\t\tvy = y[ iy ];\n\n\t\tjx = ix - 1;\n\t\tjy = iy - 1;\n\n\t\t// Shift all larger values to the left of the current element to the right...\n\t\twhile ( jx >= 0 ) {\n\t\t\tux = x[ jx ];\n\t\t\taux = ( ux < 0 ) ? -ux : ux;\n\t\t\tif ( aux <= avx ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[ jx+1 ] = ux;\n\t\t\ty[ jy+1 ] = y[ jy ];\n\t\t\tjx -= 1;\n\t\t\tjy -= 1;\n\t\t}\n\t\tx[ jx+1 ] = vx;\n\t\ty[ jy+1 ] = vy;\n\t\tix += 1;\n\t\tiy += 1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the next Cartesian index (i.e., set of subscripts/dimension indices).\n*\n* @module @stdlib/ndarray/base/next-cartesian-index\n*\n* @example\n* import nextCartesianIndex from '@stdlib/ndarray/base/next-cartesian-index';\n*\n* var shape = [ 2, 2, 2 ];\n*\n* var idx = nextCartesianIndex( shape, 'row-major', [ 0, 0, 1 ], -1 );\n* // returns [ 0, 1, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 0, 1, 1 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 1, 0, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 1, 0, 1 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 1, 1, 0 ]\n*\n* idx = nextCartesianIndex( shape, 'row-major', idx, -1 );\n* // returns [ 1, 1, 1 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar defaults = {\n\t// Define a default block size (in bytes):\n\t'BLOCK_SIZE_IN_BYTES': 64|0, // 64b is a common cache line size. How applicable the common cache line size is here is debatable, given that, depending on the associated stride(s), the innermost loop may not iterate over adjacent elements. The primary goal is to have a block size in which all data within a block can always fit in (L1) cache, regardless of cache size (i.e., cache-oblivious). For reference, a common L1 cache size is 32kB per core. For best performance, block sizes should be tuned based on system hardware; however, such tuning is not readily available to us here. Without obvious better alternatives, 64b has some theoretical (and practical) underpinning, and it should be good enough for most inputs, especially for ndarrays with near contiguity.\n\n\t// Define a default block size (in elements):\n\t'BLOCK_SIZE_IN_ELEMENTS': 8|0 // 64 bytes / 8 bytes per element (i.e., default element size is same as a double)\n};\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bytesPerElement from './../../../base/bytes-per-element';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns a loop block size for multi-dimensional array tiled loops.\n*\n* @param {string} dtypeX - array data type\n* @returns {integer} block size (in units of elements)\n*\n* @example\n* var bsize = nullaryBlockSize( 'float64' );\n* // returns <number>\n*/\nfunction nullaryBlockSize( dtypeX ) {\n\tvar nbx = bytesPerElement( dtypeX );\n\tif ( nbx === null ) { // e.g., \"generic\" arrays\n\t\treturn defaults.BLOCK_SIZE_IN_ELEMENTS;\n\t}\n\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nbx )|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default nullaryBlockSize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from './../../../base/iteration-order';\nimport minmaxViewBufferIndex from './../../../base/minmax-view-buffer-index';\nimport ndarray2object from './../../../base/ndarraylike2object';\nimport blockedaccessornullary2d from './2d_blocked_accessors.js';\nimport blockedaccessornullary3d from './3d_blocked_accessors.js';\nimport blockedaccessornullary4d from './4d_blocked_accessors.js';\nimport blockedaccessornullary5d from './5d_blocked_accessors.js';\nimport blockedaccessornullary6d from './6d_blocked_accessors.js';\nimport blockedaccessornullary7d from './7d_blocked_accessors.js';\nimport blockedaccessornullary8d from './8d_blocked_accessors.js';\nimport blockedaccessornullary9d from './9d_blocked_accessors.js';\nimport blockedaccessornullary10d from './10d_blocked_accessors.js';\nimport blockednullary2d from './2d_blocked.js';\nimport blockednullary3d from './3d_blocked.js';\nimport blockednullary4d from './4d_blocked.js';\nimport blockednullary5d from './5d_blocked.js';\nimport blockednullary6d from './6d_blocked.js';\nimport blockednullary7d from './7d_blocked.js';\nimport blockednullary8d from './8d_blocked.js';\nimport blockednullary9d from './9d_blocked.js';\nimport blockednullary10d from './10d_blocked.js';\nimport accessornullary0d from './0d_accessors.js';\nimport accessornullary1d from './1d_accessors.js';\nimport accessornullary2d from './2d_accessors.js';\nimport accessornullary3d from './3d_accessors.js';\nimport accessornullary4d from './4d_accessors.js';\nimport accessornullary5d from './5d_accessors.js';\nimport accessornullary6d from './6d_accessors.js';\nimport accessornullary7d from './7d_accessors.js';\nimport accessornullary8d from './8d_accessors.js';\nimport accessornullary9d from './9d_accessors.js';\nimport accessornullary10d from './10d_accessors.js';\nimport accessornullarynd from './nd_accessors.js';\nimport nullary0d from './0d.js';\nimport nullary1d from './1d.js';\nimport nullary2d from './2d.js';\nimport nullary3d from './3d.js';\nimport nullary4d from './4d.js';\nimport nullary5d from './5d.js';\nimport nullary6d from './6d.js';\nimport nullary7d from './7d.js';\nimport nullary8d from './8d.js';\nimport nullary9d from './9d.js';\nimport nullary10d from './10d.js';\nimport nullarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar NULLARY = [\n\tnullary0d,\n\tnullary1d,\n\tnullary2d,\n\tnullary3d,\n\tnullary4d,\n\tnullary5d,\n\tnullary6d,\n\tnullary7d,\n\tnullary8d,\n\tnullary9d,\n\tnullary10d\n];\nvar ACCESSOR_NULLARY = [\n\taccessornullary0d,\n\taccessornullary1d,\n\taccessornullary2d,\n\taccessornullary3d,\n\taccessornullary4d,\n\taccessornullary5d,\n\taccessornullary6d,\n\taccessornullary7d,\n\taccessornullary8d,\n\taccessornullary9d,\n\taccessornullary10d\n];\nvar BLOCKED_NULLARY = [\n\tblockednullary2d, // 0\n\tblockednullary3d,\n\tblockednullary4d,\n\tblockednullary5d,\n\tblockednullary6d,\n\tblockednullary7d,\n\tblockednullary8d,\n\tblockednullary9d,\n\tblockednullary10d // 8\n];\nvar BLOCKED_ACCESSOR_NULLARY = [\n\tblockedaccessornullary2d, // 0\n\tblockedaccessornullary3d,\n\tblockedaccessornullary4d,\n\tblockedaccessornullary5d,\n\tblockedaccessornullary6d,\n\tblockedaccessornullary7d,\n\tblockedaccessornullary8d,\n\tblockedaccessornullary9d,\n\tblockedaccessornullary10d // 8\n];\nvar MAX_DIMS = NULLARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Applies a nullary function and assigns results to elements in an output ndarray.\n*\n* ## Notes\n*\n* -   A provided ndarray should be an `object` with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing one output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the ioutput ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary( [ x ], fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary( arrays, fcn ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar shx;\n\tvar iox;\n\tvar len;\n\tvar sx;\n\tvar ox;\n\tvar ns;\n\tvar x;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarray and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn ACCESSOR_NULLARY[ ndims ]( x, fcn );\n\t\t}\n\t\treturn NULLARY[ ndims ]( x, fcn );\n\t}\n\t// Compute the number of elements and the number of singleton dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided an empty ndarray...\n\tif ( len === 0 ) {\n\t\treturn;\n\t}\n\t// Determine whether the ndarray is one-dimensional and thus readily translates to a one-dimensional strided array...\n\tif ( ndims === 1 ) {\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn ACCESSOR_NULLARY[ ndims ]( x, fcn );\n\t\t}\n\t\treturn NULLARY[ ndims ]( x, fcn );\n\t}\n\tsx = x.strides;\n\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat an ndarray as being equivalent to a one-dimensional strided array...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\tx.strides = [ sx[i] ];\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn ACCESSOR_NULLARY[ 1 ]( x, fcn );\n\t\t}\n\t\treturn NULLARY[ 1 ]( x, fcn );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array view:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarray as a linear one-dimensional strided array...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) ) {\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\tx.strides = [ iox ];\n\t\t\tx.offset = ox;\n\t\t\tif ( x.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_NULLARY[ 1 ]( x, fcn );\n\t\t\t}\n\t\t\treturn NULLARY[ 1 ]( x, fcn );\n\t\t}\n\t\t// The ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( x.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_NULLARY[ ndims ]( x, fcn );\n\t\t\t}\n\t\t\treturn NULLARY[ ndims ]( x, fcn );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with a non-contiguous n-dimensional array or a high dimensional n-dimensional array, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( x.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_NULLARY[ ndims-2 ]( x, fcn );\n\t\t}\n\t\treturn BLOCKED_NULLARY[ ndims-2 ]( x, fcn );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( x.accessorProtocol ) {\n\t\treturn accessornullarynd( x, fcn );\n\t}\n\tnullarynd( x, fcn );\n}\n\n\n// EXPORTS //\n\nexport default nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary function and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 2 );\n*\n* // Define the shape of the output array:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary0d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0 ]\n*/\nfunction nullary0d( x, fcn ) {\n\tx.data[ x.offset ] = fcn();\n}\n\n\n// EXPORTS //\n\nexport default nullary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary function and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary1d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 0.0, 10.0, 0.0, 10.0, 0.0, 10.0 ]\n*/\nfunction nullary1d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar S0;\n\tvar ix;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments:\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\txbuf[ ix ] = fcn();\n\t\tix += dx0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary2d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary2d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\txbuf[ ix ] = fcn();\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary3d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary3d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\tix += dx0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t}\n\t\tix += dx2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary4d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary4d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t}\n\t\tix += dx3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary5d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary5d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t}\n\t\tix += dx4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary6d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary6d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t}\n\t\tix += dx5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary7d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary7d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t}\n\t\tix += dx6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary8d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary8d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t}\n\t\tix += dx7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary9d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary9d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t}\n\t\tix += dx8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullary10d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullary10d( x, fcn ) {\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t}\n\t\tix += dx9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary function and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 4 );\n*\n* // Define the shape of the output array:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary0d( x, fcn );\n*\n* var v = x.data.get( 1 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary0d( x, fcn ) {\n\tx.accessors[ 1 ]( x.data, x.offset, fcn() );\n}\n\n\n// EXPORTS //\n\nexport default nullary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary1d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary1d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar S0;\n\tvar ix;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tset( xbuf, ix, fcn() );\n\t\tix += dx0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary2d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary2d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tset( xbuf, ix, fcn() );\n\t\t\tix += dx0;\n\t\t}\n\t\tix += dx1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary3d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary3d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\tix += dx0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t}\n\t\tix += dx2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary4d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary4d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t}\n\t\tix += dx3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary5d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary5d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t}\n\t\tix += dx4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary6d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary6d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t}\n\t\tix += dx5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import real from '@stdlib/complex/real';\n* import imag from '@stdlib/complex/imag';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary7d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns -10.0\n*/\nfunction nullary7d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t}\n\t\tix += dx6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary8d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary8d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t}\n\t\tix += dx7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary9d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary9d( x, fcn ) {\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t}\n\t\tix += dx8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullary10d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullary10d( x, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t}\n\t// Set a pointer to the first indexed element:\n\tix = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t}\n\t\tix += dx9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary2d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary2d( x, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar ox1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t// Compute the loop offset increment:\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary3d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary3d( x, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar ox1;\n\tvar ox2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t// Compute the loop offset increment:\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary4d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary4d( x, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary5d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary5d( x, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary6d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary6d( x, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary7d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary7d( x, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary8d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary8d( x, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary9d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary9d( x, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 12 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* blockednullary10d( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction blockednullary10d( x, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\txbuf[ ix ] = fcn();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary2d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction blockednullary2d( x, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar ox1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t// Compute the loop offset increment:\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\tix += dx0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary3d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction blockednullary3d( x, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar ox1;\n\tvar ox2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t// Compute the loop offset increment:\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary4d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction blockednullary4d( x, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary5d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction blockednullary5d( x, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary6d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction blockednullary6d( x, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import real from '@stdlib/complex/real';\n* import imag from '@stdlib/complex/imag';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary7d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns -10.0\n*/\nfunction blockednullary7d( x, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary8d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction blockednullary8d( x, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary9d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction blockednullary9d( x, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/nullary-loop-interchange-order';\nimport blockSize from './../../../base/nullary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - nullary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* blockednullary10d( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction blockednullary10d( x, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype );\n\n\t// Set a pointer to the first indexed element:\n\tox = x.offset;\n\n\t// Cache a reference to the output ndarray buffer:\n\txbuf = x.data;\n\n\t// Cache the offset increment for the innermost loop:\n\tdx0 = sx[0];\n\n\t// Cache accessor:\n\tset = x.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute the index offset for the first output ndarray element in the current block:\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute the loop offset increment:\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( xbuf, ix, fcn() );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockednullary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport POLICIES from './policies.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of output ndarray data type policies.\n*\n* @returns {StringArray} list of ndarray data type policies\n*\n* @example\n* var list = policies();\n* // returns [...]\n*/\nfunction policies() {\n\treturn POLICIES.slice();\n}\n\n\n// EXPORTS //\n\nexport default policies;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported data type policy strings to enumeration constants.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `SAME == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects.\n*\n* @private\n* @returns {Object} object mapping supported dtype policies to enumeration constants\n*\n* @example\n* var table = enumeration();\n* // returns <Object>\n*/\nfunction enumeration() {\n\t// NOTE: the following should match the C `output_dtype_policies.h` enumeration!!!!\n\treturn {\n\t\t'same': 0,\n\t\t'promoted': 1,\n\t\t'bool': 2,\n\t\t'signed_integer': 3,\n\t\t'unsigned_integer': 4,\n\t\t'integer': 5,\n\t\t'floating_point': 6,\n\t\t'real_floating_point': 7,\n\t\t'complex_floating_point': 8,\n\t\t'real': 9,\n\t\t'numeric': 10,\n\t\t'default': 11\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumeration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of output ndarray data type policies.\n*\n* @module @stdlib/ndarray/output-dtype-policies\n*\n* @example\n* import policies from '@stdlib/ndarray/output-dtype-policies';\n*\n* var list = policies();\n* // returns [...]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\nassign( main, enumeration() );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\nimport objectKeys from '@stdlib/utils/keys';\n\n\n// MAIN //\n\n/**\n* Copies all enumerable own properties from a source object to a target object as enumerable read-only properties.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @returns {Object} modified target object\n*\n* @example\n* var source = {\n*     'beep': 'boop'\n* };\n* var target = {};\n*\n* var out = assign( target, source );\n* // returns <Object>\n*\n* var bool = ( out === target );\n* // returns true\n*\n* var v = target.beep;\n* // returns 'boop'\n*/\nfunction assign( target, source ) {\n\tvar keys;\n\tvar k;\n\tvar i;\n\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tsetReadOnly( target, k, source[ k ] );\n\t}\n\treturn target;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils/object-inverse';\nimport { enum as enumeration } from './../../../output-dtype-policies';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the policy string associated with an output ndarray data type policy enumeration constant.\n*\n* @param {integer} policy - policy enumeration constant\n* @returns {(string|null)} policy string or null\n*\n* @example\n* import str2enum from '@stdlib/ndarray/base/output-policy-str2enum';\n*\n* var v = str2enum( 'same' );\n* // returns <number>\n*\n* var policy = enum2str( v );\n* // returns 'same'\n*/\nfunction enum2str( policy ) {\n\tvar v = hash[ policy ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from './../../../output-dtype-policies';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with an output ndarray data type policy string.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `SAME == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} policy - policy string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'same' );\n* // returns <number>\n*/\nfunction str2enum( policy ) {\n\tvar v = ENUM[ policy ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert/is-little-endian';\nimport ArrayBuffer from '@stdlib/array/buffer';\nimport DataView from '@stdlib/array/dataview';\nimport BigInt from '@stdlib/bigint/ctor';\nimport bytesPerElement from './../../../base/bytes-per-element';\nimport { enum as dtypes } from './../../../dtypes';\nimport { enum as orders } from './../../../orders';\nimport { enum as modes } from './../../../index-modes';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOffset from './../../../base/offset';\nimport getOrder from './../../../base/order';\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\nvar ORDERS = orders();\nvar MODES = modes();\n\n\n// MAIN //\n\n/**\n* Serializes ndarray meta data.\n*\n* ## Notes\n*\n* -   This function takes into account ndarray-like objects which may support index modes.\n*\n* -   Serialization is performed according to host byte order (endianness).\n*\n* -   Meta data format:\n*\n*     ```text\n*     | endianness (1 byte) | <dtype> (2 bytes) | <ndims> (8 bytes) | <shape> (ndims*8 bytes) | <strides> (ndims*8 bytes) | <offset> (8 bytes) | <order> (1 byte) | <mode> (1 byte) | <nsubmodes> (8 bytes) | <submodes> (nsubmodes*1 bytes) | <flags> (4 bytes) |\n*     ```\n*\n*     which translates to the following `ArrayBuffer` layout:\n*\n*     ```text\n*     ArrayBuffer[\n*         <endianness>[int8],\n*         <dtype>[int16],\n*         <ndims>[int64],\n*         <shape>[ndims*int64],\n*         <strides>[ndims*int64],\n*         <offset>[int64],\n*         <order>[int8],\n*         <mode>[int8],\n*         <nsubmodes>[int64],\n*         <submodes>[nsubmodes*int8],\n*         <flags>[int32]\n*     ]\n*     ```\n*\n*     where `strides` and `offset` are in units of bytes.\n*\n* -   If the endianness is `1`, the byte order is little endian. If the endianness is `0`, the byte order is big endian.\n*\n* -   Buffer length:\n*\n*     ```text\n*     1 + 2 + 8 + (ndims*8) + (ndims*8) + 8 + 1 + 1 + 8 + (nsubmodes*1) + 4 = 33 + (ndims*16) + nsubmodes\n*     ```\n*\n*     For example, consider a three-dimensional ndarray with one subscript index mode (submode):\n*\n*     ```text\n*     33 + (3*16) + 1 = 82 bytes\n*     ```\n*\n* -   Views:\n*\n*     -   endianness: `Int8Array( buf, 0, 1 )`\n*     -   dtype: `Int16Array( buf, 1, 1 )`\n*     -   ndims: `Int64Array( buf, 3, 1 )`\n*     -   shape: `Int64Array( buf, 11, ndims )`\n*     -   strides: `Int64Array( buf, 11+(ndims*8), ndims )`\n*     -   offset: `Int64Array( buf, 11+(ndims*16), 1 )`\n*     -   order: `Int8Array( buf, 19+(ndims*16), 1 )`\n*     -   mode: `Int8Array( buf, 20+(ndims*16), 1 )`\n*     -   nsubmodes: `Int64Array( buf, 21+(ndims*16), 1 )`\n*     -   submodes: `Int8Array( buf, 29+(ndims*16), nsubmodes )`\n*     -   flags: `Int32Array( buf, 29+(ndims*16)+nsubmodes, 1 )`\n*\n* @param {ndarrayLike} x - input array\n* @param {string} x.dtype - array data type\n* @param {NonNegativeIntegerArray} x.shape - array shape\n* @param {IntegerArray} x.strides - array strides\n* @param {NonNegativeInteger} x.offset - array index offset\n* @param {string} x.order - array order\n* @param {string} [x.mode='throw'] - array index mode\n* @param {StringArray} [x.submode=[x.mode]] - array subscript index modes\n* @param {Object} [x.flags={}] - array flags\n* @returns {DataView} serialized meta data\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n*\n* var dv = serialize( x );\n* // returns <DataView>\n*/\nfunction serialize( x ) {\n\tvar nbytes;\n\tvar flgs;\n\tvar len;\n\tvar dt;\n\tvar sh;\n\tvar st;\n\tvar sm;\n\tvar v;\n\tvar m;\n\tvar o;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar i;\n\n\t// Check for interface which does the work of serializing to a DataView for us...\n\tif ( x.__array_meta_dataview__ ) { // eslint-disable-line no-underscore-dangle\n\t\treturn x.__array_meta_dataview__(); // eslint-disable-line no-underscore-dangle\n\t}\n\t// Extract meta data known to be attached to ndarray-like objects:\n\tdt = getDType( x );\n\tsh = getShape( x, false );\n\tst = getStrides( x, false );\n\tN = sh.length; // ndims\n\n\t// Extract meta data which may be available on ndarray-like objects (e.g., stdlib ndarray instances):\n\tm = x.mode || 'throw';\n\tsm = x.submode || [ m ];\n\tM = sm.length;\n\n\t// Determine number of bytes per element according to the ndarray dtype:\n\tnbytes = bytesPerElement( dt );\n\n\t// Compute the amount of memory we need to allocate for storing meta data:\n\tlen = 33 + (N*16) + M;\n\n\t// Allocate raw memory and create a view for interfacing with the allocated memory:\n\tv = new DataView( new ArrayBuffer( len ) );\n\n\t// Endianness: (byteoffset: 0; bytelength: 1)\n\to = 0;\n\tv.setInt8( o, ( IS_LITTLE_ENDIAN ) ? 1 : 0 );\n\n\t// Data type: (byteoffset: 1; bytelength: 2)\n\to += 1;\n\tv.setInt16( o, DTYPES[ dt ], IS_LITTLE_ENDIAN );\n\n\t// Number of dimensions: (byteoffset: 3; bytelength: 8)\n\to += 2;\n\tv.setBigInt64( o, BigInt( N ), IS_LITTLE_ENDIAN );\n\n\t// Shape and strides: (byteoffset: 11 and 11+(ndims*8), respectively; bytelength: ndims*8 for both shape and strides, and, thus, ndims*16 total)\n\ts = N * 8; // stride length between a dimension (shape[i]) and its associated stride\n\to += 8;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv.setBigInt64( o, BigInt( sh[i] ), IS_LITTLE_ENDIAN );\n\t\tv.setBigInt64( o+s, BigInt( st[i]*nbytes ), IS_LITTLE_ENDIAN );\n\t\to += 8;\n\t}\n\t// Offset: (byteoffset: 11+(ndims*16); bytelength: 8)\n\to += s;\n\tv.setBigInt64( o, BigInt( getOffset( x )*nbytes ), IS_LITTLE_ENDIAN );\n\n\t// Order: (byteoffset: 19+(ndims*16); bytelength: 1)\n\to += 8;\n\tv.setInt8( o, ORDERS[ getOrder( x ) ] );\n\n\t// Index mode: (byteoffset: 20+(ndims*16); bytelength: 1)\n\to += 1;\n\tv.setInt8( o, MODES[ m ] );\n\n\t// Number of index submodes: (byteoffset: 21+(ndims*16); bytelength: 8)\n\to += 1;\n\tv.setBigInt64( o, BigInt( M ), IS_LITTLE_ENDIAN );\n\n\t// Submodes: (byteoffset: 29+(ndims*16); bytelength: nsubmodes*1)\n\to += 8;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tv.setInt8( o, MODES[ sm[i] ] );\n\t\to += 1;\n\t}\n\t// Flags: (byteoffset: 29+(ndims*16)+nsubmodes; bytelength: 4)\n\tflgs = 0|0;\n\tif ( x.flags ) {\n\t\tflgs |= ( x.flags.READONLY ) ? 4 : 0; // 00000000 00000000 00000000 00000100\n\t}\n\tv.setInt32( o, flgs, IS_LITTLE_ENDIAN );\n\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default serialize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert/is-little-endian';\nimport { assign as float64ToInt64Bytes } from '@stdlib/number/float64/base/to-int64-bytes';\nimport ArrayBuffer from '@stdlib/array/buffer';\nimport Uint8Array from '@stdlib/array/uint8';\nimport DataView from '@stdlib/array/dataview';\nimport bytesPerElement from './../../../base/bytes-per-element';\nimport { enum as dtypes } from './../../../dtypes';\nimport { enum as orders } from './../../../orders';\nimport { enum as modes } from './../../../index-modes';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOffset from './../../../base/offset';\nimport getOrder from './../../../base/order';\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\nvar ORDERS = orders();\nvar MODES = modes();\n\n\n// MAIN //\n\n/**\n* Serializes ndarray meta data.\n*\n* ## Notes\n*\n* -   This function takes into account ndarray-like objects which may support index modes.\n*\n* -   Serialization is performed according to host byte order (endianness).\n*\n* -   Meta data format:\n*\n*     ```text\n*     | endianness (1 byte) | <dtype> (2 bytes) | <ndims> (8 bytes) | <shape> (ndims*8 bytes) | <strides> (ndims*8 bytes) | <offset> (8 bytes) | <order> (1 byte) | <mode> (1 byte) | <nsubmodes> (8 bytes) | <submodes> (nsubmodes*1 bytes) | <flags> (4 bytes) |\n*     ```\n*\n*     which translates to the following `ArrayBuffer` layout:\n*\n*     ```text\n*     ArrayBuffer[\n*         <endianness>[int8],\n*         <dtype>[int16],\n*         <ndims>[int64],\n*         <shape>[ndims*int64],\n*         <strides>[ndims*int64],\n*         <offset>[int64],\n*         <order>[int8],\n*         <mode>[int8],\n*         <nsubmodes>[int64],\n*         <submodes>[nsubmodes*int8],\n*         <flags>[int32]\n*     ]\n*     ```\n*\n*     where `strides` and `offset` are in units of bytes.\n*\n* -   If the endianness is `1`, the byte order is little endian. If the endianness is `0`, the byte order is big endian.\n*\n* -   Buffer length:\n*\n*     ```text\n*     1 + 2 + 8 + (ndims*8) + (ndims*8) + 8 + 1 + 1 + 8 + (nsubmodes*1) = 33 + (ndims*16) + nsubmodes\n*     ```\n*\n*     For example, consider a three-dimensional ndarray with one subscript index mode (submode):\n*\n*     ```text\n*     33 + (3*16) + 1 = 82 bytes\n*     ```\n*\n* -   Views:\n*\n*     -   endianness: `Int8Array( buf, 0, 1 )`\n*     -   dtype: `Int16Array( buf, 1, 1 )`\n*     -   ndims: `Int64Array( buf, 3, 1 )`\n*     -   shape: `Int64Array( buf, 11, ndims )`\n*     -   strides: `Int64Array( buf, 11+(ndims*8), ndims )`\n*     -   offset: `Int64Array( buf, 11+(ndims*16), 1 )`\n*     -   order: `Int8Array( buf, 19+(ndims*16), 1 )`\n*     -   mode: `Int8Array( buf, 20+(ndims*16), 1 )`\n*     -   nsubmodes: `Int64Array( buf, 21+(ndims*16), 1 )`\n*     -   submodes: `Int8Array( buf, 29+(ndims*16), nsubmodes )`\n*     -   flags: `Int32Array( buf, 29+(ndims*16)+nsubmodes, 1 )`\n*\n* @private\n* @param {ndarrayLike} x - input array\n* @param {string} x.dtype - array data type\n* @param {NonNegativeIntegerArray} x.shape - array shape\n* @param {IntegerArray} x.strides - array strides\n* @param {NonNegativeInteger} x.offset - array index offset\n* @param {string} x.order - array order\n* @param {string} [x.mode='throw'] - array index mode\n* @param {StringArray} [x.submode=[x.mode]] - array subscript index modes\n* @param {Object} [x.flags={}] - array flags\n* @returns {DataView} serialized meta data\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n*\n* var dv = serialize( x );\n* // returns <DataView>\n*/\nfunction serialize( x ) {\n\tvar nbytes;\n\tvar bytes;\n\tvar flgs;\n\tvar len;\n\tvar dt;\n\tvar sh;\n\tvar st;\n\tvar sm;\n\tvar v;\n\tvar m;\n\tvar o;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar i;\n\n\t// Check for interface which does the work of serializing to a DataView for us...\n\tif ( x.__array_meta_dataview__ ) { // eslint-disable-line no-underscore-dangle\n\t\treturn x.__array_meta_dataview__(); // eslint-disable-line no-underscore-dangle\n\t}\n\t// Extract meta data known to be attached to ndarray-like objects:\n\tdt = getDType( x);\n\tsh = getShape( x, false );\n\tst = getStrides( x, false );\n\tN = sh.length; // ndims\n\n\t// Extract meta data which may be available on ndarray-like objects (e.g., stdlib ndarray instances):\n\tm = x.mode || 'throw';\n\tsm = x.submode || [ m ];\n\tM = sm.length;\n\n\t// Determine number of bytes per element according to the ndarray dtype:\n\tnbytes = bytesPerElement( dt );\n\n\t// Compute the amount of memory we need to allocate for storing meta data:\n\tlen = 33 + (N*16) + M;\n\n\t// Allocate raw memory and create a view for interfacing with the allocated memory:\n\tv = new DataView( new ArrayBuffer( len ) );\n\tbytes = new Uint8Array( v.buffer );\n\n\t// Endianness: (byteoffset: 0; bytelength: 1)\n\to = 0;\n\tv.setInt8( o, ( IS_LITTLE_ENDIAN ) ? 1 : 0 );\n\n\t// Data type: (byteoffset: 1; bytelength: 2)\n\to += 1;\n\tv.setInt16( o, DTYPES[ dt ], IS_LITTLE_ENDIAN );\n\n\t// Number of dimensions: (byteoffset: 3; bytelength: 8)\n\to += 2;\n\tfloat64ToInt64Bytes( N, bytes, 1, o );\n\n\t// Shape and strides: (byteoffset: 11 and 11+(ndims*8), respectively; bytelength: ndims*8 for both shape and strides, and, thus, ndims*16 total)\n\ts = N * 8; // stride length between a dimension (shape[i]) and its associated stride\n\to += 8;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tfloat64ToInt64Bytes( sh[i], bytes, 1, o );\n\t\tfloat64ToInt64Bytes( st[i]*nbytes, bytes, 1, o+s );\n\t\to += 8;\n\t}\n\t// Offset: (byteoffset: 11+(ndims*16); bytelength: 8)\n\to += s;\n\tfloat64ToInt64Bytes( getOffset( x )*nbytes, bytes, 1, o );\n\n\t// Order: (byteoffset: 19+(ndims*16); bytelength: 1)\n\to += 8;\n\tv.setInt8( o, ORDERS[ getOrder( x ) ] );\n\n\t// Index mode: (byteoffset: 20+(ndims*16); bytelength: 1)\n\to += 1;\n\tv.setInt8( o, MODES[ m ] );\n\n\t// Number of index submodes: (byteoffset: 21+(ndims*16); bytelength: 8)\n\to += 1;\n\tfloat64ToInt64Bytes( M, bytes, 1, o );\n\n\t// Submodes: (byteoffset: 29+(ndims*16); bytelength: nsubmodes*1)\n\to += 8;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tv.setInt8( o, MODES[ sm[i] ] );\n\t\to += 1;\n\t}\n\t// Flags: (byteoffset: 29+(ndims*16)+nsubmodes; bytelength: 4)\n\tflgs = 0|0;\n\tif ( x.flags ) {\n\t\tflgs |= ( x.flags.READONLY ) ? 4 : 0; // 00000000 00000000 00000000 00000100\n\t}\n\tv.setInt32( o, flgs, IS_LITTLE_ENDIAN );\n\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default serialize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serialize ndarray meta data.\n*\n* @module @stdlib/ndarray/base/serialize-meta-data\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n* import serialize from '@stdlib/ndarray/base/serialize-meta-data';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n*\n* var dv = serialize( x );\n* // returns <DataView>\n*/\n\n// MODULES //\n\nimport hasBigIntSupport from '@stdlib/assert/has-bigint-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( hasBigIntSupport() ) {\n\tmain = builtin;\n} else {\n\tmain = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isMostlySafeCast from './../../../base/assert/is-mostly-safe-data-type-cast';\nimport broadcast from './../../../base/broadcast-array';\nimport assign from './../../../base/assign';\nimport slice from './../../../base/slice';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Assigns element values from a broadcasted input ndarray to corresponding elements in an output ndarray view.\n*\n* @param {ndarray} x - input array\n* @param {ndarray} y - output array\n* @param {MultiSlice} s - multi-slice object for the output array\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} input array must be broadcast compatible with an output array view\n* @throws {TypeError} input array cannot be safely cast to the output array data type\n* @returns {ndarray} output array\n*\n* @example\n* import Slice from '@stdlib/slice/ctor';\n* import MultiSlice from '@stdlib/slice/multi';\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndzeros from '@stdlib/ndarray/zeros';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* // Define an input array:\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* // Define an output array:\n* var y = ndzeros( [ 2, 3, 2 ], {\n*     'dtype': x.dtype\n* });\n*\n* // Create a slice:\n* var s0 = null;\n* var s1 = new Slice( null, null, -1 );\n* var s2 = new Slice( null, null, -1 );\n* var s = new MultiSlice( s0, s1, s2 );\n* // returns <MultiSlice>\n*\n* // Perform assignment:\n* var out = sliceAssign( x, y, s, false );\n* // returns <ndarray>\n*\n* var bool = ( out === y );\n* // returns true\n*\n* arr = ndarray2array( y );\n* // returns [ [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ], [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ] ]\n*/\nfunction sliceAssign( x, y, s, strict ) {\n\tvar view;\n\tvar xdt;\n\tvar ydt;\n\n\txdt = getDType( x );\n\tydt = getDType( y );\n\n\t// Safe casts are always allowed and allow same kind casts (i.e., downcasts) only when the output data type is floating-point...\n\tif ( !isMostlySafeCast( xdt, ydt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Input array values cannot be safely cast to the output array data type. Data types: [%s, %s].', xdt, ydt ) );\n\t}\n\t// Resolve a writable output array view:\n\tview = slice( y, s, strict, true );\n\n\t// Broadcast the input array:\n\tx = broadcast( x, getShape( view, true ) );\n\n\t// Set elements from `x` in `y`:\n\tassign( [ x, view ] );\n\n\t// Return the original output array:\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sliceAssign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport ndims from './../../../base/ndims';\nimport slice from './../../../base/slice';\nimport normalizeIndex from './../../../base/normalize-index';\nimport filled from '@stdlib/array/base/filled';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a view of an input ndarray when sliced along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {(Slice|integer)} s - slice object or an integer\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import Slice from '@stdlib/slice/ctor';\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new Slice( null, null, -1 );\n* // returns <Slice>\n*\n* var y = sliceDimension( x, 0, s, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 5.0, 6.0 ], [ 3.0, 4.0 ], [ 1.0, 2.0 ] ]\n*/\nfunction sliceDimension( x, dim, s, strict, writable ) {\n\tvar args;\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Define a list of MultiSlice constructor arguments:\n\targs = filled( null, N );\n\targs[ d ] = s;\n\n\t// Return a new array view:\n\treturn slice( x, args2multislice( args ), strict, writable );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimension;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport Slice from '@stdlib/slice/ctor';\nimport ndims from './../../../base/ndims';\nimport slice from './../../../base/slice';\nimport normalizeIndex from './../../../base/normalize-index';\nimport filled from '@stdlib/array/base/filled';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a shifted view of an input ndarray along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {integer} start - starting index (inclusive)\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceDimensionFrom( x, 0, 1, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*/\nfunction sliceDimensionFrom( x, dim, start, strict, writable ) {\n\tvar args;\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Define a list of slice arguments:\n\targs = filled( null, N );\n\targs[ d ] = new Slice( start, null );\n\n\t// Return a new array view:\n\treturn slice( x, args2multislice( args ), strict, writable );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimensionFrom;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport Slice from '@stdlib/slice/ctor';\nimport ndims from './../../../base/ndims';\nimport slice from './../../../base/slice';\nimport normalizeIndex from './../../../base/normalize-index';\nimport filled from '@stdlib/array/base/filled';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a truncated view of an input ndarray along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {integer} stop - ending index (exclusive)\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceDimensionTo( x, 0, 2, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction sliceDimensionTo( x, dim, stop, strict, writable ) {\n\tvar args;\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Define a list of slice arguments:\n\targs = filled( null, N );\n\targs[ d ] = new Slice( stop );\n\n\t// Return a new array view:\n\treturn slice( x, args2multislice( args ), strict, writable );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimensionTo;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport Slice from '@stdlib/slice/ctor';\nimport getShape from './../../../base/shape';\nimport slice from './../../../base/slice';\n\n\n// MAIN //\n\n/**\n* Returns a shifted view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Array<null|void|integer>} start - starting indices (inclusive)\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = [ 1, null ];\n* var y = sliceFrom( x, s, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*/\nfunction sliceFrom( x, start, strict, writable ) {\n\tvar args;\n\tvar sh;\n\tvar s;\n\tvar i;\n\n\tsh = getShape( x );\n\targs = [];\n\tfor ( i = 0; i < start.length; i++ ) {\n\t\ts = start[ i ];\n\t\tif ( isNumber( s ) && s !== 0 ) { // note: a start value equal to 0 is equivalent to `null` (i.e., including all elements along a dimension)\n\t\t\tif ( s === sh[ i ] ) {\n\t\t\t\t// When a starting index is one more than the last index along a dimension, create a slice for returning an empty array...\n\t\t\t\ts -= 1;\n\t\t\t\targs.push( new Slice( s, s ) );\n\t\t\t} else {\n\t\t\t\targs.push( new Slice( s, null ) );\n\t\t\t}\n\t\t} else {\n\t\t\targs.push( null );\n\t\t}\n\t}\n\treturn slice( x, args2multislice( args ), strict, writable );\n}\n\n\n// EXPORTS //\n\nexport default sliceFrom;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport Slice from '@stdlib/slice/ctor';\nimport slice from './../../../base/slice';\n\n\n// MAIN //\n\n/**\n* Returns a truncated view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Array<null|void|integer>} stop - ending indices (exclusive)\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = [ 2, null ];\n* var y = sliceTo( x, s, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction sliceTo( x, stop, strict, writable ) {\n\tvar args;\n\tvar i;\n\n\targs = [];\n\tfor ( i = 0; i < stop.length; i++ ) {\n\t\tif ( isNumber( stop[ i ] ) ) {\n\t\t\targs.push( new Slice( stop[ i ] ) );\n\t\t} else {\n\t\t\targs.push( null );\n\t\t}\n\t}\n\treturn slice( x, args2multislice( args ), strict, writable );\n}\n\n\n// EXPORTS //\n\nexport default sliceTo;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeIndex from './../../../base/normalize-index';\nimport ndims from './../../../base/ndims';\nimport getStrides from './../../../base/strides';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the stride along a specified dimension for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {integer} dim - dimension index\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {integer} stride\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var out = stride( zeros( [ 3, 3, 3 ] ), 0 );\n* // returns 9\n*/\nfunction stride( x, dim ) {\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Return the array stride:\n\treturn getStrides( x, false )[ d ];\n}\n\n\n// EXPORTS //\n\nexport default stride;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Converts subscripts to a linear index.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a subscript exceeds array dimensions.\n*     -   **normalize**: normalize negative subscripts and throw an error when a subscript exceeds array dimensions.\n*     -   **wrap**: wrap around subscripts exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set subscripts exceeding array dimensions to either `0` (minimum index) or the maximum index along a particular dimension.\n*\n* -   When provided fewer modes than dimensions, the function recycles modes using modulo arithmetic.\n*\n* -   When provided a stride array containing negative strides, if an `offset` is greater than `0`, the function treats subscripts as mapping to a linear index in an underlying data buffer for the array, thus returning a linear index from the perspective of that buffer. If an `offset` is equal to `0`, the function treats subscripts as mapping to a linear index in an array view, thus returning a linear index from the perspective of that view.\n*\n*     ```text\n*     Dims: 2x2\n*     Buffer: [ 1, 2, 3, 4 ]\n*\n*     View = [ a00, a01,\n*              a10, a11 ]\n*\n*     Strides: 2,1\n*     Offset: 0\n*\n*     View = [ 1, 2,\n*              3, 4 ]\n*\n*     Strides: 2,-1\n*     Offset: 1\n*\n*     View = [ 2, 1,\n*              4, 3 ]\n*\n*     Strides: -2,1\n*     Offset: 2\n*\n*     View = [ 3, 4,\n*              1, 2 ]\n*\n*     Strides: -2,-1\n*     Offset: 3\n*\n*     View = [ 4, 3,\n*              2, 1 ]\n*     ```\n*\n*     ```javascript\n*     var shape = [ 2, 2 ];\n*     var strides = [ -2, 1 ];\n*     var offset = 2;\n*     var mode = [ 'throw' ];\n*\n*     // From the perspective of a view...\n*     var idx = sub2ind( shape, strides, 0, 0, 0, mode );\n*     // returns 0\n*\n*     idx = sub2ind( shape, strides, 0, 0, 1, mode );\n*     // returns 1\n*\n*     idx = sub2ind( shape, strides, 0, 1, 0, mode );\n*     // returns 2\n*\n*     idx = sub2ind( shape, strides, 0, 1, 1, mode );\n*     // returns 3\n*\n*     // From the perspective of an underlying buffer...\n*     idx = sub2ind( shape, strides, offset, 0, 0, mode );\n*     // returns 2\n*\n*     idx = sub2ind( shape, strides, offset, 0, 1, mode );\n*     // returns 3\n*\n*     idx = sub2ind( shape, strides, offset, 1, 0, mode );\n*     // returns 0\n*\n*     idx = sub2ind( shape, strides, offset, 1, 1, mode );\n*     // returns 1\n*     ```\n*\n*     In short, from the perspective of a view, view data is always ordered.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - location of the first indexed value **based** on the stride array\n* @param {...integer} i - subscripts\n* @param {StringArray} mode - specifies how to handle subscripts which exceed array dimensions\n* @throws {RangeError} must provide subscripts which do not exceed array dimensions\n* @returns {NonNegativeInteger} linear index\n*\n* @example\n* var shape = [ 3, 3, 3 ];\n* var strides = [ 9, 3, 1 ];\n* var offset = 0;\n* var mode = [ 'throw' ]\n*\n* var idx = sub2ind( shape, strides, offset, 1, 2, 2, mode );\n* // returns [ 'throw' ]\n*/\nfunction sub2ind() {\n\tvar strides;\n\tvar offset;\n\tvar nmodes;\n\tvar shape;\n\tvar ndims;\n\tvar modes;\n\tvar mode;\n\tvar idx;\n\tvar m;\n\tvar s;\n\tvar j;\n\tvar i;\n\n\tshape = arguments[ 0 ];\n\tstrides = arguments[ 1 ];\n\toffset = arguments[ 2 ];\n\tndims = shape.length;\n\tmodes = arguments[ 3+ndims ]; // last argument\n\tnmodes = modes.length;\n\tidx = offset;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tm = shape[ i ];\n\t\tj = arguments[ i+3 ];\n\t\tmode = modes[ i%nmodes ];\n\t\tif ( mode === 'clamp' ) {\n\t\t\tif ( j < 0 ) {\n\t\t\t\tj = 0;\n\t\t\t} else if ( j >= m ) {\n\t\t\t\tj = m - 1;\n\t\t\t}\n\t\t} else if ( mode === 'wrap' ) {\n\t\t\tif ( j < 0 ) {\n\t\t\t\tj += m; // slight optimization to avoid modulo arithmetic when |j| <= m\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj %= m;\n\t\t\t\t\tif ( j !== 0 ) {\n\t\t\t\t\t\tj += m;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( j >= m ) {\n\t\t\t\tj -= m; // slight optimization to avoid modulo arithmetic when m < j <= 2m\n\t\t\t\tif ( j >= m ) {\n\t\t\t\t\tj %= m;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ( mode === 'normalize' && j < 0 ) {\n\t\t\t\tj += m;\n\t\t\t}\n\t\t\tif ( j < 0 || j >= m ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. Subscripts must not exceed array dimensions. Subscript: `%u`. Value: `%d`.', i, j ) );\n\t\t\t}\n\t\t}\n\t\ts = strides[ i ];\n\n\t\t// Check if array view...\n\t\tif ( s < 0 && offset === 0 ) {\n\t\t\tidx -= j * s; // increments idx\n\t\t} else {\n\t\t\tidx += j * s; // may increment or decrement idx\n\t\t}\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default sub2ind;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Recursively converts an ndarray to a generic array.\n*\n* @private\n* @param {Object} obj - array object\n* @param {(ArrayLikeObject|TypedArray|Buffer)} obj.data - data buffer\n* @param {Array<Function>} obj.accessors - element accessors\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {NonNegativeInteger} dim - dimension\n* @returns {(Array|Array<Array>)} output array\n*/\nfunction recurse( obj, shape, strides, offset, order, dim ) {\n\tvar stride;\n\tvar item;\n\tvar out;\n\tvar n;\n\tvar i;\n\n\tif ( dim >= shape.length ) {\n\t\treturn obj.accessors[ 0 ]( obj.data, offset );\n\t}\n\tout = [];\n\n\tn = shape[ dim ];\n\tstride = strides[ dim ];\n\n\tfor ( i = 0; i < n; i++ ) {\n\t\titem = recurse( obj, shape, strides, offset, order, dim+1 );\n\t\tout.push( item );\n\t\toffset += stride;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default recurse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array/base/arraylike2object';\nimport recurse from './recurse.js';\n\n\n// MAIN //\n\n/**\n* Converts an ndarray buffer to a generic array (which may include nested arrays).\n*\n* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(EmptyArray|Array|Array<Array>)} array (which may include nested arrays)\n*\n* @example\n* var buffer = [ 1, 2, 3, 4 ];\n* var shape = [ 2, 2 ];\n* var order = 'row-major';\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray2array( buffer, shape, strides, offset, order );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*/\nfunction ndarray2array( buffer, shape, strides, offset, order ) {\n\tvar i;\n\tif ( shape.length === 0 ) {\n\t\treturn [];\n\t}\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tif ( shape[ i ] === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t}\n\treturn recurse( arraylike2object( buffer ), shape, strides, offset, order, 0 ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ndarray2array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from './../../../base/iteration-order';\nimport minmaxViewBufferIndex from './../../../base/minmax-view-buffer-index';\nimport ndarray2object from './../../../base/ndarraylike2object';\nimport blockedaccessorunary2d from './2d_blocked_accessors.js';\nimport blockedaccessorunary3d from './3d_blocked_accessors.js';\nimport blockedaccessorunary4d from './4d_blocked_accessors.js';\nimport blockedaccessorunary5d from './5d_blocked_accessors.js';\nimport blockedaccessorunary6d from './6d_blocked_accessors.js';\nimport blockedaccessorunary7d from './7d_blocked_accessors.js';\nimport blockedaccessorunary8d from './8d_blocked_accessors.js';\nimport blockedaccessorunary9d from './9d_blocked_accessors.js';\nimport blockedaccessorunary10d from './10d_blocked_accessors.js';\nimport blockedunary2d from './2d_blocked.js';\nimport blockedunary3d from './3d_blocked.js';\nimport blockedunary4d from './4d_blocked.js';\nimport blockedunary5d from './5d_blocked.js';\nimport blockedunary6d from './6d_blocked.js';\nimport blockedunary7d from './7d_blocked.js';\nimport blockedunary8d from './8d_blocked.js';\nimport blockedunary9d from './9d_blocked.js';\nimport blockedunary10d from './10d_blocked.js';\nimport accessorunary0d from './0d_accessors.js';\nimport accessorunary1d from './1d_accessors.js';\nimport accessorunary2d from './2d_accessors.js';\nimport accessorunary3d from './3d_accessors.js';\nimport accessorunary4d from './4d_accessors.js';\nimport accessorunary5d from './5d_accessors.js';\nimport accessorunary6d from './6d_accessors.js';\nimport accessorunary7d from './7d_accessors.js';\nimport accessorunary8d from './8d_accessors.js';\nimport accessorunary9d from './9d_accessors.js';\nimport accessorunary10d from './10d_accessors.js';\nimport accessorunarynd from './nd_accessors.js';\nimport unary0d from './0d.js';\nimport unary1d from './1d.js';\nimport unary2d from './2d.js';\nimport unary3d from './3d.js';\nimport unary4d from './4d.js';\nimport unary5d from './5d.js';\nimport unary6d from './6d.js';\nimport unary7d from './7d.js';\nimport unary8d from './8d.js';\nimport unary9d from './9d.js';\nimport unary10d from './10d.js';\nimport unarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an input ndarray and assigns results to elements in an output ndarray.\n*\n* ## Notes\n*\n* -   Each provided ndarray should be an `object` with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing one input array and one output array\n* @param {Callback} fcn - unary callback\n* @throws {Error} arrays must have the same number of dimensions\n* @throws {Error} arrays must have the same shape\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary( [ x, y ], scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary( arrays, fcn ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar ymmv;\n\tvar shx;\n\tvar shy;\n\tvar iox;\n\tvar ioy;\n\tvar len;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ns;\n\tvar x;\n\tvar y;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarrays and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\ty = ndarray2object( arrays[ 1 ] );\n\n\t// Verify that the input and output arrays have the same number of dimensions...\n\tshx = x.shape;\n\tshy = y.shape;\n\tndims = shx.length;\n\tif ( ndims !== shy.length ) {\n\t\tthrow new Error( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == '+ndims+'. ndims(y) == '+shy.length+'.' );\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn );\n\t\t}\n\t\treturn UNARY[ ndims ]( x, y, fcn );\n\t}\n\t// Verify that the input and output arrays have the same dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\t\tif ( d !== shy[ i ] ) {\n\t\t\tthrow new Error( 'invalid arguments. Arrays must have the same shape.' );\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 ) {\n\t\treturn;\n\t}\n\t// Determine whether the ndarrays are one-dimensional and thus readily translate to one-dimensional strided arrays...\n\tif ( ndims === 1 ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn );\n\t\t}\n\t\treturn UNARY[ ndims ]( x, y, fcn );\n\t}\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarrays as being equivalent to one-dimensional strided arrays...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\ty.shape = x.shape;\n\t\tx.strides = [ sx[i] ];\n\t\ty.strides = [ sy[i] ];\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ 1 ]( x, y, fcn );\n\t\t}\n\t\treturn UNARY[ 1 ]( x, y, fcn );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && x.order === y.order ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array views:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\t\tymmv = minmaxViewBufferIndex( shy, sy, y.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarrays as linear one-dimensional strided arrays...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) && len === ( ymmv[1]-ymmv[0]+1 ) ) {\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioy === 1 ) {\n\t\t\t\toy = ymmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toy = ymmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\ty.shape = x.shape;\n\t\t\tx.strides = [ iox ];\n\t\t\ty.strides = [ ioy ];\n\t\t\tx.offset = ox;\n\t\t\ty.offset = oy;\n\t\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_UNARY[ 1 ]( x, y, fcn );\n\t\t\t}\n\t\t\treturn UNARY[ 1 ]( x, y, fcn );\n\t\t}\n\t\t// At least one ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn );\n\t\t\t}\n\t\t\treturn UNARY[ ndims ]( x, y, fcn );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ ndims-2 ]( x, y, fcn );\n\t\t}\n\t\treturn BLOCKED_UNARY[ ndims-2 ]( x, y, fcn );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\treturn accessorunarynd( x, y, fcn );\n\t}\n\tunarynd( x, y, fcn );\n}\n\n\n// EXPORTS //\n\nexport default unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a zero-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0 ] );\n* var ybuf = new Float64Array( 1 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary0d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0 ]\n*/\nfunction unary0d( x, y, fcn ) {\n\ty.data[ y.offset ] = fcn( x.data[ x.offset ] );\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a one-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary1d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 40.0, 60.0, 80.0 ]\n*/\nfunction unary1d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dy0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a two-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary2d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0 ]\n*/\nfunction unary2d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a three-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary3d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary3d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a four-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n* var sy = [ 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary4d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary4d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a five-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary5d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary5d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a six-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary6d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary6d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a seven-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary7d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary7d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an eight-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary8d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary8d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a nine-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary9d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary9d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a ten-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary10d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary10d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a zero-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Complex64Array( 2 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary0d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 30.0\n*\n* var im = imagf( v );\n* // returns 40.0\n*/\nfunction unary0d( x, y, fcn ) {\n\ty.accessors[ 1 ]( y.data, y.offset, fcn( x.accessors[ 0 ]( x.data, x.offset ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a one-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary1d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary1d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dy0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a two-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary2d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary2d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a three-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary3d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary3d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a four-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary4d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary4d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a five-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary5d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary5d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a six-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary6d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary6d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a seven-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary7d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary7d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an eight-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary8d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary8d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a nine-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary9d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary9d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a ten-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary10d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary10d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) ); // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a two-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary2d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0 ]\n*/\nfunction blockedunary2d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar ox1;\n\tvar oy1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a three-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary3d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary3d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a four-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n* var sy = [ 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary4d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary4d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a five-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary5d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary5d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a six-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary6d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary6d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a seven-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary7d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary7d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an eight-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary8d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary8d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a nine-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary9d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary9d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a ten-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary10d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary10d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a two-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary2d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary2d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar ox1;\n\tvar oy1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a three-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary3d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary3d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a four-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary4d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary4d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a five-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary5d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary5d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) ); // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a six-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary6d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary6d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a seven-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary7d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary7d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an eight-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary8d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary8d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a nine-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary9d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary9d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a ten-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary10d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary10d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from './../../../base/iteration-order';\nimport minmaxViewBufferIndex from './../../../base/minmax-view-buffer-index';\nimport ndarray2object from './../../../base/ndarraylike2object';\nimport blockedaccessorunary2d from './2d_blocked_accessors.js';\nimport blockedaccessorunary3d from './3d_blocked_accessors.js';\nimport blockedaccessorunary4d from './4d_blocked_accessors.js';\nimport blockedaccessorunary5d from './5d_blocked_accessors.js';\nimport blockedaccessorunary6d from './6d_blocked_accessors.js';\nimport blockedaccessorunary7d from './7d_blocked_accessors.js';\nimport blockedaccessorunary8d from './8d_blocked_accessors.js';\nimport blockedaccessorunary9d from './9d_blocked_accessors.js';\nimport blockedaccessorunary10d from './10d_blocked_accessors.js';\nimport blockedunary2d from './2d_blocked.js';\nimport blockedunary3d from './3d_blocked.js';\nimport blockedunary4d from './4d_blocked.js';\nimport blockedunary5d from './5d_blocked.js';\nimport blockedunary6d from './6d_blocked.js';\nimport blockedunary7d from './7d_blocked.js';\nimport blockedunary8d from './8d_blocked.js';\nimport blockedunary9d from './9d_blocked.js';\nimport blockedunary10d from './10d_blocked.js';\nimport accessorunary0d from './0d_accessors.js';\nimport accessorunary1d from './1d_accessors.js';\nimport accessorunary2d from './2d_accessors.js';\nimport accessorunary3d from './3d_accessors.js';\nimport accessorunary4d from './4d_accessors.js';\nimport accessorunary5d from './5d_accessors.js';\nimport accessorunary6d from './6d_accessors.js';\nimport accessorunary7d from './7d_accessors.js';\nimport accessorunary8d from './8d_accessors.js';\nimport accessorunary9d from './9d_accessors.js';\nimport accessorunary10d from './10d_accessors.js';\nimport accessorunarynd from './nd_accessors.js';\nimport unary0d from './0d.js';\nimport unary1d from './1d.js';\nimport unary2d from './2d.js';\nimport unary3d from './3d.js';\nimport unary4d from './4d.js';\nimport unary5d from './5d.js';\nimport unary6d from './6d.js';\nimport unary7d from './7d.js';\nimport unary8d from './8d.js';\nimport unary9d from './9d.js';\nimport unary10d from './10d.js';\nimport unarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from an input ndarray according to a callback function and assigns results to elements in an output ndarray.\n*\n* ## Notes\n*\n* -   Each provided ndarray should be an `object` with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing one input array and one output array\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @throws {Error} arrays must have the same number of dimensions\n* @throws {Error} arrays must have the same shape\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unaryBy( [ x, y ], scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unaryBy( arrays, fcn, clbk, thisArg ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar ymmv;\n\tvar shx;\n\tvar shy;\n\tvar iox;\n\tvar ioy;\n\tvar len;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ns;\n\tvar x;\n\tvar y;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarrays and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\ty = ndarray2object( arrays[ 1 ] );\n\n\t// Verify that the input and output arrays have the same number of dimensions...\n\tshx = x.shape;\n\tshy = y.shape;\n\tndims = shx.length;\n\tif ( ndims !== shy.length ) {\n\t\tthrow new Error( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == '+ndims+'. ndims(y) == '+shy.length+'.' );\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn, clbk, thisArg );\n\t\t}\n\t\treturn UNARY[ ndims ]( x, y, fcn, clbk, thisArg );\n\t}\n\t// Verify that the input and output arrays have the same dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\t\tif ( d !== shy[ i ] ) {\n\t\t\tthrow new Error( 'invalid arguments. Arrays must have the same shape.' );\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 ) {\n\t\treturn;\n\t}\n\t// Determine whether the ndarrays are one-dimensional and thus readily translate to one-dimensional strided arrays...\n\tif ( ndims === 1 ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn, clbk, thisArg );\n\t\t}\n\t\treturn UNARY[ ndims ]( x, y, fcn, clbk, thisArg );\n\t}\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarrays as being equivalent to one-dimensional strided arrays...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\ty.shape = x.shape;\n\t\tx.strides = [ sx[i] ];\n\t\ty.strides = [ sy[i] ];\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ 1 ]( x, y, fcn, clbk, thisArg );\n\t\t}\n\t\treturn UNARY[ 1 ]( x, y, fcn, clbk, thisArg );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && x.order === y.order ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array views:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\t\tymmv = minmaxViewBufferIndex( shy, sy, y.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarrays as linear one-dimensional strided arrays...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) && len === ( ymmv[1]-ymmv[0]+1 ) ) {\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioy === 1 ) {\n\t\t\t\toy = ymmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toy = ymmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\ty.shape = x.shape;\n\t\t\tx.strides = [ iox ];\n\t\t\ty.strides = [ ioy ];\n\t\t\tx.offset = ox;\n\t\t\ty.offset = oy;\n\t\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_UNARY[ 1 ]( x, y, fcn, clbk, thisArg );\n\t\t\t}\n\t\t\treturn UNARY[ 1 ]( x, y, fcn, clbk, thisArg );\n\t\t}\n\t\t// At least one ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn, clbk, thisArg );\n\t\t\t}\n\t\t\treturn UNARY[ ndims ]( x, y, fcn, clbk, thisArg );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ ndims-2 ]( x, y, fcn, clbk, thisArg ); // eslint-disable-line max-len\n\t\t}\n\t\treturn BLOCKED_UNARY[ ndims-2 ]( x, y, fcn, clbk, thisArg );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\treturn accessorunarynd( x, y, fcn, clbk, thisArg );\n\t}\n\tunarynd( x, y, fcn, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default unaryBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a zero-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0 ] );\n* var ybuf = new Float64Array( 1 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary0d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0 ]\n*/\nfunction unary0d( x, y, fcn, clbk, thisArg ) {\n\tvar ox = x.offset;\n\tvar oy = y.offset;\n\tvar v = clbk.call( thisArg, x.data[ ox ], 0, [ ox, oy ], [ x, y ] );\n\tif ( v !== void 0 ) {\n\t\ty.data[ oy ] = fcn( v );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a one-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary1d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40, 80, 120, 160 ]\n*/\nfunction unary1d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dy0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\tif ( v !== void 0 ) {\n\t\t\tybuf[ iy ] = fcn( v );\n\t\t}\n\t\tix += dx0;\n\t\tiy += dy0;\n\t\ti += 1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a two-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary2d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0 ]\n*/\nfunction unary2d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\tif ( v !== void 0 ) {\n\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t}\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t\ti += 1;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a three-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary3d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unary3d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t}\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/* eslint-disable max-len */\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a four-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n* var sy = [ 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary4d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unary4d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\ti += 1;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/* eslint-disable max-depth, max-len */\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a five-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary5d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unary5d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\ti += 1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a six-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary6d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unary6d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a seven-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary7d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unary7d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from an eight-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary8d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unary8d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a nine-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary9d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unary9d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a ten-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary10d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction unary10d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a zero-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Complex64Array( 2 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary0d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 30.0\n*\n* var im = imagf( v );\n* // returns 40.0\n*/\nfunction unary0d( x, y, fcn, clbk, thisArg ) {\n\tvar ox = x.offset;\n\tvar oy = y.offset;\n\tvar v = clbk.call( thisArg, x.accessors[ 0 ]( x.data, ox ), 0, [ ox, oy ], [ x, y ] ); // eslint-disable-line max-len\n\tif ( v !== void 0 ) {\n\t\ty.accessors[ 1 ]( y.data, oy, fcn( v ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a one-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary1d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary1d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dy0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\tif ( v !== void 0 ) {\n\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t}\n\t\tix += dx0;\n\t\tiy += dy0;\n\t\ti += 1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a two-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary2d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary2d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\tif ( v !== void 0 ) {\n\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t}\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t\ti += 1;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a three-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary3d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary3d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t}\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a four-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary4d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary4d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\ti += 1;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a five-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary5d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary5d( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\ti += 1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a six-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary6d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary6d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a seven-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import real from '@stdlib/complex/real';\n* import imag from '@stdlib/complex/imag';\n*\n* function scale( z ) {\n*     return new Complex64( real(z)*10.0, imag(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary7d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 20.0\n*/\nfunction unary7d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from an eight-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary8d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary8d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a nine-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary9d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary9d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a ten-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary10d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary10d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\ti = 0;\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a two-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary2d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0 ]\n*/\nfunction blockedunary2d( x, y, fcn, clbk, thisArg ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar ox1;\n\tvar oy1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\ti += 1;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a three-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary3d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction blockedunary3d( x, y, fcn, clbk, thisArg ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a four-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n* var sy = [ 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary4d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction blockedunary4d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a five-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary5d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction blockedunary5d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a six-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary6d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction blockedunary6d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a seven-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary7d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction blockedunary7d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from an eight-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary8d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction blockedunary8d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a nine-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary9d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction blockedunary9d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a ten-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary10d( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0, 200.0, 220.0 ]\n*/\nfunction blockedunary10d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( v );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a two-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary2d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary2d( x, y, fcn, clbk, thisArg ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar ox1;\n\tvar oy1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t}\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\ti += 1;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a three-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary3d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary3d( x, y, fcn, clbk, thisArg ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a four-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary4d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary4d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a five-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary5d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary5d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a six-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary6d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary6d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a seven-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import real from '@stdlib/complex/real';\n* import imag from '@stdlib/complex/imag';\n*\n* function scale( z ) {\n*     return new Complex64( real(z)*10.0, imag(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary7d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 20.0\n*/\nfunction blockedunary7d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from an eight-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary8d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary8d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a nine-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary9d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary9d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from './../../../base/unary-loop-interchange-order';\nimport blockSize from './../../../base/unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a ten-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary10d( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary10d( x, y, fcn, clbk, thisArg ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\ti = 0;\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( v !== void 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloatingPointDataType from './../../../base/assert/is-floating-point-data-type';\nimport isRealFloatingPointDataType from './../../../base/assert/is-real-floating-point-data-type'; // eslint-disable-line id-length\nimport isComplexFloatingPointDataType from './../../../base/assert/is-complex-floating-point-data-type'; // eslint-disable-line id-length\nimport isIntegerDataType from './../../../base/assert/is-integer-data-type';\nimport isSignedIntegerDataType from './../../../base/assert/is-signed-integer-data-type';\nimport isUnsignedIntegerDataType from './../../../base/assert/is-unsigned-integer-data-type';\nimport isRealDataType from './../../../base/assert/is-real-data-type';\nimport isNumericDataType from './../../../base/assert/is-numeric-data-type';\nimport isDataType from './../../../base/assert/is-data-type';\nimport defaults from './../../../defaults';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar POLICY_TABLE = {\n\t'floating_point': [\n\t\tisFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'real_floating_point': [\n\t\tisRealFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.real_floating_point' )\n\t],\n\t'complex_floating_point': [\n\t\tisComplexFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\n\t'integer': [\n\t\tisIntegerDataType,\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'signed_integer': [\n\t\tisSignedIntegerDataType,\n\t\tdefaults.get( 'dtypes.signed_integer' )\n\t],\n\t'unsigned_integer': [\n\t\tisUnsignedIntegerDataType,\n\t\tdefaults.get( 'dtypes.unsigned_integer' )\n\t],\n\n\t'real': [\n\t\tisRealDataType,\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\n\t'numeric': [\n\t\tisNumericDataType,\n\t\tdefaults.get( 'dtypes.numeric' )\n\t]\n};\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\n\n\n// MAIN //\n\n/**\n* Resolves the output ndarray data type for a unary function.\n*\n* @param {string} dtype - input ndarray data type\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} second argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( dtype, policy ) {\n\tvar p;\n\tif ( policy === 'default' ) {\n\t\t// When the policy is \"default\", the output data type should always be the default data type without consideration for the input data type:\n\t\treturn DEFAULT_DTYPE;\n\t}\n\tif ( policy === 'same' || policy === 'promoted' ) { // note: for unary APIs, the \"promoted\" data type is the same as the input data type\n\t\treturn dtype;\n\t}\n\tif ( policy === 'bool' ) {\n\t\tthrow new Error( 'not implemented' ); // TODO: update once the `bool` dtype is supported\n\t}\n\tp = POLICY_TABLE[ policy ];\n\tif ( p === void 0 ) {\n\t\t// Check for an explicit data type...\n\t\tif ( isDataType( policy ) ) {\n\t\t\treturn policy;\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a supported data type policy. Value: `%s`.', policy ) );\n\t}\n\tif ( p[ 0 ]( dtype ) ) {\n\t\treturn dtype;\n\t}\n\treturn p[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n/*\n* The following modules are intentionally not exported: function-object, napi, unary\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/ndarray/base/assert}\n*/\nimport assert from './../../base/assert';\nsetReadOnly( ns, 'assert', assert );\n\n/**\n* @name assign\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/assign}\n*/\nimport assign from './../../base/assign';\nsetReadOnly( ns, 'assign', assign );\n\n/**\n* @name binaryLoopOrder\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/binary-loop-interchange-order}\n*/\nimport binaryLoopOrder from './../../base/binary-loop-interchange-order';\nsetReadOnly( ns, 'binaryLoopOrder', binaryLoopOrder );\n\n/**\n* @name binaryBlockSize\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/binary-tiling-block-size}\n*/\nimport binaryBlockSize from './../../base/binary-tiling-block-size';\nsetReadOnly( ns, 'binaryBlockSize', binaryBlockSize );\n\n/**\n* @name bind2vind\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/bind2vind}\n*/\nimport bind2vind from './../../base/bind2vind';\nsetReadOnly( ns, 'bind2vind', bind2vind );\n\n/**\n* @name broadcastArray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/broadcast-array}\n*/\nimport broadcastArray from './../../base/broadcast-array';\nsetReadOnly( ns, 'broadcastArray', broadcastArray );\n\n/**\n* @name broadcastScalar\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/broadcast-scalar}\n*/\nimport broadcastScalar from './../../base/broadcast-scalar';\nsetReadOnly( ns, 'broadcastScalar', broadcastScalar );\n\n/**\n* @name broadcastShapes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/broadcast-shapes}\n*/\nimport broadcastShapes from './../../base/broadcast-shapes';\nsetReadOnly( ns, 'broadcastShapes', broadcastShapes );\n\n/**\n* @name buffer\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/buffer}\n*/\nimport buffer from './../../base/buffer';\nsetReadOnly( ns, 'buffer', buffer );\n\n/**\n* @name bufferCtors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/buffer-ctors}\n*/\nimport bufferCtors from './../../base/buffer-ctors';\nsetReadOnly( ns, 'bufferCtors', bufferCtors );\n\n/**\n* @name bufferDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/buffer-dtype}\n*/\nimport bufferDataType from './../../base/buffer-dtype';\nsetReadOnly( ns, 'bufferDataType', bufferDataType );\n\n/**\n* @name bufferDataTypeEnum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/buffer-dtype-enum}\n*/\nimport bufferDataTypeEnum from './../../base/buffer-dtype-enum';\nsetReadOnly( ns, 'bufferDataTypeEnum', bufferDataTypeEnum );\n\n/**\n* @name bytesPerElement\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/bytes-per-element}\n*/\nimport bytesPerElement from './../../base/bytes-per-element';\nsetReadOnly( ns, 'bytesPerElement', bytesPerElement );\n\n/**\n* @name char2dtype\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/char2dtype}\n*/\nimport char2dtype from './../../base/char2dtype';\nsetReadOnly( ns, 'char2dtype', char2dtype );\n\n/**\n* @name clampIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/clamp-index}\n*/\nimport clampIndex from './../../base/clamp-index';\nsetReadOnly( ns, 'clampIndex', clampIndex );\n\n/**\n* @name ndarray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/ctor}\n*/\nimport ndarray from './../../base/ctor';\nsetReadOnly( ns, 'ndarray', ndarray );\n\n/**\n* @name data\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/data-buffer}\n*/\nimport data from './../../base/data-buffer';\nsetReadOnly( ns, 'data', data );\n\n/**\n* @name dtype\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtype}\n*/\nimport dtype from './../../base/dtype';\nsetReadOnly( ns, 'dtype', dtype );\n\n/**\n* @name dtypeChar\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtype-char}\n*/\nimport dtypeChar from './../../base/dtype-char';\nsetReadOnly( ns, 'dtypeChar', dtypeChar );\n\n/**\n* @name dtypeDesc\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtype-desc}\n*/\nimport dtypeDesc from './../../base/dtype-desc';\nsetReadOnly( ns, 'dtypeDesc', dtypeDesc );\n\n/**\n* @name dtypeEnum2Str\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtype-enum2str}\n*/\nimport dtypeEnum2Str from './../../base/dtype-enum2str';\nsetReadOnly( ns, 'dtypeEnum2Str', dtypeEnum2Str );\n\n/**\n* @name dtypeResolveEnum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtype-resolve-enum}\n*/\nimport dtypeResolveEnum from './../../base/dtype-resolve-enum';\nsetReadOnly( ns, 'dtypeResolveEnum', dtypeResolveEnum );\n\n/**\n* @name dtypeResolveStr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtype-resolve-str}\n*/\nimport dtypeResolveStr from './../../base/dtype-resolve-str';\nsetReadOnly( ns, 'dtypeResolveStr', dtypeResolveStr );\n\n/**\n* @name dtypeStr2Enum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtype-str2enum}\n*/\nimport dtypeStr2Enum from './../../base/dtype-str2enum';\nsetReadOnly( ns, 'dtypeStr2Enum', dtypeStr2Enum );\n\n/**\n* @name dtype2c\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtype2c}\n*/\nimport dtype2c from './../../base/dtype2c';\nsetReadOnly( ns, 'dtype2c', dtype2c );\n\n/**\n* @name dtypes2signatures\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/dtypes2signatures}\n*/\nimport dtypes2signatures from './../../base/dtypes2signatures';\nsetReadOnly( ns, 'dtypes2signatures', dtypes2signatures );\n\n/**\n* @name empty\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/empty}\n*/\nimport empty from './../../base/empty';\nsetReadOnly( ns, 'empty', empty );\n\n/**\n* @name emptyLike\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/empty-like}\n*/\nimport emptyLike from './../../base/empty-like';\nsetReadOnly( ns, 'emptyLike', emptyLike );\n\n/**\n* @name expandDimensions\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/expand-dimensions}\n*/\nimport expandDimensions from './../../base/expand-dimensions';\nsetReadOnly( ns, 'expandDimensions', expandDimensions );\n\n/**\n* @name fliplr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/fliplr}\n*/\nimport fliplr from './../../base/fliplr';\nsetReadOnly( ns, 'fliplr', fliplr );\n\n/**\n* @name flipud\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/flipud}\n*/\nimport flipud from './../../base/flipud';\nsetReadOnly( ns, 'flipud', flipud );\n\n/**\n* @name scalar2ndarray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/from-scalar}\n*/\nimport scalar2ndarray from './../../base/from-scalar';\nsetReadOnly( ns, 'scalar2ndarray', scalar2ndarray );\n\n/**\n* @name ind\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/ind}\n*/\nimport ind from './../../base/ind';\nsetReadOnly( ns, 'ind', ind );\n\n/**\n* @name ind2sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/ind2sub}\n*/\nimport ind2sub from './../../base/ind2sub';\nsetReadOnly( ns, 'ind2sub', ind2sub );\n\n/**\n* @name iterationOrder\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/iteration-order}\n*/\nimport iterationOrder from './../../base/iteration-order';\nsetReadOnly( ns, 'iterationOrder', iterationOrder );\n\n/**\n* @name maxViewBufferIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/max-view-buffer-index}\n*/\nimport maxViewBufferIndex from './../../base/max-view-buffer-index';\nsetReadOnly( ns, 'maxViewBufferIndex', maxViewBufferIndex );\n\n/**\n* @name maybeBroadcastArray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/maybe-broadcast-array}\n*/\nimport maybeBroadcastArray from './../../base/maybe-broadcast-array';\nsetReadOnly( ns, 'maybeBroadcastArray', maybeBroadcastArray );\n\n/**\n* @name metaDataProps\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/meta-data-props}\n*/\nimport metaDataProps from './../../base/meta-data-props';\nsetReadOnly( ns, 'metaDataProps', metaDataProps );\n\n/**\n* @name minViewBufferIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/min-view-buffer-index}\n*/\nimport minViewBufferIndex from './../../base/min-view-buffer-index';\nsetReadOnly( ns, 'minViewBufferIndex', minViewBufferIndex );\n\n/**\n* @name minmaxViewBufferIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/minmax-view-buffer-index}\n*/\nimport minmaxViewBufferIndex from './../../base/minmax-view-buffer-index';\nsetReadOnly( ns, 'minmaxViewBufferIndex', minmaxViewBufferIndex );\n\n/**\n* @name ndarraylike2object\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/ndarraylike2object}\n*/\nimport ndarraylike2object from './../../base/ndarraylike2object';\nsetReadOnly( ns, 'ndarraylike2object', ndarraylike2object );\n\n/**\n* @name ndims\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/ndims}\n*/\nimport ndims from './../../base/ndims';\nsetReadOnly( ns, 'ndims', ndims );\n\n/**\n* @name nextCartesianIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/next-cartesian-index}\n*/\nimport nextCartesianIndex from './../../base/next-cartesian-index';\nsetReadOnly( ns, 'nextCartesianIndex', nextCartesianIndex );\n\n/**\n* @name nonsingletonDimensions\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/nonsingleton-dimensions}\n*/\nimport nonsingletonDimensions from './../../base/nonsingleton-dimensions';\nsetReadOnly( ns, 'nonsingletonDimensions', nonsingletonDimensions );\n\n/**\n* @name normalizeIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/normalize-index}\n*/\nimport normalizeIndex from './../../base/normalize-index';\nsetReadOnly( ns, 'normalizeIndex', normalizeIndex );\n\n/**\n* @name nullary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/nullary}\n*/\nimport nullary from './../../base/nullary';\nsetReadOnly( ns, 'nullary', nullary );\n\n/**\n* @name nullaryLoopOrder\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/nullary-loop-interchange-order}\n*/\nimport nullaryLoopOrder from './../../base/nullary-loop-interchange-order';\nsetReadOnly( ns, 'nullaryLoopOrder', nullaryLoopOrder );\n\n/**\n* @name nullaryBlockSize\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/nullary-tiling-block-size}\n*/\nimport nullaryBlockSize from './../../base/nullary-tiling-block-size';\nsetReadOnly( ns, 'nullaryBlockSize', nullaryBlockSize );\n\n/**\n* @name numel\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/numel}\n*/\nimport numel from './../../base/numel';\nsetReadOnly( ns, 'numel', numel );\n\n/**\n* @name offset\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/offset}\n*/\nimport offset from './../../base/offset';\nsetReadOnly( ns, 'offset', offset );\n\n/**\n* @name order\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/order}\n*/\nimport order from './../../base/order';\nsetReadOnly( ns, 'order', order );\n\n/**\n* @name outputPolicyEnum2Str\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/output-policy-enum2str}\n*/\nimport outputPolicyEnum2Str from './../../base/output-policy-enum2str';\nsetReadOnly( ns, 'outputPolicyEnum2Str', outputPolicyEnum2Str );\n\n/**\n* @name outputPolicyResolveEnum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/output-policy-resolve-enum}\n*/\nimport outputPolicyResolveEnum from './../../base/output-policy-resolve-enum';\nsetReadOnly( ns, 'outputPolicyResolveEnum', outputPolicyResolveEnum );\n\n/**\n* @name outputPolicyResolveStr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/output-policy-resolve-str}\n*/\nimport outputPolicyResolveStr from './../../base/output-policy-resolve-str';\nsetReadOnly( ns, 'outputPolicyResolveStr', outputPolicyResolveStr );\n\n/**\n* @name outputPolicyStr2Enum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/output-policy-str2enum}\n*/\nimport outputPolicyStr2Enum from './../../base/output-policy-str2enum';\nsetReadOnly( ns, 'outputPolicyStr2Enum', outputPolicyStr2Enum );\n\n/**\n* @name prependSingletonDimensions\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/prepend-singleton-dimensions}\n*/\nimport prependSingletonDimensions from './../../base/prepend-singleton-dimensions';\nsetReadOnly( ns, 'prependSingletonDimensions', prependSingletonDimensions );\n\n/**\n* @name removeSingletonDimensions\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/remove-singleton-dimensions}\n*/\nimport removeSingletonDimensions from './../../base/remove-singleton-dimensions';\nsetReadOnly( ns, 'removeSingletonDimensions', removeSingletonDimensions );\n\n/**\n* @name reverse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/reverse}\n*/\nimport reverse from './../../base/reverse';\nsetReadOnly( ns, 'reverse', reverse );\n\n/**\n* @name reverseDimension\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/reverse-dimension}\n*/\nimport reverseDimension from './../../base/reverse-dimension';\nsetReadOnly( ns, 'reverseDimension', reverseDimension );\n\n/**\n* @name serializeMetaData\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/serialize-meta-data}\n*/\nimport serializeMetaData from './../../base/serialize-meta-data';\nsetReadOnly( ns, 'serializeMetaData', serializeMetaData );\n\n/**\n* @name shape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/shape}\n*/\nimport shape from './../../base/shape';\nsetReadOnly( ns, 'shape', shape );\n\n/**\n* @name shape2strides\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/shape2strides}\n*/\nimport shape2strides from './../../base/shape2strides';\nsetReadOnly( ns, 'shape2strides', shape2strides );\n\n/**\n* @name singletonDimensions\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/singleton-dimensions}\n*/\nimport singletonDimensions from './../../base/singleton-dimensions';\nsetReadOnly( ns, 'singletonDimensions', singletonDimensions );\n\n/**\n* @name slice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/slice}\n*/\nimport slice from './../../base/slice';\nsetReadOnly( ns, 'slice', slice );\n\n/**\n* @name sliceAssign\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/slice-assign}\n*/\nimport sliceAssign from './../../base/slice-assign';\nsetReadOnly( ns, 'sliceAssign', sliceAssign );\n\n/**\n* @name sliceDimension\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/slice-dimension}\n*/\nimport sliceDimension from './../../base/slice-dimension';\nsetReadOnly( ns, 'sliceDimension', sliceDimension );\n\n/**\n* @name sliceDimensionFrom\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/slice-dimension-from}\n*/\nimport sliceDimensionFrom from './../../base/slice-dimension-from';\nsetReadOnly( ns, 'sliceDimensionFrom', sliceDimensionFrom );\n\n/**\n* @name sliceDimensionTo\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/slice-dimension-to}\n*/\nimport sliceDimensionTo from './../../base/slice-dimension-to';\nsetReadOnly( ns, 'sliceDimensionTo', sliceDimensionTo );\n\n/**\n* @name sliceFrom\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/slice-from}\n*/\nimport sliceFrom from './../../base/slice-from';\nsetReadOnly( ns, 'sliceFrom', sliceFrom );\n\n/**\n* @name sliceTo\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/slice-to}\n*/\nimport sliceTo from './../../base/slice-to';\nsetReadOnly( ns, 'sliceTo', sliceTo );\n\n/**\n* @name stride\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/stride}\n*/\nimport stride from './../../base/stride';\nsetReadOnly( ns, 'stride', stride );\n\n/**\n* @name strides\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/strides}\n*/\nimport strides from './../../base/strides';\nsetReadOnly( ns, 'strides', strides );\n\n/**\n* @name strides2offset\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/strides2offset}\n*/\nimport strides2offset from './../../base/strides2offset';\nsetReadOnly( ns, 'strides2offset', strides2offset );\n\n/**\n* @name strides2order\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/strides2order}\n*/\nimport strides2order from './../../base/strides2order';\nsetReadOnly( ns, 'strides2order', strides2order );\n\n/**\n* @name sub2ind\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/sub2ind}\n*/\nimport sub2ind from './../../base/sub2ind';\nsetReadOnly( ns, 'sub2ind', sub2ind );\n\n/**\n* @name ndarray2array\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/to-array}\n*/\nimport ndarray2array from './../../base/to-array';\nsetReadOnly( ns, 'ndarray2array', ndarray2array );\n\n/**\n* @name transpose\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/transpose}\n*/\nimport transpose from './../../base/transpose';\nsetReadOnly( ns, 'transpose', transpose );\n\n/**\n* @name unary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/unary}\n*/\nimport unary from './../../base/unary';\nsetReadOnly( ns, 'unary', unary );\n\n/**\n* @name unaryBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/unary-by}\n*/\nimport unaryBy from './../../base/unary-by';\nsetReadOnly( ns, 'unaryBy', unaryBy );\n\n/**\n* @name unaryLoopOrder\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/unary-loop-interchange-order}\n*/\nimport unaryLoopOrder from './../../base/unary-loop-interchange-order';\nsetReadOnly( ns, 'unaryLoopOrder', unaryLoopOrder );\n\n/**\n* @name unaryOutputDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/unary-output-dtype}\n*/\nimport unaryOutputDataType from './../../base/unary-output-dtype';\nsetReadOnly( ns, 'unaryOutputDataType', unaryOutputDataType );\n\n/**\n* @name unaryBlockSize\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/unary-tiling-block-size}\n*/\nimport unaryBlockSize from './../../base/unary-tiling-block-size';\nsetReadOnly( ns, 'unaryBlockSize', unaryBlockSize );\n\n/**\n* @name vind2bind\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/vind2bind}\n*/\nimport vind2bind from './../../base/vind2bind';\nsetReadOnly( ns, 'vind2bind', vind2bind );\n\n/**\n* @name wrapIndex\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/wrap-index}\n*/\nimport wrapIndex from './../../base/wrap-index';\nsetReadOnly( ns, 'wrapIndex', wrapIndex );\n\n/**\n* @name zeros\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/zeros}\n*/\nimport zeros from './../../base/zeros';\nsetReadOnly( ns, 'zeros', zeros );\n\n/**\n* @name zerosLike\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/base/zeros-like}\n*/\nimport zerosLike from './../../base/zeros-like';\nsetReadOnly( ns, 'zerosLike', zerosLike );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isCollection from '@stdlib/assert/is-collection';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport copy from '@stdlib/array/base/copy-indexed';\nimport getDType from './../../dtype';\nimport getShape from './../../shape';\nimport getStrides from './../../strides';\nimport getOffset from './../../offset';\nimport getOrder from './../../order';\nimport getData from './../../data-buffer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Broadcasts an ndarray to a specified shape.\n*\n* ## Notes\n*\n* -   The returned array is a **read-only** view on the input array data buffer. The view is typically **not** contiguous. As more than one element of a returned view may refer to the same memory location, writing to the input array may affect multiple elements. If you need to write to the input array, copy the input array before broadcasting.\n*\n* @param {ndarray} x - input array\n* @param {NonNegativeIntegerArray} shape - desired shape\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} second argument must be an array of nonnegative integers\n* @throws {Error} input array cannot have more dimensions than the desired shape\n* @throws {Error} input array dimension sizes must be `1` or equal to the corresponding dimension in the provided shape\n* @throws {Error} input array and desired shape must be broadcast compatible\n* @returns {ndarray} broadcasted array\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = broadcastArray( x, [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 1\n*\n* v = y.get( 1, 1, 0 );\n* // returns 3\n*\n* v = y.get( 2, 0, 0 );\n* // returns 1\n*\n* v = y.get( 2, 1, 1 );\n* // returns 4\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var y = broadcastArray( x, [ 3, 2 ] );\n* // throws <Error>\n*/\nfunction broadcastArray( x, shape ) {\n\tvar strides;\n\tvar dim;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar M;\n\tvar d;\n\tvar i;\n\tvar j;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tN = shape.length;\n\tsh = getShape( x );\n\tM = sh.length;\n\tif ( N < M ) {\n\t\tthrow new Error( 'invalid argument. Cannot broadcast an array to a shape having fewer dimensions. Arrays can only be broadcasted to shapes having the same or more dimensions.' );\n\t}\n\t// Initialize a strides array...\n\tstrides = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstrides.push( 0 );\n\t}\n\t// Determine the output array strides...\n\tst = getStrides( x );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\tj = M - N + i;\n\t\tif ( j < 0 ) {\n\t\t\t// Prepended singleton dimension; stride is zero...\n\t\t\tcontinue;\n\t\t}\n\t\td = sh[ j ];\n\t\tdim = shape[ i ];\n\t\tif ( !isNonNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of nonnegative integers. Value: `%s`.', '[' + shape.join( ',' ) + ']' ) );\n\t\t}\n\t\tif ( dim !== 0 && dim < d ) {\n\t\t\tthrow new Error( format( 'invalid argument. Input array cannot be broadcast to the specified shape, as the specified shape has a dimension whose size is less than the size of the corresponding dimension in the input array. Array shape: (%s). Desired shape: (%s). Dimension: %u.', copy( sh ).join( ', ' ), copy( shape ).join( ', ' ), i ) );\n\t\t}\n\t\tif ( d === dim ) {\n\t\t\tstrides[ i ] = st[ j ];\n\t\t} else if ( d === 1 ) {\n\t\t\t// In order to broadcast dimensions, we set the stride for that dimension to zero...\n\t\t\tstrides[ i ] = 0;\n\t\t} else {\n\t\t\t// At this point, we know that `dim > d` and that `d` does not equal `1` (e.g., `dim=3` and `d=2`); in which case, the shapes are considered incompatible (even for desired shapes which are multiples of array dimensions, as might be desired when \"tiling\" an array; e.g., `dim=4` and `d=2`)...\n\t\t\tthrow new Error( format( 'invalid argument. Input array and the specified shape are broadcast incompatible. Array shape: (%s). Desired shape: (%s). Dimension: %u.', copy( sh ).join( ', ' ), copy( shape ).join( ', ' ), i ) );\n\t\t}\n\t}\n\treturn new x.constructor( getDType( x ), getData( x ), copy( shape ), strides, getOffset( x ), getOrder( x ), { // eslint-disable-line max-len\n\t\t'readonly': true\n\t});\n}\n\n\n// EXPORTS //\n\nexport default broadcastArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the first row index at which a given one-dimensional array of types can be found in a two-dimensional reference array of types (or `-1` if not found).\n*\n* ## Notes\n*\n* -   The intended use case for this function is for type dispatch (i.e., given a set of array data types, find a matching interface according the interface's accepted array data types).\n* -   The function assumes that `x` is stored in row-major order.\n* -   The function assumes that the number of indexed elements in `y` equals the number of columns in `x`.\n* -   The function returns a row index. To convert to a linear index, multiply `strideX1` by the return value.\n*\n* @private\n* @param {NonNegativeInteger} N - number of rows in `x` (size of first dimension)\n* @param {NonNegativeInteger} M - number of columns in `x` (size of second dimension)\n* @param {ArrayLikeObject} x - input two-dimensional reference array\n* @param {integer} strideX1 - `x` stride length along first dimension\n* @param {integer} strideX2 - `x` stride length along second dimension\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {ArrayLikeObject} y - search array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {integer} row index (if found) and `-1` otherwise\n*\n* @example\n* // Define a reference array to search:\n* var types = [\n*     'float64', 'float64', 'float64',\n*     'float32', 'float32', 'float32',\n*     'uint32', 'uint32', 'float64',\n*     'int32', 'int32', 'float64',\n*     'uint16', 'uint16', 'float64',\n*     'int16', 'int16', 'float64',\n*     'uint8', 'uint8', 'float64',\n*     'int8', 'int8', 'float64'\n* ];\n*\n* // Define reference array dimensions:\n* var N = 8; // rows\n* var M = 3; // columns\n*\n* // Define a search array:\n* y1 = [\n*     'float32', 'float32', 'float32',\n* ];\n*\n* // Find the list of types:\n* var r1 = indexOfTypes( N, M, types, M, 1, 0, y1, 1, 0 );\n* // returns 1\n*\n// Define a search array:\n* y2 = [\n*     'float32', 'float32', 'float64',\n* ];\n*\n* // Find the list of types:\n* var r2 = indexOfTypes( N, M, types, M, 1, 0, y2, 1, 0 );\n* // returns -1\n*/\nfunction indexOfTypes( N, M, x, strideX1, strideX2, offsetX, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\t// Search for the first row which matches `y`...\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tiy = offsetY;\n\t\tfor ( j = 0; j < M; j++ ) {\n\t\t\tif ( x[ ix+(j*strideX2) ] !== y[ iy ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tiy += strideY;\n\t\t}\n\t\t// If we successfully iterated over all columns, then that means we've found a match...\n\t\tif ( j === M ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX1;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default indexOfTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isPositiveInteger from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isFunctionArray from '@stdlib/assert/is-function-array';\nimport isFunction from '@stdlib/assert/is-function';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport format from '@stdlib/string/format';\nimport getDType from './../../dtype';\nimport resolveEnum from './../../base/dtype-resolve-enum';\nimport indexOfTypes from './index_of_types.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a list of data type enumeration constants.\n*\n* @private\n* @param {Collection} types - list of types\n* @returns {IntegerArray} list of data type enumeration constants\n*/\nfunction types2enums( types ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < types.length; i++ ) {\n\t\tout.push( resolveEnum( types[ i ] ) );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns an ndarray function interface which performs multiple dispatch.\n*\n* @param {(FunctionArray|Function)} fcns - list of ndarray functions\n* @param {Collection} types - one-dimensional list of ndarray argument data types\n* @param {(Collection|null)} data - ndarray function data (e.g., callbacks)\n* @param {PositiveInteger} nargs - total number of ndarray function interface arguments\n* @param {NonNegativeInteger} nin - number of input ndarrays\n* @param {NonNegativeInteger} nout - number of output ndarrays\n* @throws {TypeError} first argument must be either a function or an array of functions\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an array-like object or `null`\n* @throws {Error} third and first arguments must have the same number of elements\n* @throws {TypeError} fourth argument must be a positive integer\n* @throws {TypeError} fifth argument must be a nonnegative integer\n* @throws {TypeError} sixth argument must be a nonnegative integer\n* @throws {Error} fourth argument must equal the specified number of input and output arrays\n* @throws {Error} number of types must match the number of functions times the total number of array arguments for each function\n* @throws {Error} interface must accept at least one input and/or output ndarray\n* @returns {Function} ndarray function interface\n*\n* @example\n* import unary from '@stdlib/ndarray/base/unary';\n* import abs from '@stdlib/math/base/special/abs';\n* import Float64Array from '@stdlib/array/float64';\n* import ndarray from '@stdlib/ndarray/ctor';\n*\n* var types = [\n*     'float64', 'float64'\n* ];\n*\n* var data = [\n*     abs\n* ];\n*\n* var absolute = dispatch( unary, types, data, 2, 1, 1 );\n*\n* // ...\n*\n* var xbuf = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* var x = ndarray( 'float64', xbuf, [ 5 ], [ 1 ], 0, 'row-major' );\n* var y = ndarray( 'float64', ybuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* absolute( x, y );\n* // ybuf => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction dispatch( fcns, types, data, nargs, nin, nout ) {\n\tvar narrays;\n\tvar nfcns;\n\tvar fcn;\n\n\tif ( isFunction( fcns ) ) {\n\t\tfcn = fcns;\n\t} else if ( !isFunctionArray( fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a function or an array of functions. Value: `%s`.', fcns ) );\n\t}\n\tif ( !isCollection( types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', types ) );\n\t}\n\tif ( !isCollection( data ) && data !== null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object or null. Value: `%s`.', data ) );\n\t}\n\tif ( !isPositiveInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a positive integer. Value: `%s`.', nargs ) );\n\t}\n\tif ( !isNonNegativeInteger( nin ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%s`.', nin ) );\n\t}\n\tif ( !isNonNegativeInteger( nout ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Sixth argument must be a nonnegative integer. Value: `%s`.', nout ) );\n\t}\n\tnarrays = nin + nout;\n\tif ( narrays === 0 ) {\n\t\tthrow new Error( 'invalid arguments. Interface must accept at least one input and/or output ndarray. Based on the provided arguments, `nin+nout` equals `0`.' );\n\t}\n\tif ( nargs !== narrays ) {\n\t\tthrow new Error( 'invalid arguments. Fourth argument does not equal the number of input and output ndarrays.' );\n\t}\n\tif ( fcn ) {\n\t\tnfcns = types.length / narrays;\n\t\tif ( !isInteger( nfcns ) ) {\n\t\t\tthrow new Error( 'invalid argument. Unexpected number of types. A type must be specified for each input and output ndarray for each provided ndarray function.' );\n\t\t}\n\t} else {\n\t\tnfcns = fcns.length;\n\t\tif ( types.length !== nfcns*narrays ) {\n\t\t\tthrow new Error( 'invalid argument. Unexpected number of types. A type must be specified for each input and output ndarray for each provided ndarray function.' );\n\t\t}\n\t}\n\tif ( data && data.length !== nfcns ) {\n\t\tthrow new Error( 'invalid argument. The third argument must have the same number of elements as the first argument.' );\n\t}\n\ttypes = types2enums( types );\n\treturn dispatcher;\n\n\t/**\n\t* ndarray function interface which performs multiple dispatch.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - ndarray\n\t* @param {...ndarrayLike} args - ndarray arguments\n\t* @throws {Error} insufficient arguments\n\t* @throws {Error} too many arguments\n\t* @throws {TypeError} input array arguments must be ndarray-like objects\n\t* @throws {TypeError} output array arguments must be ndarray-like objects\n\t* @throws {TypeError} unable to resolve an ndarray function supporting the provided ndarray argument data types\n\t* @returns {(ndarrayLike|Array<ndarrayLike>|void)} destination array(s)\n\t*/\n\tfunction dispatcher() {\n\t\tvar arrays;\n\t\tvar dtypes;\n\t\tvar argc;\n\t\tvar idx;\n\t\tvar v;\n\t\tvar f;\n\t\tvar i;\n\n\t\targc = arguments.length;\n\t\tif ( argc !== nargs ) {\n\t\t\tif ( argc < nargs ) {\n\t\t\t\tthrow new Error( 'invalid invocation. Insufficient arguments.' );\n\t\t\t}\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t\tarrays = [];\n\t\tdtypes = [];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( !isndarrayLike( v ) ) {\n\t\t\t\tif ( i < nin ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Input array must be an ndarray-like object. Value: `%s`.', v ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Output array must be an ndarray-like object. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\tarrays.push( v );\n\t\t\tdtypes.push( resolveEnum( getDType( v ) ) );\n\t\t}\n\t\t// Resolve the ndarray function satisfying the input array types:\n\t\tidx = indexOfTypes( nfcns, narrays, types, narrays, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\n\t\t// Check whether we were able to successfully resolve an ndarray function:\n\t\tif ( idx < 0 ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve an ndarray function supporting the provided array argument data types.' );\n\t\t}\n\t\t// Retrieve the ndarray function:\n\t\tif ( fcn ) {\n\t\t\tf = fcn;\n\t\t} else {\n\t\t\tf = fcns[ idx ];\n\t\t}\n\t\t// Evaluate the ndarray function:\n\t\tif ( data ) {\n\t\t\tf( arrays, data[ idx ] );\n\t\t} else {\n\t\t\tf( arrays );\n\t\t}\n\t\tif ( nout === 1 ) {\n\t\t\treturn arrays[ narrays-1 ];\n\t\t}\n\t\tif ( nout === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\treturn arrays.slice( nin );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array/base/zero-to';\nimport copy from '@stdlib/array/base/copy-indexed';\nimport take from '@stdlib/array/base/take-indexed';\nimport filled from '@stdlib/array/base/filled';\nimport strides2order from './../../../base/strides2order';\nimport sort2ins from './sort2ins.js';\n\n\n// VARIABLES //\n\n// Number of arrays:\nvar N = 3;\n\n\n// MAIN //\n\n/**\n* Reorders ndarray dimensions and associated strides for loop interchange.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **sh**: dimensions sorted in loop order.\n*     -   **sx**: first input ndarray strides sorted in loop order.\n*     -   **sy**: second input ndarray strides sorted in loop order.\n*     -   **sz**: output ndarray strides sorted in loop order.\n*\n* @param {NonNegativeIntegerArray} sh - array dimensions\n* @param {IntegerArray} sx - first input array stride lengths\n* @param {IntegerArray} sy - second input array stride lengths\n* @param {IntegerArray} sz - output array stride lengths\n* @returns {Object} loop interchange data\n*\n* @example\n* var sh = [ 2, 3, 4 ];\n*\n* var sx = [ 12, 4, 1 ]; // row-major\n* var sy = [ 24, 8, 1 ]; // row-major\n* var sz = [ 1, -2, 6 ]; // column-major\n*\n* var o = loopOrder( sh, sx, sy, sz );\n* // returns {...}\n*\n* var ssh = o.sh;\n* // returns [ 4, 3, 2 ]\n*\n* var ssx = o.sx;\n* // returns [ 1, 4, 12 ]\n*\n* var ssy = o.sy;\n* // returns [ 1, 8, 24 ]\n*\n* var ssz = o.sz;\n* // returns [ 6, -2, 1 ]\n*/\nfunction loopOrder( sh, sx, sy, sz ) {\n\tvar idx;\n\tvar tmp;\n\tvar max;\n\tvar len;\n\tvar arr;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar i;\n\tvar j;\n\n\t// Initialize a loop interchange index array for generating a loop order permutation:\n\tidx = zeroTo( sh.length );\n\n\t// Determine the order (layout) of each array:\n\tox = strides2order( sx );\n\toy = strides2order( sy );\n\toz = strides2order( sz );\n\n\t// Determine which array should be used to generate the loop order:\n\ttmp = filled( [], 4 );\n\ttmp[ ox ].push( sx );\n\ttmp[ oy ].push( sy );\n\ttmp[ oz ].push( sz );\n\tmax = tmp[ 0 ].length;\n\tif ( max === N ) {\n\t\t// If all arrays are \"disorganized\", then just use the first array, as, generally, each array is likely to be as un-ideal as every other:\n\t\tarr = sx;\n\t} else if ( max === N-1 ) {\n\t\t// If all but one array is \"disorganized\", find the \"organized\" array...\n\t\tfor ( i = 1; i < 4; i++ ) {\n\t\t\tif ( tmp[ i ].length ) {\n\t\t\t\tarr = tmp[ i ][ 0 ];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Find the layout which is most common...\n\t\tj = 0;\n\t\tfor ( i = 1; i < 4; i++ ) {\n\t\t\tlen = tmp[ i ].length;\n\t\t\tif ( len >= max ) {\n\t\t\t\tmax = len;\n\t\t\t\tj = i;\n\t\t\t}\n\t\t}\n\t\t// Use the strides of the first array having the most common layout:\n\t\tarr = tmp[ j ][ 0 ];\n\t}\n\t// Sort array strides in increasing order (of magnitude):\n\tarr = copy( arr );\n\tsort2ins( arr, idx );\n\n\t// Permute the shape and array strides based on the sorted strides:\n\tsh = take( sh, idx );\n\tsx = ( sx === arr ) ? arr : take( sx, idx );\n\tsy = ( sy === arr ) ? arr : take( sy, idx );\n\tsz = ( sz === arr ) ? arr : take( sz, idx );\n\n\treturn {\n\t\t'sh': sh,\n\t\t'sx': sx,\n\t\t'sy': sy,\n\t\t'sz': sz\n\t};\n}\n\n\n// EXPORTS //\n\nexport default loopOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Simultaneously sorts two arrays based on the sort order of the first array using insertion sort.\n*\n* ## Notes\n*\n* -   The first array is sorted in increasing order according to absolute value.\n* -   The algorithm has space complexity `O(1)` and worst case time complexity `O(N^2)`.\n* -   The algorithm is efficient for small arrays (typically `N <= 20``) and is particularly efficient for sorting arrays which are already substantially sorted.\n* -   The algorithm is **stable**, meaning that the algorithm does **not** change the order of array elements which are equal or equivalent.\n* -   The input arrays are sorted in-place (i.e., the input arrays are mutated).\n*\n* @private\n* @param {Array} x - first array\n* @param {Array} y - second array\n* @returns {void}\n*\n* @example\n* var x = [ -4, -2, 3, 1 ];\n* var y = [ 0, 1, 2, 3 ];\n*\n* sort2ins( x, y );\n*\n* console.log( x );\n* // => [ 1, -2, 3, -4 ]\n*\n* console.log( y );\n* // => [ 3, 1, 2, 0 ]\n*/\nfunction sort2ins( x, y ) {\n\tvar avx;\n\tvar aux;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tix = 1;\n\tiy = 1;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < x.length; i++ ) {\n\t\tvx = x[ ix ];\n\t\tavx = ( vx < 0 ) ? -vx : vx;\n\n\t\tvy = y[ iy ];\n\n\t\tjx = ix - 1;\n\t\tjy = iy - 1;\n\n\t\t// Shift all larger values to the left of the current element to the right...\n\t\twhile ( jx >= 0 ) {\n\t\t\tux = x[ jx ];\n\t\t\taux = ( ux < 0 ) ? -ux : ux;\n\t\t\tif ( aux <= avx ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[ jx+1 ] = ux;\n\t\t\ty[ jy+1 ] = y[ jy ];\n\t\t\tjx -= 1;\n\t\t\tjy -= 1;\n\t\t}\n\t\tx[ jx+1 ] = vx;\n\t\ty[ jy+1 ] = vy;\n\t\tix += 1;\n\t\tiy += 1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bytesPerElement from './../../../base/bytes-per-element';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns a loop block size for multi-dimensional array tiled loops.\n*\n* @param {string} dtypeX - first input array data type\n* @param {string} dtypeY - second input array data type\n* @param {string} dtypeZ - output array data type\n* @returns {integer} block size (in units of elements)\n*\n* @example\n* var bsize = binaryBlockSize( 'float64', 'float64', 'float64' );\n* // returns <number>\n*/\nfunction binaryBlockSize( dtypeX, dtypeY, dtypeZ ) {\n\tvar nbx;\n\tvar nby;\n\tvar nbz;\n\n\tnbx = bytesPerElement( dtypeX );\n\tnby = bytesPerElement( dtypeY );\n\tnbz = bytesPerElement( dtypeZ );\n\tif ( nbx === null || nby === null || nbz === null ) { // e.g., \"generic\" arrays\n\t\treturn defaults.BLOCK_SIZE_IN_ELEMENTS;\n\t}\n\tif ( nbx > nby && nbx > nbz ) {\n\t\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nbx )|0; // asm type annotation\n\t}\n\tif ( nby > nbz ) {\n\t\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nby )|0; // asm type annotation\n\t}\n\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nbz )|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default binaryBlockSize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string/format';\nimport trunc from '@stdlib/math/base/special/trunc';\nimport abs from '@stdlib/math/base/special/abs';\n\n\n// MAIN //\n\n/**\n* Converts a linear index in an underlying data buffer to a linear index in an array view.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - location of the first indexed value **based** on the stride array\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {integer} idx - linear index in an underlying data buffer\n* @param {string} mode - specifies how to handle a linear index which exceeds array dimensions\n* @throws {RangeError} linear index must not exceed array dimensions\n* @returns {NonNegativeInteger} linear index in an array view\n*\n* @example\n* var shape = [ 3, 3 ];\n* var strides = [ -3, 1 ];\n* var offset = 6;\n* var order = 'row-major';\n* var mode = 'throw';\n*\n* var ind = bind2vind( shape, strides, offset, order, 7, mode );\n* // returns 1\n*/\nfunction bind2vind( shape, strides, offset, order, idx, mode ) {\n\tvar ndims;\n\tvar len;\n\tvar ind;\n\tvar k;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\tif ( mode === 'clamp' ) {\n\t\tif ( idx < 0 ) {\n\t\t\tidx = 0;\n\t\t} else if ( idx >= len ) {\n\t\t\tidx = len - 1;\n\t\t}\n\t} else if ( mode === 'wrap' ) {\n\t\tif ( idx < 0 ) {\n\t\t\tidx += len; // slight optimization to avoid modulo arithmetic when |idx| <= len\n\t\t\tif ( idx < 0 ) {\n\t\t\t\tidx %= len;\n\t\t\t\tif ( idx !== 0 ) {\n\t\t\t\t\tidx += len;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( idx >= len ) {\n\t\t\tidx -= len; // slight optimization to avoid modulo arithmetic when len < idx <= 2*len\n\t\t\tif ( idx >= len ) {\n\t\t\t\tidx %= len;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( mode === 'normalize' && idx < 0 ) {\n\t\t\tidx += len;\n\t\t}\n\t\tif ( idx < 0 || idx >= len ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Linear index must not exceed array dimensions. Number of array elements: `%u`. Value: `%d`.', len, idx ) );\n\t\t}\n\t}\n\t// The approach which follows is to resolve a buffer index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the array view (i.e., where all strides are positive and offset is 0)...\n\tind = 0;\n\tif ( order === 'column-major' ) {\n\t\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\t\ts = strides[ i ];\n\t\t\tif ( s < 0 ) {\n\t\t\t\tk = trunc( idx/s );\n\t\t\t\tidx -= k * s;\n\t\t\t\tk += shape[ i ] - 1;\n\t\t\t} else {\n\t\t\t\tk = trunc( idx/s );\n\t\t\t\tidx -= k * s;\n\t\t\t}\n\t\t\tind += k * abs( s );\n\t\t}\n\t\treturn ind;\n\t}\n\t// Case: row-major\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\ts = strides[ i ];\n\t\tif ( s < 0 ) {\n\t\t\tk = trunc( idx/s );\n\t\t\tidx -= k * s;\n\t\t\tk += shape[ i ] - 1;\n\t\t} else {\n\t\t\tk = trunc( idx/s );\n\t\t\tidx -= k * s;\n\t\t}\n\t\tind += k * abs( s );\n\t}\n\treturn ind;\n}\n\n\n// EXPORTS //\n\nexport default bind2vind;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array/base/assert/is-accessor-array';\nimport accessorSetter from '@stdlib/array/base/accessor-setter';\nimport setter from '@stdlib/array/base/setter';\nimport zeros from '@stdlib/array/base/zeros';\nimport buffer from './../../../base/buffer';\nimport ndarray from './../../../base/ctor';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Broadcasts a scalar value to an ndarray having a specified shape.\n*\n* @param {*} value - scalar value\n* @param {string} dtype - output array data type\n* @param {NonNegativeIntegerArray} shape - output array shape\n* @param {string} order - memory layout (either row-major or column-major)\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var x = broadcastScalar( 1.0, 'float64', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get( 0, 1 );\n* // returns 1.0\n*/\nfunction broadcastScalar( value, dtype, shape, order ) {\n\tvar buf;\n\tvar set;\n\n\tbuf = buffer( dtype, 1 );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a recognized data type. Value: `%s`.', dtype ) );\n\t}\n\tif ( /^complex/.test( dtype ) && typeof value === 'number' ) {\n\t\tvalue = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dtype );\n\t} else {\n\t\tset = setter( dtype );\n\t}\n\tset( buf, 0, value );\n\treturn new ndarray( dtype, buf, shape, zeros( shape.length ), 0, order );\n}\n\n\n// EXPORTS //\n\nexport default broadcastScalar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Broadcasts array shapes to a single shape.\n*\n* ## Notes\n*\n* -   Two respective dimensions in two shape arrays are compatible if\n*\n*     1.  the dimensions are equal.\n*     2.  one dimension is `1`.\n*\n* -   The function returns `null` if provided incompatible shapes (i.e., shapes which cannot be broadcast with one another).\n*\n* @param {Array<NonNegativeIntegerArray>} shapes - array of shape arrays\n* @returns {(NonNegativeIntegerArray|null)} broadcast shape (or `null`)\n*\n* @example\n* var shapes = [\n*     [ 8, 1, 6, 1 ],\n*     [ 7, 1, 5 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 8, 7, 6, 5 ]\n*\n* @example\n* var shapes = [\n*     [ 5, 4 ],\n*     [ 1 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 5, 4 ]\n*\n* @example\n* var shapes = [\n*     [ 5, 4 ],\n*     [ 4 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 5, 4 ]\n*\n* @example\n* var shapes = [\n*     [ 15, 3, 5 ],\n*     [ 15, 1, 5 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 15, 3, 5 ]\n*\n* @example\n* var shapes = [\n*     [ 15, 3, 5 ],\n*     [ 3, 5 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 15, 3, 5 ]\n*\n* @example\n* var shapes = [\n*     [ 15, 3, 5 ],\n*     [ 3, 1 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 15, 3, 5 ]\n*\n* @example\n* var shapes = [\n*     [ 8, 1, 1, 6, 1 ],\n*     [ 1, 7, 1, 5 ],\n*     [ 8, 4, 1, 6, 5 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 8, 4, 7, 6, 5 ]\n*\n* @example\n* var shapes = [\n*     [ 8, 1, 1, 6, 1 ],\n*     [ 0 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 8, 1, 1, 6, 0 ]\n*\n* @example\n* var shapes = [\n*     [ 8, 1, 1, 6, 1 ],\n*     [ 8, 0, 1, 6, 1 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 8, 0, 1, 6, 1 ]\n*\n* @example\n* var shapes = [\n*     [ 8, 8, 1, 6, 1 ],\n*     [ 8, 0, 1, 6, 1 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns null\n*\n* @example\n* var shapes = [\n*     [ 8, 0, 1, 6, 1 ],\n*     [ 8, 8, 1, 6, 1 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns null\n*\n* @example\n* var shapes = [\n*     []\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns []\n*\n* @example\n* var shapes = [\n*     [],\n*     []\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns []\n*\n* @example\n* var shapes = [];\n*\n* var out = broadcastShapes( shapes );\n* // returns []\n*\n* @example\n* var shapes = [\n*     [ 3, 2, 1 ],\n*     []\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 3, 2, 1 ]\n*\n* @example\n* var shapes = [\n*     [],\n*     [ 3, 2, 1 ]\n* ];\n*\n* var out = broadcastShapes( shapes );\n* // returns [ 3, 2, 1 ]\n*/\nfunction broadcastShapes( shapes ) {\n\tvar ndims;\n\tvar out;\n\tvar dim;\n\tvar sh;\n\tvar n1;\n\tvar n2;\n\tvar d;\n\tvar M;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tM = shapes.length;\n\tout = [];\n\tif ( M === 0 ) {\n\t\treturn out;\n\t}\n\tsh = shapes[ 0 ];\n\tN = sh.length;\n\n\t// If provided a single input shape array, then the broadcast shape is input shape...\n\tif ( M === 1 ) {\n\t\t// Need to manually copy to output shape, as shapes could be array-like objects...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tout.push( sh[ i ] );\n\t\t}\n\t\treturn out;\n\t}\n\t// Determine the maximum dimensionality...\n\tndims = [ N ];\n\tfor ( i = 1; i < M; i++ ) {\n\t\tndims.push( shapes[ i ].length );\n\t\tif ( ndims[ i ] > N ) {\n\t\t\tN = ndims[ i ];\n\t\t}\n\t}\n\t// Initialize the output array...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tout.push( 0 );\n\t}\n\t// Compute the broadcast shape...\n\ti = N - 1;\n\twhile ( i >= 0 ) {\n\t\tn1 = ndims[ 0 ] - N + i;\n\t\tif ( n1 >= 0 ) {\n\t\t\tdim = sh[ n1 ];\n\t\t} else {\n\t\t\tdim = 1;\n\t\t}\n\t\tfor ( j = 1; j < M; j++ ) {\n\t\t\tn2 = ndims[ j ] - N + i;\n\t\t\tif ( n2 >= 0 ) {\n\t\t\t\td = shapes[ j ][ n2 ];\n\t\t\t} else {\n\t\t\t\td = 1;\n\t\t\t}\n\t\t\tif ( dim === 1 ) {\n\t\t\t\tdim = d;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( d === 1 || dim === d ) {\n\t\t\t\t// When either `d` is `1` or `d` equals the current output shape dimension, the current output shape dimension remains the same...\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// The current shape cannot be broadcast against one of the other shapes...\n\t\t\treturn null;\n\t\t}\n\t\tout[ i ] = dim;\n\t\ti -= 1;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default broadcastShapes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport str2enum from './../../../base/dtype-str2enum';\nimport dtype from './../../../base/buffer-dtype';\n\n\n// MAIN //\n\n/**\n* Returns the data type enumeration constant for a provided ndarray data buffer.\n*\n* @param {Collection} arr - strided array\n* @returns {(integer|null)} data type enumeration constant or null\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( 10 );\n*\n* var c = dtypeEnum( x );\n* // returns <number>\n*/\nfunction dtypeEnum( arr ) {\n\tvar dt = dtype( arr );\n\tif ( dt ) {\n\t\treturn str2enum( dt );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default dtypeEnum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping data type strings to descriptions.\n*\n* @private\n* @returns {Object} object mapping data type strings to descriptions\n*/\nfunction table() {\n\treturn {\n\t\t'binary': 'byte',\n\n\t\t'bool': 'boolean',\n\n\t\t'complex64': 'single-precision floating-point complex number',\n\t\t'complex128': 'double-precision floating-point complex number',\n\n\t\t'float16': 'half-precision floating-point number',\n\t\t'bfloat16': 'brain floating-point number',\n\t\t'float32': 'single-precision floating-point number',\n\t\t'float64': 'double-precision floating-point number',\n\t\t'float128': 'quadruple-precision floating-point number',\n\n\t\t'generic': 'generic array value',\n\n\t\t'int8': 'signed 8-bit integer',\n\t\t'int16': 'signed 16-bit integer',\n\t\t'int32': 'signed 32-bit integer',\n\t\t'int64': 'signed 64-bit integer',\n\t\t'int128': 'signed 128-bit integer',\n\t\t'int256': 'signed 256-bit integer',\n\n\t\t'uint8': 'unsigned 8-bit integer',\n\t\t'uint8c': 'unsigned 8-bit integer (clamped)',\n\t\t'uint16': 'unsigned 16-bit integer',\n\t\t'uint32': 'unsigned 32-bit integer',\n\t\t'uint64': 'unsigned 64-bit integer',\n\t\t'uint128': 'unsigned 128-bit integer',\n\t\t'uint256': 'unsigned 256-bit integer'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default table;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolve from './../../../base/dtype-resolve-str';\nimport TABLE from './table.json';\n\n\n// MAIN //\n\n/**\n* Returns the C data type associated with a provided data type string.\n*\n* @param {*} dtype - data type value\n* @returns {(string|null)} C data type\n*\n* @example\n* var out = dtype2c( 'float64' );\n* // returns 'double'\n*\n* out = dtype2c( 'generic' );\n* // returns null\n*/\nfunction dtype2c( dtype ) {\n\treturn TABLE[ resolve( dtype ) ] || null;\n}\n\n\n// EXPORTS //\n\nexport default dtype2c;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport shape2strides from './../../../base/shape2strides';\nimport strides2offset from './../../../base/strides2offset';\nimport ndarray from './../../../base/ctor';\nimport numel from './../../../base/numel';\nimport emptyArray from '@stdlib/array/empty';\nimport allocUnsafe from '@stdlib/buffer/alloc-unsafe';\n\n\n// MAIN //\n\n/**\n* Creates an uninitialized ndarray having a specified shape and data type.\n*\n* @param {string} dtype - data type\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - array order\n* @throws {TypeError} first argument must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var arr = empty( 'float32', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var sh = arr.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = arr.dtype;\n* // returns 'float32'\n*/\nfunction empty( dtype, shape, order ) {\n\tvar ndims;\n\tvar buf;\n\tvar len;\n\tvar st;\n\n\tndims = shape.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( shape );\n\t\tst = shape2strides( shape, order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tif ( dtype === 'binary' ) {\n\t\tbuf = allocUnsafe( len );\n\t} else {\n\t\tbuf = emptyArray( len, dtype );\n\t}\n\treturn new ndarray( dtype, buf, shape, st, strides2offset( shape, st ), order ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default empty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport shape2strides from './../../../base/shape2strides';\nimport strides2offset from './../../../base/strides2offset';\nimport numel from './../../../base/numel';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getOrder from './../../../base/order';\nimport emptyArray from '@stdlib/array/empty';\nimport allocUnsafe from '@stdlib/buffer/alloc-unsafe';\n\n\n// MAIN //\n\n/**\n* Creates an uninitialized ndarray having the same shape and data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @throws {TypeError} first argument must have a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* import zeros from '@stdlib/ndarray/base/zeros';\n*\n* var x = zeros( 'float32', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var y = emptyLike( x );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = y.dtype;\n* // returns 'float32'\n*/\nfunction emptyLike( x ) {\n\tvar ndims;\n\tvar len;\n\tvar buf;\n\tvar ord;\n\tvar sh;\n\tvar st;\n\tvar dt;\n\n\tdt = getDType( x );\n\tsh = getShape( x, true );\n\tord = getOrder( x );\n\n\tndims = sh.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( sh );\n\t\tst = shape2strides( sh, ord );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tif ( dt === 'binary' ) {\n\t\tbuf = allocUnsafe( len );\n\t} else {\n\t\tbuf = emptyArray( len, dt );\n\t}\n\treturn new x.constructor( dt, buf, sh, st, strides2offset( sh, st ), ord );\n}\n\n\n// EXPORTS //\n\nexport default emptyLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOffset from './../../../base/offset';\nimport getOrder from './../../../base/order';\nimport getData from './../../../base/data-buffer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Expands the shape of an array by inserting a new dimension of size one at a specified axis.\n*\n* ## Notes\n*\n* -   A provided axis must reside on the interval `[-N-1, N]`, where `N` is the rank (i.e., number of dimensions) of the provided input array. If provided a negative `axis`, the axis position at which to insert a singleton dimension is computed as `N + axis + 1`. Hence, if provided `-1`, the resolved axis position is `N` (i.e., a singleton dimension is appended to the input array).\n*\n* @param {ndarray} x - input array\n* @param {integer} axis - axis at which to insert a singleton dimension\n* @throws {RangeError} must provide a valid axis\n* @returns {ndarray} output array\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = expandDimensions( x, 1 );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 2, 1, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 3\n*\n* v = y.get( 1, 0, 1 );\n* // returns 4\n*/\nfunction expandDimensions( x, axis ) {\n\tvar strides;\n\tvar shape;\n\tvar ord;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar i;\n\n\tsh = getShape( x, false );\n\tst = getStrides( x, false );\n\tord = getOrder( x );\n\tN = sh.length;\n\n\tstrides = [];\n\tshape = [];\n\n\tif ( axis < 0 ) {\n\t\tif ( axis < -N-1 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Specified axis is out-of-bounds. Must be on the interval: [-%u-1, %u]. Value: `%d`.', N, N, axis ) );\n\t\t}\n\t\taxis += N + 1;\n\t} else if ( axis > N ) {\n\t\tthrow new RangeError( format( 'invalid argument. Specified axis is out-of-bounds. Must be on the interval: [-%u-1, %u]. Value: `%d`.', N, N, axis ) );\n\t}\n\tif ( axis === 0 ) {\n\t\t// Prepend singleton dimension...\n\t\tshape.push( 1 );\n\t\tstrides.push( st[ 0 ] );\n\n\t\t// Copy remaining dimensions...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tshape.push( sh[ i ] );\n\t\t\tstrides.push( st[ i ] );\n\t\t}\n\t} else if ( axis === N ) {\n\t\t// Copy dimensions...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tshape.push( sh[ i ] );\n\t\t\tstrides.push( st[ i ] );\n\t\t}\n\t\t// Append singleton dimension...\n\t\tshape.push( 1 );\n\t\tstrides.push( st[ N-1 ] );\n\t} else {\n\t\t// Insert a singleton dimension...\n\t\tfor ( i = 0; i < N+1; i++ ) {\n\t\t\tif ( i === axis ) {\n\t\t\t\tshape.push( 1 );\n\t\t\t\tif ( ord === 'row-major' ) {\n\t\t\t\t\tstrides.push( st[ i-1 ] );\n\t\t\t\t} else { // ord === 'column-major'\n\t\t\t\t\tstrides.push( st[ i ] );\n\t\t\t\t}\n\t\t\t} else if ( i < axis ) {\n\t\t\t\tshape.push( sh[ i ] );\n\t\t\t\tstrides.push( st[ i ] );\n\t\t\t} else { // i > axis\n\t\t\t\tshape.push( sh[ i-1 ] );\n\t\t\t\tstrides.push( st[ i-1 ] );\n\t\t\t}\n\t\t}\n\t}\n\tif ( isReadOnly( x ) ) {\n\t\t// If provided a read-only view, the returned array should also be read-only...\n\t\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), ord, { // eslint-disable-line max-len\n\t\t\t'readonly': true\n\t\t});\n\t}\n\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), ord ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default expandDimensions;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MultiSlice from '@stdlib/slice/multi';\nimport reverseDimension from './../../../base/reverse-dimension';\nimport slice from './../../../base/slice';\nimport ndims from './../../../base/ndims';\n\n\n// MAIN //\n\n/**\n* Returns a view of an input ndarray in which the order of elements along the last dimension is reversed.\n*\n* @param {ndarray} x - input array\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = fliplr( x, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 2.0, 1.0 ], [ 4.0, 3.0 ], [ 6.0, 5.0 ] ]\n*/\nfunction fliplr( x, writable ) {\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( ndims( x ) === 0 ) {\n\t\t// Nothing to reverse so just return a new view:\n\t\treturn slice( x, new MultiSlice(), true, writable );\n\t}\n\treturn reverseDimension( x, -1, writable );\n}\n\n\n// EXPORTS //\n\nexport default fliplr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MultiSlice from '@stdlib/slice/multi';\nimport reverseDimension from './../../../base/reverse-dimension';\nimport slice from './../../../base/slice';\nimport ndims from './../../../base/ndims';\n\n\n// MAIN //\n\n/**\n* Returns a view of an input ndarray in which the order of elements along the second-to-last dimension is reversed.\n*\n* @param {ndarray} x - input array\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = flipud( x, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 5.0, 6.0 ], [ 3.0, 4.0 ], [ 1.0, 2.0 ] ]\n*/\nfunction flipud( x, writable ) {\n\tvar N = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\t// Nothing to reverse, so just return a new view:\n\t\treturn slice( x, new MultiSlice(), true, writable );\n\t}\n\t// Check whether we were provided a one-dimensional array...\n\tif ( N === 1 ) {\n\t\t// No second-to-last dimension to reverse, so just return a new view:\n\t\treturn slice( x, new MultiSlice( null ), true, writable );\n\t}\n\treturn reverseDimension( x, -2, writable );\n}\n\n\n// EXPORTS //\n\nexport default flipud;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array/base/assert/is-accessor-array';\nimport accessorSetter from '@stdlib/array/base/accessor-setter';\nimport setter from '@stdlib/array/base/setter';\nimport buffer from './../../../base/buffer';\nimport ndarray from './../../../base/ctor';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a zero-dimensional ndarray containing a provided scalar value.\n*\n* @param {*} value - scalar value\n* @param {string} dtype - output array data type\n* @param {string} order - memory layout (either 'row-major' or 'column-major')\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var x = scalar2ndarray( 1.0, 'float64', 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get();\n* // returns 1.0\n*/\nfunction scalar2ndarray( value, dtype, order ) {\n\tvar buf;\n\tvar set;\n\n\tbuf = buffer( dtype, 1 );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a recognized data type. Value: `%s`.', dtype ) );\n\t}\n\tif ( /^complex/.test( dtype ) && typeof value === 'number' ) {\n\t\tvalue = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dtype );\n\t} else {\n\t\tset = setter( dtype );\n\t}\n\tset( buf, 0, value );\n\treturn new ndarray( dtype, buf, [], [ 0 ], 0, order );\n}\n\n\n// EXPORTS //\n\nexport default scalar2ndarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the maximum linear index in an underlying data buffer accessible to an array view.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {NonNegativeInteger} linear index\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 10, 1 ];\n* var offset = 0;\n*\n* var idx = maxViewBufferIndex( shape, strides, offset );\n* // returns 99\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -10, -1 ];\n* var offset = 99;\n*\n* var idx = maxViewBufferIndex( shape, strides, offset );\n* // returns 99\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 1, 10 ];\n* var offset = 0;\n*\n* var idx = maxViewBufferIndex( shape, strides, offset );\n* // returns 99\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -1, -10 ];\n* var offset = 99;\n*\n* var idx = maxViewBufferIndex( shape, strides, offset );\n* // returns 99\n*/\nfunction maxViewBufferIndex( shape, strides, offset ) {\n\tvar ndims;\n\tvar idx;\n\tvar i;\n\n\tndims = shape.length;\n\tidx = offset;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( shape[ i ] === 0 ) {\n\t\t\treturn offset;\n\t\t}\n\t\tif ( strides[ i ] > 0 ) {\n\t\t\tidx += strides[ i ] * ( shape[ i ] - 1 );\n\t\t}\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default maxViewBufferIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport broadcast from './../../../base/broadcast-array';\nimport getShape from './../../../base/shape';\n\n\n// MAIN //\n\n/**\n* Broadcasts an ndarray to a specified shape if and only if the specified shape differs from the provided ndarray's shape.\n*\n* ## Notes\n*\n* -   If a provided ndarray has the same shape as the specified shape, the function returns the provided ndarray.\n* -   If a provided ndarray has a different (broadcast compatible) shape than the specified shape, the function returns a new (base) ndarray view of the provided ndarray's data. The view is typically **not** contiguous. As more than one element of a returned view may refer to the same memory location, writing to the view may affect multiple elements. If you need to write to the returned array, copy the array before performing operations which may mutate elements.\n*\n* @param {ndarray} arr - input array\n* @param {NonNegativeIntegerArray} shape - desired shape\n* @throws {Error} input array cannot have more dimensions than the desired shape\n* @throws {Error} input array dimension sizes must be `1` or equal to the corresponding dimension in the provided shape\n* @throws {Error} input array and desired shape must be broadcast compatible\n* @returns {ndarray} broadcasted array\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = maybeBroadcastArray( x, [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 1\n*\n* v = y.get( 1, 1, 0 );\n* // returns 3\n*\n* v = y.get( 2, 0, 0 );\n* // returns 1\n*\n* v = y.get( 2, 1, 1 );\n* // returns 4\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var y = maybeBroadcastArray( x, [ 3, 2 ] );\n* // throws <Error>\n*/\nfunction maybeBroadcastArray( arr, shape ) {\n\tvar sh;\n\tvar N;\n\tvar i;\n\n\tN = shape.length;\n\tsh = getShape( arr, false );\n\n\t// Check whether we need to broadcast the input array...\n\tif ( sh.length === N ) {\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t// Check whether dimensions match...\n\t\t\tif ( sh[ i ] !== shape[ i ] ) {\n\t\t\t\t// We found a mismatched dimension; delegate to `broadcast` to ensure that the input array is broadcast compatible with the desired array shape...\n\t\t\t\treturn broadcast( arr, shape );\n\t\t\t}\n\t\t}\n\t\treturn arr;\n\t}\n\t// If we are provided an array having a different rank (i.e., number of dimensions) than the desired shape, assume we need to broadcast, delegating to `broadcast` to ensure that the input array is broadcast compatible with the desired array shape...\n\treturn broadcast( arr, shape );\n}\n\n\n// EXPORTS //\n\nexport default maybeBroadcastArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport dtypes2signatures from './../../../base/dtypes2signatures';\n\n\n// MAIN //\n\n/**\n* Defines non-enumerable read-only properties which expose ndarray function meta data.\n*\n* @param {Object} meta - function meta data\n* @param {NonNegativeInteger} meta.nargs - total number of arguments\n* @param {NonNegativeInteger} meta.nin - total number of input arrays\n* @param {NonNegativeInteger} meta.nout - total number of output arrays\n* @param {ArrayLikeObject} dtypes - list of ndarray data types\n* @param {(Function|Object)} obj - object on which to define properties\n* @returns {(Function|Object)} object on which properties were defined\n*\n* @example\n* // Define ndarray function meta data:\n* var meta = {\n*     'nargs': 2,\n*     'nin': 1,\n*     'nout': 1\n* };\n*\n* // Define the list of ndarray data types:\n* var dtypes = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n*\n* // Define an object on which to set the properties:\n* var obj = {};\n*\n* // Set the properties:\n* setProps( meta, dtypes, obj );\n*\n* @example\n* // Define ndarray function meta data:\n* var meta = {\n*     'nargs': 2,\n*     'nin': 1,\n*     'nout': 1\n* };\n*\n* // Define the list of ndarray data types:\n* var dtypes = [\n*     'float64', 'float64',\n*     'float32', 'float32',\n*     'generic', 'generic'\n* ];\n*\n* // Define a function on which to set the properties:\n* function abs( x, y ) {\n*     // Implementation...\n* }\n*\n* // Set the properties:\n* setProps( meta, dtypes, abs );\n*/\nfunction setProps( meta, dtypes, obj ) {\n\t// Define the number of arguments:\n\tsetReadOnly( obj, 'nargs', meta.nargs );\n\n\t// Define the number of input arrays:\n\tsetReadOnly( obj, 'nin', meta.nin );\n\n\t// Define the number of output arrays:\n\tsetReadOnly( obj, 'nout', meta.nout );\n\n\t// Define a read-only accessor for listing a function's supported array data types:\n\tsetReadOnlyAccessor( obj, 'types', types );\n\n\treturn obj;\n\n\t/**\n\t* Returns a list of array type signatures.\n\t*\n\t* @private\n\t* @returns {StringArray} list of signatures\n\t*/\n\tfunction types() {\n\t\treturn dtypes2signatures( dtypes, meta.nin, meta.nout );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setProps;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the minimum linear index in an underlying data buffer accessible to an array view.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {NonNegativeInteger} linear index\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 10, 1 ];\n* var offset = 10;\n*\n* var idx = minViewBufferIndex( shape, strides, offset );\n* // returns 10\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -10, -1 ];\n* var offset = 109;\n*\n* var idx = minViewBufferIndex( shape, strides, offset );\n* // returns 10\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 1, 10 ];\n* var offset = 10;\n*\n* var idx = minViewBufferIndex( shape, strides, offset );\n* // returns 10\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -1, -10 ];\n* var offset = 109;\n*\n* var idx = minViewBufferIndex( shape, strides, offset );\n* // returns 10\n*/\nfunction minViewBufferIndex( shape, strides, offset ) {\n\tvar ndims;\n\tvar idx;\n\tvar i;\n\n\tndims = shape.length;\n\tidx = offset;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( shape[ i ] === 0 ) {\n\t\t\treturn offset;\n\t\t}\n\t\tif ( strides[ i ] < 0 ) {\n\t\t\tidx += strides[ i ] * ( shape[ i ] - 1 ); // decrements the index\n\t\t}\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default minViewBufferIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the number of non-singleton dimensions.\n*\n* ## Notes\n*\n* -   A singleton dimension is a dimension whose size is equal to `1`.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {NonNegativeInteger} number of non-singleton dimensions\n*\n* @example\n* var shape = [ 2, 2, 1 ];\n*\n* var n = nonsingletonDimensions( shape );\n* // returns 2\n*\n* @example\n* var shape = [ 1, 1, 1 ];\n*\n* var n = nonsingletonDimensions( shape );\n* // returns 0\n*/\nfunction nonsingletonDimensions( shape ) {\n\tvar cnt;\n\tvar i;\n\n\tcnt = 0;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tif ( shape[ i ] !== 1 ) {\n\t\t\tcnt += 1;\n\t\t}\n\t}\n\treturn cnt;\n}\n\n\n// EXPORTS //\n\nexport default nonsingletonDimensions;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../base/numel';\nimport vind2bind from './../../../base/vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function fcn() {\n*     return new Complex64( 10.0, -10.0 );\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Complex64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the nullary function:\n* nullarynd( x, fcn );\n*\n* var v = x.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns -10.0\n*/\nfunction nullarynd( x, fcn ) {\n\tvar xbuf;\n\tvar ordx;\n\tvar len;\n\tvar set;\n\tvar sh;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache a reference to the output ndarray data buffer:\n\txbuf = x.data;\n\n\t// Cache a reference to the stride array:\n\tsx = x.strides;\n\n\t// Cache the index of the first indexed element:\n\tox = x.offset;\n\n\t// Cache the array order:\n\tordx = x.order;\n\n\t// Cache accessor:\n\tset = x.accessors[ 1 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tset( xbuf, ix, fcn() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../base/numel';\nimport vind2bind from './../../../base/vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( 8 );\n*\n* // Define the shape of the output array:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create the output ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Apply the nullary function:\n* nullarynd( x, fcn );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ]\n*/\nfunction nullarynd( x, fcn ) {\n\tvar xbuf;\n\tvar ordx;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar ox;\n\tvar ix;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache a reference to the output ndarray data buffer:\n\txbuf = x.data;\n\n\t// Cache a reference to the stride array:\n\tsx = x.strides;\n\n\t// Cache the index of the first indexed element:\n\tox = x.offset;\n\n\t// Cache the array order:\n\tordx = x.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\txbuf[ ix ] = fcn();\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/output-policy-enum2str';\nimport str2enum from './../../../base/output-policy-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a supported ndarray data type policy value.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `SAME == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {*} policy - policy value\n* @returns {(integer|null)} enumeration constant or null\n*\n* @example\n* var v = resolve( 'same' );\n* // returns <number>\n*/\nfunction resolve( policy ) {\n\tvar t = ( typeof policy );\n\tif ( t === 'number' ) {\n\t\treturn ( enum2str( policy ) ) ? policy : null;\n\t}\n\tif ( t === 'string' ) {\n\t\treturn str2enum( policy );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from './../../../base/output-policy-enum2str';\nimport str2enum from './../../../base/output-policy-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the policy string associated with a supported ndarray data type policy value.\n*\n* @param {*} policy - policy value\n* @returns {(string|null)} policy string or null\n*\n* @example\n* import str2enum from '@stdlib/ndarray/base/output-policy-str2enum';\n*\n* var v = resolve( str2enum( 'same' ) );\n* // returns 'same'\n*/\nfunction resolve( policy ) {\n\tvar t = ( typeof policy );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( policy ) === null ) ? null : policy;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( policy );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOffset from './../../../base/offset';\nimport getOrder from './../../../base/order';\nimport getData from './../../../base/data-buffer';\n\n\n// MAIN //\n\n/**\n* Returns an array with a specified number of prepended singleton dimensions.\n*\n* @param {ndarray} x - input array\n* @param {NonNegativeInteger} n - number of singleton dimensions to prepend\n* @returns {ndarray} output array\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = prependSingletonDimensions( x, 3 );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 1, 1, 1, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 0, 0, 0, 1, 0 );\n* // returns 3\n*\n* v = y.get( 0, 0, 0, 1, 1 );\n* // returns 4\n*/\nfunction prependSingletonDimensions( x, n ) { // eslint-disable-line id-length\n\tvar strides;\n\tvar shape;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar i;\n\n\tsh = getShape( x, false );\n\tst = getStrides( x, false );\n\tN = sh.length;\n\n\tstrides = [];\n\tshape = [];\n\n\t// Prepend singleton dimensions...\n\tfor ( i = 0; i < n; i++ ) {\n\t\tshape.push( 1 );\n\t\tstrides.push( st[ 0 ] );\n\t}\n\t// Copy remaining dimensions...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tshape.push( sh[ i ] );\n\t\tstrides.push( st[ i ] );\n\t}\n\tif ( isReadOnly( x ) ) {\n\t\t// If provided a read-only view, the returned array should also be read-only...\n\t\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), getOrder( x ), { // eslint-disable-line max-len\n\t\t\t'readonly': true\n\t\t});\n\t}\n\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), getOrder( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default prependSingletonDimensions;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOffset from './../../../base/offset';\nimport getOrder from './../../../base/order';\nimport getData from './../../../base/data-buffer';\n\n\n// MAIN //\n\n/**\n* Returns an array without singleton dimensions.\n*\n* ## Notes\n*\n* -   If a provided ndarray does not have any singleton dimensions, the function returns the provided ndarray unchanged.\n* -   If a provided ndarray does have singleton dimensions, the function returns a new ndarray view.\n*\n* @param {ndarray} x - input array\n* @returns {ndarray} squeezed array\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ], {\n*     'ndmin': 5\n* });\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 1, 1, 1, 2, 2 ]\n*\n* var y = removeSingletonDimensions( x );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 2, 2 ]\n*\n* var v = y.get( 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0 );\n* // returns 3\n*\n* v = y.get( 1, 1 );\n* // returns 4\n*/\nfunction removeSingletonDimensions( x ) {\n\tvar strides;\n\tvar shape;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar i;\n\n\tsh = getShape( x, false );\n\tst = getStrides( x, false );\n\tN = sh.length;\n\n\tstrides = [];\n\tshape = [];\n\n\t// Check for singleton dimensions...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( sh[ i ] !== 1 ) {\n\t\t\tshape.push( sh[ i ] );\n\t\t\tstrides.push( st[ i ] );\n\t\t}\n\t}\n\tif ( shape.length === N ) {\n\t\t// We did not find any singleton dimensions...\n\t\treturn x;\n\t}\n\tif ( isReadOnly( x ) ) {\n\t\t// If provided a read-only view, the returned array should also be read-only...\n\t\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), getOrder( x ), { // eslint-disable-line max-len\n\t\t\t'readonly': true\n\t\t});\n\t}\n\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), getOrder( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default removeSingletonDimensions;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport Slice from '@stdlib/slice/ctor';\nimport filled from '@stdlib/array/base/filled';\nimport slice from './../../../base/slice';\nimport ndims from './../../../base/ndims';\n\n\n// MAIN //\n\n/**\n* Returns a view of an input ndarray in which the order of elements along each dimension is reversed.\n*\n* @param {ndarray} x - input array\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = reverse( x, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ]\n*/\nfunction reverse( x, writable ) {\n\tvar args = filled( new Slice( null, null, -1 ), ndims( x ) );\n\treturn slice( x, args2multislice( args ), true, writable );\n}\n\n\n// EXPORTS //\n\nexport default reverse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the number of singleton dimensions.\n*\n* ## Notes\n*\n* -   A singleton dimension is a dimension whose size is equal to `1`.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {NonNegativeInteger} number of singleton dimensions\n*\n* @example\n* var shape = [ 2, 1, 1 ];\n*\n* var n = singletonDimensions( shape );\n* // returns 2\n*\n* @example\n* var shape = [ 2, 2, 2 ];\n*\n* var n = singletonDimensions( shape );\n* // returns 0\n*/\nfunction singletonDimensions( shape ) {\n\tvar cnt;\n\tvar i;\n\n\tcnt = 0;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tif ( shape[ i ] === 1 ) {\n\t\t\tcnt += 1;\n\t\t}\n\t}\n\treturn cnt;\n}\n\n\n// EXPORTS //\n\nexport default singletonDimensions;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2offset from './../../../base/strides2offset';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getStrides from './../../../base/strides';\nimport getOrder from './../../../base/order';\nimport getData from './../../../base/data-buffer';\n\n\n// MAIN //\n\n/**\n* Transpose a matrix (or a stack of matrices).\n*\n* @param {ndarray} x - input array\n* @throws {Error} must provide an array with two or more dimensions\n* @returns {ndarray} ndarray\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 2, 3 ]\n*\n* var y = transpose( x );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* var bool = ( x.data === y.data );\n* // returns true\n*\n* bool = ( x.get( 0, 1 ) === y.get( 1, 0 ) );\n* // returns true\n*/\nfunction transpose( x ) {\n\tvar tmp;\n\tvar sh;\n\tvar st;\n\tvar N;\n\n\tsh = getShape( x, true );\n\tN = sh.length;\n\tif ( N < 2 ) {\n\t\tthrow new Error( 'invalid argument. Must provide an ndarray having two or more dimensions.' );\n\t}\n\tst = getStrides( x, true );\n\n\ttmp = sh[ N-2 ];\n\tsh[ N-2 ] = sh[ N-1 ];\n\tsh[ N-1 ] = tmp;\n\n\ttmp = st[ N-2 ];\n\tst[ N-2 ] = st[ N-1 ];\n\tst[ N-1 ] = tmp;\n\n\t// FIXME: handling of offset seems incorrect. Should also handle READ-ONLY arrays.\n\treturn new x.constructor( getDType( x ), getData( x ), sh, st, strides2offset( sh, st ), getOrder( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default transpose;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../base/numel';\nimport vind2bind from './../../../base/vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an n-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unarynd( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unarynd( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar get;\n\tvar set;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../base/numel';\nimport vind2bind from './../../../base/vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an n-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unarynd( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0 ]\n*/\nfunction unarynd( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../base/numel';\nimport vind2bind from './../../../base/vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from an n-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import cidentityf from '@stdlib/math/base/special/cidentityf';\n* import Complex64Array from '@stdlib/array/complex64';\n* import Complex64 from '@stdlib/complex/float32';\n* import realf from '@stdlib/complex/realf';\n* import imagf from '@stdlib/complex/imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unarynd( x, y, scale, cidentityf );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unarynd( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar get;\n\tvar set;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, [ ix, iy ], [ x, y ] );\n\t\tif ( v !== void 0 ) {\n\t\t\tset( ybuf, iy, fcn( v ) );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from './../../../base/numel';\nimport vind2bind from './../../../base/vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from an n-dimensional input ndarray according to a callback function and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unarynd( x, y, scale, accessor );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 40.0, 60.0, 120.0, 140.0 ]\n*/\nfunction unarynd( x, y, fcn, clbk, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tv = clbk.call( thisArg, xbuf[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\tif ( v !== void 0 ) {\n\t\t\tybuf[ iy ] = fcn( v );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport shape2strides from './../../../base/shape2strides';\nimport strides2offset from './../../../base/strides2offset';\nimport buffer from './../../../base/buffer';\nimport format from '@stdlib/string/format';\nimport ndarray from './../../../base/ctor';\nimport numel from './../../../base/numel';\n\n\n// MAIN //\n\n/**\n* Creates a zero-filled ndarray having a specified shape and data type.\n*\n* @param {string} dtype - data type\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - array order\n* @throws {TypeError} first argument must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var arr = zeros( 'float32', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var sh = arr.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = arr.dtype;\n* // returns 'float32'\n*/\nfunction zeros( dtype, shape, order ) {\n\tvar ndims;\n\tvar buf;\n\tvar len;\n\tvar st;\n\n\tndims = shape.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( shape );\n\t\tst = shape2strides( shape, order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tbuf = buffer( dtype, len );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a recognized data type. Value: `%s`.', dtype ) );\n\t}\n\n\treturn new ndarray( dtype, buf, shape, st, strides2offset( shape, st ), order ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport shape2strides from './../../../base/shape2strides';\nimport strides2offset from './../../../base/strides2offset';\nimport buffer from './../../../base/buffer';\nimport numel from './../../../base/numel';\nimport getDType from './../../../base/dtype';\nimport getShape from './../../../base/shape';\nimport getOrder from './../../../base/order';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Creates a zero-filled ndarray having the same shape and data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @throws {TypeError} first argument must have a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* import zeros from '@stdlib/ndarray/base/zeros';\n*\n* var x = zeros( 'float32', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var y = zerosLike( x );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = y.dtype;\n* // returns 'float32'\n*/\nfunction zerosLike( x ) {\n\tvar ndims;\n\tvar len;\n\tvar buf;\n\tvar ord;\n\tvar sh;\n\tvar st;\n\tvar dt;\n\n\tdt = getDType( x );\n\tsh = getShape( x, true );\n\tord = getOrder( x );\n\n\tndims = sh.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( sh );\n\t\tst = shape2strides( sh, ord );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tbuf = buffer( dt, len );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a recognized data type. Value: `%s`.', dt ) );\n\t}\n\treturn new x.constructor( dt, buf, sh, st, strides2offset( sh, st ), ord );\n}\n\n\n// EXPORTS //\n\nexport default zerosLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport isArrayLike from '@stdlib/assert/is-array-like';\nimport shape2strides from './../../base/shape2strides';\nimport strides2offset from './../../base/strides2offset';\nimport emptyArray from '@stdlib/array/empty';\nimport allocUnsafe from '@stdlib/buffer/alloc-unsafe';\nimport numel from './../../base/numel';\nimport ndarray from './../../ctor';\nimport defaults from './../../defaults';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar DTYPE = defaults.get( 'dtypes.default' );\nvar ORDER = defaults.get( 'order' );\n\n\n// MAIN //\n\n/**\n* Creates an uninitialized ndarray having a specified shape and data type.\n*\n* @param {(NonNegativeIntegerArray|NonNegativeInteger)} shape - array shape\n* @param {Options} [options] - options\n* @param {string} [options.dtype='float64'] - data type\n* @param {string} [options.order='row-major'] - array order\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @throws {TypeError} first argument must be either a nonnegative integer or an array of nonnegative integers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} `dtype` option must be a recognized data type\n* @throws {TypeError} `order` option must be a recognized array order\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} ndarray\n*\n* @example\n* var arr = empty( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var sh = arr.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = arr.dtype;\n* // returns 'float64'\n*/\nfunction empty( shape ) {\n\tvar options;\n\tvar dtype;\n\tvar order;\n\tvar ndims;\n\tvar opts;\n\tvar buf;\n\tvar len;\n\tvar st;\n\tvar sh;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\tdtype = options.dtype;\n\t\t} else {\n\t\t\tdtype = DTYPE;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\torder = options.order;\n\t\t} else {\n\t\t\torder = ORDER;\n\t\t}\n\t\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\t\topts.mode = options.mode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\t\topts.submode = options.submode;\n\t\t}\n\t} else {\n\t\tdtype = DTYPE;\n\t\torder = ORDER;\n\t}\n\tif ( typeof shape === 'number' ) {\n\t\tsh = [ shape ];\n\t} else if ( isArrayLike( shape ) ) {\n\t\tsh = shape;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a nonnegative integer or an array of nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tndims = sh.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( sh );\n\t\tif ( len !== len || len < 0 ) {\n\t\t\t// We should only get here if we've been provided an invalid shape (e.g., an array containing negative integers, etc)...\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a nonnegative integer or an array of nonnegative integers. Value: `%s`.', shape ) );\n\t\t}\n\t\tst = shape2strides( sh, order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tif ( dtype === 'binary' ) {\n\t\tbuf = allocUnsafe( len );\n\t} else {\n\t\tbuf = emptyArray( len, dtype );\n\t}\n\treturn new ndarray( dtype, buf, sh, st, strides2offset( sh, st ), order, opts ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default empty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert/is-nonnegative-integer-array';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport shape2strides from './../../base/shape2strides';\nimport strides2offset from './../../base/strides2offset';\nimport numel from './../../base/numel';\nimport getDType from './../../dtype';\nimport getShape from './../../shape';\nimport getOrder from './../../order';\nimport ndarray from './../../ctor';\nimport emptyArray from '@stdlib/array/empty';\nimport allocUnsafe from '@stdlib/buffer/alloc-unsafe';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Creates an uninitialized ndarray having the same shape and data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type (overrides the input array's inferred data type)\n* @param {string} [options.order] - specifies whether the output array should be 'row-major' (C-style) or 'column-major' (Fortran-style) (overrides the input array's inferred order)\n* @param {(NonNegativeIntegerArray|NonNegativeInteger)} [options.shape] - output array shape (overrides the input array's inferred shape)\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @throws {TypeError} first argument must have a recognized data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} `dtype` option must be a supported ndarray data type\n* @throws {TypeError} `order` option must be a supported order\n* @throws {TypeError} `shape` option must be either a nonnegative integer or an array of nonnegative integers\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} ndarray\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var x = zeros( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var y = emptyLike( x );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = y.dtype;\n* // returns 'float64'\n*/\nfunction emptyLike( x ) {\n\tvar options;\n\tvar dtype;\n\tvar order;\n\tvar ndims;\n\tvar opts;\n\tvar buf;\n\tvar len;\n\tvar st;\n\tvar sh;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\tdtype = options.dtype;\n\t\t} else {\n\t\t\tdtype = getDType( x );\n\t\t}\n\t\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\t\tsh = options.shape;\n\t\t\tif ( typeof sh === 'number' ) {\n\t\t\t\tsh = [ sh ];\n\t\t\t}\n\t\t\tif ( !isNonNegativeIntegerArray( sh ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer or an array of nonnegative integers. Option: `%s`.', 'shape', sh ) );\n\t\t\t}\n\t\t} else {\n\t\t\tsh = getShape( x );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\torder = options.order;\n\t\t} else {\n\t\t\torder = getOrder( x );\n\t\t}\n\t\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\t\topts.mode = options.mode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\t\topts.submode = options.submode;\n\t\t}\n\t} else {\n\t\tdtype = getDType( x );\n\t\tsh = getShape( x );\n\t\torder = getOrder( x );\n\t}\n\tndims = sh.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( sh );\n\t\tst = shape2strides( sh, order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tif ( dtype === 'binary' ) {\n\t\tbuf = allocUnsafe( len );\n\t} else {\n\t\tbuf = emptyArray( len, dtype );\n\t}\n\treturn new ndarray( dtype, buf, sh, st, strides2offset( sh, st ), order, opts ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default emptyLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nexport default RE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nexport default RE_SUBSEQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string/base/trim';\nimport replace from '@stdlib/string/base/replace';\nimport MultiSlice from '@stdlib/slice/multi';\nimport str2multislice from '@stdlib/slice/base/str2multislice';\nimport seq2multislice from '@stdlib/slice/base/seq2multislice';\nimport str2slice from '@stdlib/slice/base/str2slice';\nimport format from '@stdlib/string/format';\nimport RE_INTEGER from './re_integer.js';\nimport RE_SUBSEQ from './re_subseq.js';\n\n\n// MAIN //\n\n/**\n* Converts a zero-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( property );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string (e.g., ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\t// s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS'\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t}\n\t// Case: empty string or ellipsis\n\telse if ( prop.length === 0 || prop === '...' ) {\n\t\ts = new MultiSlice();\n\t}\n\t// Case: non-empty string\n\telse {\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string/base/trim';\nimport replace from '@stdlib/string/base/replace';\nimport MultiSlice from '@stdlib/slice/multi';\nimport str2multislice from '@stdlib/slice/base/str2multislice';\nimport seq2multislice from '@stdlib/slice/base/seq2multislice';\nimport str2slice from '@stdlib/slice/base/str2slice';\nimport format from '@stdlib/string/format';\nimport RE_INTEGER from './re_integer.js';\n\n\n// MAIN //\n\n/**\n* Converts a one-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( property );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string\n\telse if ( prop.length > 0 ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', target.shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: empty string\n\telse {\n\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', target.shape.join( ',' ), 0 ) );\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string/base/trim';\nimport str2multislice from '@stdlib/slice/base/str2multislice';\nimport seq2multislice from '@stdlib/slice/base/seq2multislice';\nimport sargs2multislice from '@stdlib/slice/base/sargs2multislice';\nimport format from '@stdlib/string/format';\nimport RE_SUBSEQ from './re_subseq.js';\n\n\n// MAIN //\n\n/**\n* Converts an n-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( ch === 'M' ) {\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: subsequence string (e.g., '...' or ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) || prop === '...' ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: array syntax (e.g., [ Slice(0,10,1), null, Slice(4,null,-1) ]) or Slice or integer or arbitrary string (where the latter three are not valid for >2d arrays)\n\telse {\n\t\ts = sargs2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default prop2slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport propertiesIn from '@stdlib/utils/properties-in';\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport ndarray from './../../ctor';\nimport defaults from './../../defaults';\n\n\n// MAIN //\n\n/**\n* Tests whether a property name exists on the parent prototype.\n*\n* @private\n* @name hasProperty\n* @type {Function}\n* @param {(string|symbol)} name - property name\n* @returns {boolean} boolean indicating whether the property exists on the parent prototype\n*\n* @example\n* var bool = hasProperty( 'get' );\n* // returns true\n*\n* bool = hasProperty( 'foo' );\n* // returns false\n*/\nvar hasProperty = contains( propertiesIn( new ndarray( 'generic', [ 0 ], [], [ 0 ], 0, defaults.get( 'order' ) ) ) );\n\n\n// EXPORTS //\n\nexport default hasProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string/base/replace';\n\n\n// MAIN //\n\n/**\n* Returns an updated error message for trapped errors.\n*\n* @private\n* @param {string} msg - error message\n* @returns {string} updated message\n*/\nfunction errMessage( msg ) {\n\treturn replace( msg, /^invalid argument/, 'invalid operation' );\n}\n\n\n// EXPORTS //\n\nexport default errMessage;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRangeError from '@stdlib/assert/is-range-error';\nimport isTypeError from '@stdlib/assert/is-type-error';\nimport isSyntaxError from '@stdlib/assert/is-syntax-error';\n\n\n// MAIN //\n\n/**\n* Returns the error constructor for a provided error object.\n*\n* @private\n* @param {Error} err - error object\n* @returns {Function} error constructor\n*/\nfunction errConstructor( err ) {\n\tif ( isRangeError( err ) ) {\n\t\treturn RangeError;\n\t}\n\tif ( isTypeError( err ) ) {\n\t\treturn TypeError;\n\t}\n\tif ( isSyntaxError( err ) ) {\n\t\treturn SyntaxError;\n\t}\n\treturn Error;\n}\n\n\n// EXPORTS //\n\nexport default errConstructor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasProperty from './has_property.js';\nimport getValue from './get_value.js';\nimport getSlice from './get_slice.js';\n\n\n// MAIN //\n\n/**\n* Returns a trap for retrieving property values.\n*\n* @private\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( prop2slice ) {\n\treturn get;\n\n\t/**\n\t* Trap for retrieving property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n\t* @returns {*} result\n\t*/\n\tfunction get( target, property, receiver ) {\n\t\tif ( hasProperty( property ) ) {\n\t\t\treturn getValue( target, property, receiver );\n\t\t}\n\t\treturn getSlice( target, property, receiver, prop2slice );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert/is-function';\n\n\n// MAIN //\n\n/**\n* Returns the property value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @returns {*} result\n*/\nfunction getValue( target, property, receiver ) {\n\tvar value = target[ property ];\n\tif ( isFunction( value ) ) {\n\t\treturn wrapper;\n\t}\n\treturn value;\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport slice from './../../base/slice';\nimport errMessage from './error_message.js';\nimport errConstructor from './error_constructor.js';\n\n\n// MAIN //\n\n/**\n* Returns an ndarray view.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {FancyArray} result\n*/\nfunction getSlice( target, property, receiver, prop2slice ) { // eslint-disable-line stdlib/jsdoc-require-throws-tags\n\tvar strict;\n\tvar E;\n\tvar s;\n\n\tstrict = false; // TODO: support strict mode\n\ts = prop2slice( target, property, strict );\n\ttry {\n\t\treturn slice( receiver, s, strict, false );\n\t} catch ( err ) {\n\t\tE = errConstructor( err );\n\t\tthrow new E( errMessage( err.message ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default getSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math/base/assert/is-integer';\nimport isNegativeZero from '@stdlib/math/base/assert/is-negative-zero';\nimport isComplexLike from '@stdlib/assert/is-complex-like';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport FLOAT32_SMALLEST_SUBNORMAL from '@stdlib/constants/float32/smallest-subnormal'; // eslint-disable-line id-length\nimport FLOAT32_MAX_SAFE_INTEGER from '@stdlib/constants/float32/max-safe-integer';\nimport FLOAT32_MIN_SAFE_INTEGER from '@stdlib/constants/float32/min-safe-integer';\nimport INT8_MIN from '@stdlib/constants/int8/min';\nimport INT16_MIN from '@stdlib/constants/int16/min';\nimport INT32_MIN from '@stdlib/constants/int32/min';\nimport UINT8_MAX from '@stdlib/constants/uint8/max';\nimport UINT16_MAX from '@stdlib/constants/uint16/max';\nimport UINT32_MAX from '@stdlib/constants/uint32/max';\n\n\n// FUNCTIONS //\n\n/**\n* Returns the minimum floating-point ndarray data type of the closest \"kind\" necessary for storing a provided scalar.\n*\n* @private\n* @param {number} value - real value\n* @returns {string} ndarray data type\n*/\nfunction minFloatDataType( value ) {\n\tif ( value !== value || value === PINF || value === NINF ) {\n\t\treturn 'float32';\n\t}\n\tif ( isInteger( value ) ) {\n\t\tif ( value >= FLOAT32_MIN_SAFE_INTEGER && value <= FLOAT32_MAX_SAFE_INTEGER ) { // eslint-disable-line max-len\n\t\t\treturn 'float32';\n\t\t}\n\t\treturn 'float64';\n\t}\n\t// Assume that if we are provided a tiny value, we don't want to underflow to zero by storing as `float32`...\n\tif (\n\t\tvalue > -FLOAT32_SMALLEST_SUBNORMAL &&\n\t\tvalue < FLOAT32_SMALLEST_SUBNORMAL\n\t) {\n\t\treturn 'float64';\n\t}\n\t// Any number which reaches this point is less than the maximum single-precision floating-point number, as floating-point format supports a limited number of decimals (e.g., (1.0+EPS)*10**15 => 1000000000000000.2, which is less than ~3.4e38)...\n\treturn 'float32';\n}\n\n\n// MAIN //\n\n/**\n* Returns the minimum ndarray data type of the closest \"kind\" necessary for storing a provided scalar value.\n*\n* @param {*} value - scalar value\n* @returns {string} ndarray data type\n*\n* @example\n* var dt = minDataType( 3.141592653589793 );\n* // returns 'float32'\n*\n* @example\n* var dt = minDataType( 3 );\n* // returns 'uint8'\n*/\nfunction minDataType( value ) {\n\tif ( typeof value !== 'number' ) {\n\t\tif ( isComplexLike( value ) ) {\n\t\t\tif ( minFloatDataType( value.re ) === 'float64' || minFloatDataType( value.im ) === 'float64' ) {\n\t\t\t\treturn 'complex128';\n\t\t\t}\n\t\t\treturn 'complex64';\n\t\t}\n\t\treturn 'generic';\n\t}\n\tif ( value !== value || value === PINF || value === NINF ) {\n\t\treturn 'float32';\n\t}\n\tif ( isInteger( value ) ) {\n\t\tif ( value === 0 && isNegativeZero( value ) ) {\n\t\t\treturn 'float32';\n\t\t}\n\t\tif ( value < 0 ) {\n\t\t\tif ( value >= INT8_MIN ) {\n\t\t\t\treturn 'int8';\n\t\t\t}\n\t\t\tif ( value >= INT16_MIN ) {\n\t\t\t\treturn 'int16';\n\t\t\t}\n\t\t\tif ( value >= INT32_MIN ) {\n\t\t\t\treturn 'int32';\n\t\t\t}\n\t\t\treturn 'float64';\n\t\t}\n\t\tif ( value <= UINT8_MAX ) {\n\t\t\treturn 'uint8';\n\t\t}\n\t\tif ( value <= UINT16_MAX ) {\n\t\t\treturn 'uint16';\n\t\t}\n\t\tif ( value <= UINT32_MAX ) {\n\t\t\treturn 'uint32';\n\t\t}\n\t\treturn 'float64';\n\t}\n\t// Assume that if we are provided a tiny value, we don't want to underflow to zero by storing as `float32`...\n\tif (\n\t\tvalue > -FLOAT32_SMALLEST_SUBNORMAL &&\n\t\tvalue < FLOAT32_SMALLEST_SUBNORMAL\n\t) {\n\t\treturn 'float64';\n\t}\n\t// Any number which reaches this point is less than the maximum single-precision floating-point number, given that floating-point format supports a limited number of decimals (e.g., (1.0+EPS)*10**15 => 1000000000000000.2, which is less than ~3.4e38)...\n\treturn 'float32';\n}\n\n\n// EXPORTS //\n\nexport default minDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isComplexLike from '@stdlib/assert/is-complex-like';\nimport isAccessorArray from '@stdlib/array/base/assert/is-accessor-array';\nimport accessorSetter from '@stdlib/array/base/accessor-setter';\nimport setter from '@stdlib/array/base/setter';\nimport buffer from './../../base/buffer';\nimport ndarray from './../../ctor';\nimport defaults from './../../defaults';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar ORDER = defaults.get( 'order' );\n\n\n// MAIN //\n\n/**\n* Returns a zero-dimensional ndarray containing a provided scalar value.\n*\n* ## Notes\n*\n* -   If a `dtype` option is not provided and `value`\n*\n*     -   is a `number`, the default data type is `'float64'`.\n*     -   is a complex number object, the default data type is `'complex128'`.\n*     -   is any other value type, the default data type is `'generic'`.\n*\n* @param {*} value - scalar value\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.order=\"row-major\"] - memory layout (either row-major or column-major)\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} second argument must be an object\n* @throws {TypeError} `dtype` option must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var x = scalar2ndarray( 1.0 );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get();\n* // returns 1.0\n*\n* @example\n* var x = scalar2ndarray( 1.0, {\n*     'dtype': 'float32'\n* });\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns []\n*\n* var dt = x.dtype;\n* // returns 'float32'\n*\n* var v = x.get();\n* // returns 1.0\n*/\nfunction scalar2ndarray( value ) {\n\tvar options;\n\tvar opts;\n\tvar buf;\n\tvar flg;\n\tvar set;\n\tvar dt;\n\tvar v;\n\n\topts = {\n\t\t'dtype': '',\n\t\t'order': ORDER,\n\t\t'readonly': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\topts.dtype = options.dtype;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\topts.readonly = options.readonly;\n\t\t}\n\t}\n\tflg = isNumber( value );\n\tif ( opts.dtype === '' ) {\n\t\tif ( flg ) {\n\t\t\tdt = 'float64';\n\t\t} else if ( isComplexLike( value ) ) {\n\t\t\tdt = 'complex128';\n\t\t} else {\n\t\t\tdt = 'generic';\n\t\t}\n\t} else {\n\t\tdt = opts.dtype;\n\t}\n\tbuf = buffer( dt, 1 );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized data type. Option: `%s`.', 'dtype', dt ) );\n\t}\n\tif ( /^complex/.test( dt ) && flg ) {\n\t\tv = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t} else {\n\t\tv = value;\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dt );\n\t} else {\n\t\tset = setter( dt );\n\t}\n\tset( buf, 0, v );\n\treturn new ndarray( dt, buf, [], [ 0 ], 0, opts.order, opts );\n}\n\n\n// EXPORTS //\n\nexport default scalar2ndarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sliceAssign from './../../base/slice-assign';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isComplexLike from '@stdlib/assert/is-complex-like';\nimport isComplexDataType from './../../base/assert/is-complex-floating-point-data-type';\nimport isFloatingDataType from './../../base/assert/is-floating-point-data-type';\nimport isUnsignedIntegerDataType from './../../base/assert/is-unsigned-integer-data-type';\nimport isSignedIntegerDataType from './../../base/assert/is-signed-integer-data-type';\nimport isSafeCast from './../../base/assert/is-safe-data-type-cast';\nimport INT8_MAX from '@stdlib/constants/int8/max';\nimport INT16_MAX from '@stdlib/constants/int16/max';\nimport INT32_MAX from '@stdlib/constants/int32/max';\nimport minDataType from './../../min-dtype';\nimport complexDataType from '@stdlib/complex/dtype';\nimport scalar2ndarray from './../../from-scalar';\nimport format from '@stdlib/string/format';\nimport errMessage from './error_message.js';\nimport errConstructor from './error_constructor.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns an options object for creating an ndarray from a scalar value.\n*\n* @private\n* @param {string} dtype - output array data type\n* @returns {Object} options\n*/\nfunction options( dtype ) {\n\treturn {\n\t\t'dtype': dtype\n\t};\n}\n\n\n// MAIN //\n\n/**\n* Sets element values belonging to the ndarray view specified by an indexing expression.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - indexing expression\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {Error} assigned value must be broadcast compatible with target array view\n* @throws {TypeError} assigned value cannot be safely cast to the target array data type\n* @throws {TypeError} target array must have a supported data type\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setSlice( target, property, value, receiver, prop2slice ) { // eslint-disable-line stdlib/jsdoc-require-throws-tags\n\tvar strict;\n\tvar vdt;\n\tvar dt;\n\tvar E;\n\tvar s;\n\n\tif ( !isndarrayLike( value ) ) {\n\t\tdt = target.dtype;\n\n\t\t// If the target array data type is \"generic\", we can just go ahead and \"cast\" to the target array data type...\n\t\tif ( dt === 'generic' ) {\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the input value is real-valued number, we need to inspect the value to determine whether we can safely cast the value to the target array data type...\n\t\telse if ( isNumber( value ) ) {\n\t\t\t// If the target array has a floating-point data type, we can just go ahead and cast the input scalar to the target array data type...\n\t\t\tif ( isFloatingDataType( dt ) ) {\n\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t}\n\t\t\t// If the target array has an unsigned integer data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( isUnsignedIntegerDataType( dt ) ) {\n\t\t\t\tvdt = minDataType( value );\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has a signed integer data type, then the assigned value must be a compatible integer value...\n\t\t\telse if ( isSignedIntegerDataType( dt ) ) {\n\t\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', minDataType( value ), dt ) );\n\t\t\t\t}\n\t\t\t\t// Manually resolve the minimum data type of the closest \"kind\" necessary for storing a scalar value, as `minDataType()` defaults to unsigned integer data types when a scalar value is greater than or equal to zero...\n\t\t\t\tif ( value < 0 ) {\n\t\t\t\t\tvdt = minDataType( value );\n\t\t\t\t} else if ( value <= INT8_MAX ) { // TODO: consider moving this logic to `@stdlib/ndarray/base/min-signed-intger-dtype` where the interface can assume that `value` is integer-valued\n\t\t\t\t\tvdt = 'int8';\n\t\t\t\t} else if ( value <= INT16_MAX ) {\n\t\t\t\t\tvdt = 'int16';\n\t\t\t\t} else if ( value <= INT32_MAX ) {\n\t\t\t\t\tvdt = 'int32';\n\t\t\t\t} else {\n\t\t\t\t\tvdt = 'float64';\n\t\t\t\t}\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has \"binary\" data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( dt === 'binary' ) {\n\t\t\t\tvdt = minDataType( value );\n\t\t\t\tif ( vdt === 'uint8' ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we reach this point, we must be dealing with an unexpected target array data type...\n\t\t\telse {\n\t\t\t\t// Raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types:\n\t\t\t\tthrow new TypeError( format( 'invalid operation. Unsupported target array data type. Data type: `%s`.', dt ) );\n\t\t\t}\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is a complex number, then the target array data type must also have a complex number data type...\n\t\telse if ( isComplexLike( value ) ) {\n\t\t\tif ( !isComplexDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', complexDataType( value ), dt ) );\n\t\t\t}\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is neither a real- or complex-valued number, raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types...\n\t\telse {\n\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', typeof value, dt ) );\n\t\t}\n\t}\n\tstrict = false; // TODO: support strict mode\n\ts = prop2slice( target, property, strict );\n\ttry {\n\t\tsliceAssign( value, receiver, s, strict );\n\t\treturn true;\n\t} catch ( err ) {\n\t\tE = errConstructor( err );\n\t\tthrow new E( errMessage( err.message ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default setSlice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasProperty from './has_property.js';\nimport setValue from './set_value.js';\nimport setSlice from './set_slice.js';\n\n\n// MAIN //\n\n/**\n* Returns a trap for setting property values.\n*\n* @private\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( prop2slice ) {\n\treturn set;\n\n\t/**\n\t* Trap for setting property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {*} value - new value\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n\t* @throws {Error} assigned value must be broadcast compatible with output array view\n\t* @throws {TypeError} assigned value cannot be safely cast to the output array data type\n\t* @returns {boolean} boolean indicating whether assignment succeeded\n\t*/\n\tfunction set( target, property, value, receiver ) {\n\t\tif ( hasProperty( property ) ) {\n\t\t\treturn setValue( target, property, value );\n\t\t}\n\t\treturn setSlice( target, property, value, receiver, prop2slice );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets the value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setValue( target, property, value ) {\n\ttarget[ property ] = value;\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default setValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport parent from './../../ctor'; // eslint-disable-line stdlib/no-redeclare\nimport inherit from '@stdlib/utils/inherit';\nimport Proxy from '@stdlib/proxy/ctor';\nimport prop2slice0d from './prop2slice.0d.js';\nimport prop2slice1d from './prop2slice.1d.js';\nimport prop2slicend from './prop2slice.nd.js';\nimport get from './get.js';\nimport set from './set.js';\n\n\n// VARIABLES //\n\nvar get0d = get( prop2slice0d );\nvar set0d = set( prop2slice0d );\nvar get1d = get( prop2slice1d );\nvar set1d = set( prop2slice1d );\nvar getnd = get( prop2slicend );\nvar setnd = set( prop2slicend );\n\n\n// MAIN //\n\n/**\n* Fancy ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {FancyArray} FancyArray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\nfunction FancyArray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar handlers;\n\tvar nargs;\n\tvar ndims;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof FancyArray ) ) {\n\t\tif ( nargs < 7 ) {\n\t\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order, options );\n\t}\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, shape, strides, offset, order, ( nargs < 7 ) ? {} : options );\n\n\tif ( Proxy ) { // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs\n\t\tndims = shape.length;\n\t\thandlers = {};\n\t\tif ( ndims === 0 ) {\n\t\t\thandlers.get = get0d;\n\t\t\thandlers.set = set0d;\n\t\t} else if ( ndims === 1 ) {\n\t\t\thandlers.get = get1d;\n\t\t\thandlers.set = set1d;\n\t\t} else {\n\t\t\thandlers.get = getnd;\n\t\t\thandlers.set = setnd;\n\t\t}\n\t\treturn new Proxy( this, handlers );\n\t}\n\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available.' ); // eslint-disable-line no-console\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherit( FancyArray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof FancyArray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = FancyArray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( FancyArray, 'name', 'ndarray' );\n\n\n// EXPORTS //\n\nexport default FancyArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport isOrder from './../../base/assert/is-order';\nimport isIndexMode from './../../base/assert/is-index-mode';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.mode] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'throw',\n*     'order': 'column-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.', 'mode', opts.mode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized order. Option: `%s`.', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert/is-nonnegative-integer-array';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport shape2strides from './../../base/shape2strides';\nimport getSubscripts from './../../base/ind2sub';\nimport format from '@stdlib/string/format';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a linear index exceeds array dimensions.\n*     -   **normalize**: normalize negative linear indices and throw an error when a linear index exceeds array dimensions.\n*     -   **wrap**: wrap around a linear index exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {integer} idx - linear index\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @throws {TypeError} shape argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} linear index argument must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a linear index which does not exceed array dimensions\n* @returns {NonNegativeIntegerArray} subscripts\n*\n* @example\n* var s = ind2sub( [ 3, 3, 3 ], 17 );\n* // returns [ 1, 2, 2 ]\n*/\nfunction ind2sub( shape, idx, options ) {\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\topts.mode = defaults.mode;\n\topts.order = defaults.order;\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Linear index must be integer valued. Value: `%s`.', idx ) );\n\t}\n\t// Note: strides are positive, so offset is always zero\n\treturn getSubscripts( shape, shape2strides( shape, opts.order ), 0, opts.order, idx, opts.mode ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ind2sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport toArray from './../../base/to-array';\nimport getStrides from './../../strides';\nimport getOffset from './../../offset';\nimport getShape from './../../shape';\nimport getOrder from './../../order';\nimport getData from './../../data-buffer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Converts an ndarray to a generic array (which may include nested arrays).\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {(EmptyArray|Array|Array<Array>)} array (which may include nested arrays)\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n*\n* var buffer = [ 1, 2, 3, 4 ];\n* var shape = [ 2, 2 ];\n* var order = 'row-major';\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var arr = ndarray( 'generic', buffer, shape, strides, offset, order  );\n*\n* var out = ndarray2array( arr );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*/\nfunction ndarray2array( x ) {\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\treturn toArray( getData( x ), getShape( x ), getStrides( x ), getOffset( x ), getOrder( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ndarray2array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a linear index to an array of subscripts.\n*\n* @module @stdlib/ndarray/ind2sub\n*\n* @example\n* import ind2sub from '@stdlib/ndarray/ind2sub';\n*\n* var s = ind2sub( [ 3, 3, 3 ], 17 );\n* // returns [ 1, 2, 2 ]\n*\n* @example\n* import ind2sub from '@stdlib/ndarray/ind2sub';\n*\n* var shape = [ 3, 3, 3 ];\n* var out = [ 0, 0, 0 ];\n*\n* var s = ind2sub.assign( shape, 17, out );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( s === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert/is-nonnegative-integer-array';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport shape2strides from './../../base/shape2strides';\nimport { assign as getSubscripts } from './../../base/ind2sub';\nimport format from '@stdlib/string/format';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Converts a linear index to an array of subscripts and assigns results to a provided output array.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a linear index exceeds array dimensions.\n*     -   **normalize**: normalize negative linear indices and throw an error when a linear index exceeds array dimensions.\n*     -   **wrap**: wrap around a linear index exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set a linear index exceeding array dimensions to either `0` (minimum linear index) or the maximum linear index.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {integer} idx - linear index\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle a linear index which exceeds array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {(Array|TypedArray|Object)} out - output array\n* @throws {TypeError} output argument must be either an array, typed array, or an object\n* @throws {TypeError} shape argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} linear index argument must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a linear index which does not exceed array dimensions\n* @returns {NonNegativeIntegerArray} subscripts\n*\n* @example\n* var shape = [ 3, 3, 3 ];\n* var out = [ 0, 0, 0 ];\n*\n* var s = ind2sub( shape, 17, out );\n* // returns [ 1, 2, 2 ]\n*\n* var bool = ( s === out );\n* // returns true\n*/\nfunction ind2sub( shape, idx, options, out ) {\n\tvar opts;\n\tvar dest;\n\tvar err;\n\n\topts = {};\n\topts.mode = defaults.mode;\n\topts.order = defaults.order;\n\tif ( arguments.length === 4 ) {\n\t\terr = validate( opts, arguments[ 2 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( typeof out !== 'object' || out === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be either an array, typed array, or object. Value: `%s`.', out ) );\n\t\t}\n\t\tdest = out;\n\t} else {\n\t\tdest = options;\n\t\tif ( typeof dest !== 'object' || dest === null ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be either an array, typed array, or object. Value: `%s`.', dest ) );\n\t\t}\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Linear index must be integer valued. Value: `%s`.', idx ) );\n\t}\n\t// Note: strides are positive, so offset is always zero\n\treturn getSubscripts( shape, shape2strides( shape, opts.order ), 0, opts.order, idx, opts.mode, dest ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ind2sub;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name nditerColumnEntries\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/column-entries}\n*/\nimport nditerColumnEntries from './../../iter/column-entries';\nsetReadOnly( ns, 'nditerColumnEntries', nditerColumnEntries );\n\n/**\n* @name nditerColumns\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/columns}\n*/\nimport nditerColumns from './../../iter/columns';\nsetReadOnly( ns, 'nditerColumns', nditerColumns );\n\n/**\n* @name nditerEntries\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/entries}\n*/\nimport nditerEntries from './../../iter/entries';\nsetReadOnly( ns, 'nditerEntries', nditerEntries );\n\n/**\n* @name nditerIndices\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/indices}\n*/\nimport nditerIndices from './../../iter/indices';\nsetReadOnly( ns, 'nditerIndices', nditerIndices );\n\n/**\n* @name nditerMatrices\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/matrices}\n*/\nimport nditerMatrices from './../../iter/matrices';\nsetReadOnly( ns, 'nditerMatrices', nditerMatrices );\n\n/**\n* @name nditerMatrixEntries\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/matrix-entries}\n*/\nimport nditerMatrixEntries from './../../iter/matrix-entries';\nsetReadOnly( ns, 'nditerMatrixEntries', nditerMatrixEntries );\n\n/**\n* @name nditerRowEntries\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/row-entries}\n*/\nimport nditerRowEntries from './../../iter/row-entries';\nsetReadOnly( ns, 'nditerRowEntries', nditerRowEntries );\n\n/**\n* @name nditerRows\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/rows}\n*/\nimport nditerRows from './../../iter/rows';\nsetReadOnly( ns, 'nditerRows', nditerRows );\n\n/**\n* @name nditer2arrayEach\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/to-array-each}\n*/\nimport nditer2arrayEach from './../../iter/to-array-each';\nsetReadOnly( ns, 'nditer2arrayEach', nditer2arrayEach );\n\n/**\n* @name nditerValues\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/iter/values}\n*/\nimport nditerValues from './../../iter/values';\nsetReadOnly( ns, 'nditerValues', nditerValues );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isCollection from '@stdlib/assert/is-collection';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport broadcast from './../../broadcast-array';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Broadcasts an ndarray to a specified shape if and only if the specified shape differs from the provided ndarray's shape.\n*\n* ## Notes\n*\n* -   If a provided ndarray has the same shape as the specified shape, the function returns the provided ndarray.\n* -   If a provided ndarray has a different (broadcast compatible) shape than the specified shape, the function returns a new **read-only** ndarray view of the provided ndarray's data. The view is typically **not** contiguous. As more than one element of a returned view may refer to the same memory location, writing to the input ndarray may affect multiple elements. If you need to write to the input ndarray, copy the input ndarray before broadcasting.\n*\n* @param {ndarray} x - input array\n* @param {NonNegativeIntegerArray} shape - desired shape\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} second argument must be an array of nonnegative integers\n* @throws {Error} input array cannot have more dimensions than the desired shape\n* @throws {Error} input array dimension sizes must be `1` or equal to the corresponding dimension in the provided shape\n* @throws {Error} input array and desired shape must be broadcast compatible\n* @returns {ndarray} broadcasted array\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = maybeBroadcastArray( x, [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 1\n*\n* v = y.get( 1, 1, 0 );\n* // returns 3\n*\n* v = y.get( 2, 0, 0 );\n* // returns 1\n*\n* v = y.get( 2, 1, 1 );\n* // returns 4\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var y = maybeBroadcastArray( x, [ 3, 2 ] );\n* // throws <Error>\n*/\nfunction maybeBroadcastArray( x, shape ) {\n\tvar sh;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tN = shape.length;\n\tsh = x.shape;\n\n\t// Check whether we need to broadcast the input array...\n\tif ( sh.length === N ) {\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\td = shape[ i ];\n\t\t\tif ( !isNonNegativeInteger( d ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of nonnegative integers. Value: `%s`.', '[' + shape.join( ',' ) + ']' ) );\n\t\t\t}\n\t\t\t// Check whether dimensions match...\n\t\t\tif ( sh[ i ] !== d ) {\n\t\t\t\t// We found a mismatched dimension; delegate to `broadcast` to ensure that the input array is broadcast compatible with the desired array shape...\n\t\t\t\treturn broadcast( x, shape );\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// If we are provided an array having a different rank (i.e., number of dimensions) than the desired shape, assume we need to broadcast, delegating to `broadcast` to ensure that the input array is broadcast compatible with the desired array shape...\n\treturn broadcast( x, shape );\n}\n\n\n// EXPORTS //\n\nexport default maybeBroadcastArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport getShape from './../../../shape';\nimport numel from './../../../base/numel';\nimport slice from './../../../base/slice';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns `[index, column]` pairs for each column in a matrix (or stack of matrices).\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least two dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import ndarray2array from '@stdlib/ndarray/to-array';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerColumnEntries( x );\n*\n* var v = iter.next().value;\n* // returns [...]\n*\n* var idx = v[ 0 ];\n* // returns [ 0, null, 0 ]\n*\n* var col = ndarray2array( v[ 1 ] );\n* // returns [ 1, 3 ]\n*\n* v = iter.next().value;\n* // returns [...]\n*\n* idx = v[ 0 ];\n* // returns [ 0, null, 1 ]\n*\n* col = ndarray2array( v[ 1 ] );\n* // returns [ 2, 4 ]\n*\n* // ...\n*/\nfunction nditerColumnEntries( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S0;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'invalid option. Cannot write to read-only array.' ) );\n\t\t\t}\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 2 ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an ndarray having at least two dimensions.' );\n\t}\n\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of columns across all stacks of matrices:\n\tN /= shape[ ndims-2 ];\n\tdim = ndims - 1;\n\tS0 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Set the second-to-last element to `null` to indicate that we want a full \"slice\" for the second-to-last dimension:\n\tidx[ ndims-2 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar indices;\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Cache the current state of the index array:\n\t\tindices = idx.slice();\n\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S0;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the columns in the current matrix, move on to the next matrix in the stack:\n\t\t\tidx = nextCartesianIndex( shape, 'row-major', idx, dim-2, idx );\n\t\t}\n\t\t// Return the next row entry:\n\t\treturn {\n\t\t\t'value': [ indices, slice( x, s, true, opts.writable ) ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerColumnEntries( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerColumnEntries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport getShape from './../../../shape';\nimport numel from './../../../base/numel';\nimport slice from './../../../base/slice';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each column in a matrix (or stack of matrices).\n*\n* @param {ndarray} x - input value\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least two dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerColumns( x );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ 1, 3 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 2, 4 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 5, 7 ]\n*\n* // ...\n*/\nfunction nditerColumns( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S0;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'invalid option. Cannot write to read-only array.' ) );\n\t\t\t}\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 2 ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an ndarray having at least two dimensions.' );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of columns across all stacks of matrices:\n\tN /= shape[ ndims-2 ];\n\tdim = ndims - 1;\n\tS0 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array for generating slices:\n\tidx = zeros( ndims );\n\n\t// Set the second-to-last element to `null` to indicate that we want a full \"slice\" for the second-to-last dimension:\n\tidx[ ndims-2 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S0;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the columns in the current matrix, move on to the next matrix in the stack:\n\t\t\tidx = nextCartesianIndex( shape, 'row-major', idx, dim-2, idx );\n\t\t}\n\t\t// Return the next column slice:\n\t\treturn {\n\t\t\t'value': slice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerColumns( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerColumns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isOrder from './../../../base/assert/is-order';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport getShape from './../../../shape';\nimport numel from './../../../base/numel';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns `[index, value]` pairs for each element in a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {boolean} [options.order='row-major'] - index iteration order\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerEntries( x );\n*\n* var v = iter.next().value;\n* // returns [ [ 0, 0, 0 ], 1 ]\n*\n* v = iter.next().value;\n* // returns [ [ 0, 0, 1 ], 2 ]\n*\n* v = iter.next().value;\n* // returns [ [ 0, 1, 0 ], 3 ]\n*\n* // ...\n*/\nfunction nditerEntries( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'order': x.order\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( !isOrder( options.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', options.order ) );\n\t\t\t}\n\t\t\topts.order = options.order;\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Resolve the dimension in which indices iterate fastest:\n\tif ( opts.order === 'row-major' ) {\n\t\tdim = ndims - 1;\n\t} else {\n\t\tdim = 0;\n\t}\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i > 0 ) {\n\t\t\tidx = nextCartesianIndex( shape, opts.order, idx, dim, idx );\n\t\t}\n\t\t// Return the next set of indices:\n\t\treturn {\n\t\t\t'value': [ idx.slice(), x.get.apply( x, idx ) ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerEntries( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerEntries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isOrder from './../../../base/assert/is-order';\nimport isCollection from '@stdlib/assert/is-collection';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport numel from './../../../base/numel';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns indices for use in indexing into an ndarray having a specified shape.\n*\n* @param {NonNegativeIntegerArray} shape - input shape\n* @param {Options} [options] - function options\n* @param {boolean} [options.order='row-major'] - index iteration order\n* @throws {TypeError} first argument must be an array containing nonnegative integers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerIndices( x.shape );\n*\n* var v = iter.next().value;\n* // returns [ 0, 0, 0 ]\n*\n* v = iter.next().value;\n* // returns [ 0, 0, 1 ]\n*\n* v = iter.next().value;\n* // returns [ 0, 1, 0 ]\n*\n* // ...\n*/\nfunction nditerIndices( shape ) {\n\tvar options;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar sh;\n\tvar N;\n\tvar i;\n\n\tif ( !isCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\topts = {\n\t\t'order': 'row-major'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( !isOrder( options.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', options.order ) );\n\t\t\t}\n\t\t\topts.order = options.order;\n\t\t}\n\t}\n\t// Retrieve the number of dimensions:\n\tndims = shape.length;\n\n\t// Copy the input shape:\n\tsh = [];\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( !isNonNegativeInteger( shape[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of nonnegative integers. Value: `%s`.', shape ) );\n\t\t}\n\t\tsh.push( shape[ i ] );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( sh );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Resolve the dimension in which indices iterate fastest:\n\tif ( opts.order === 'row-major' ) {\n\t\tdim = ndims - 1;\n\t} else {\n\t\tdim = 0;\n\t}\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i > 0 ) {\n\t\t\tidx = nextCartesianIndex( shape, opts.order, idx, dim, idx );\n\t\t}\n\t\t// Return the next set of indices:\n\t\treturn {\n\t\t\t'value': idx.slice(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerIndices( sh, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerIndices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport getShape from './../../../shape';\nimport numel from './../../../base/numel';\nimport slice from './../../../base/slice';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each matrix in a stack of matrices.\n*\n* @param {ndarray} x - input value\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least three dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerMatrices( x );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\nfunction nditerMatrices( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S2;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'invalid option. Cannot write to read-only array.' ) );\n\t\t\t}\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 3 ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an ndarray having at least three dimensions.' );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of matrices across all stacks of matrices:\n\tN /= shape[ ndims-1 ] * shape[ ndims-2 ];\n\tdim = ndims - 3;\n\tS2 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array for generating slices:\n\tidx = zeros( ndims );\n\n\t// Set the last two elements to `null` to indicate that we want a full \"slice\" for the last two dimensions:\n\tidx[ ndims-1 ] = null;\n\tidx[ ndims-2 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S2;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the matrices in the current stack, move on to the next set of matrices:\n\t\t\tidx = nextCartesianIndex( shape, 'row-major', idx, dim-1, idx );\n\t\t}\n\t\t// Return the next slice:\n\t\treturn {\n\t\t\t'value': slice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerMatrices( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerMatrices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport getShape from './../../../shape';\nimport numel from './../../../base/numel';\nimport slice from './../../../base/slice';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns `[index, matrix]` pairs for each matrix in a stack of matrices.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least three dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import ndarray2array from '@stdlib/ndarray/to-array';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerMatrixEntries( x );\n*\n* var v = iter.next().value;\n* // returns [...]\n*\n* var idx = v[ 0 ];\n* // returns [ 0, null, null ]\n*\n* var mat = ndarray2array( v[ 1 ] );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns [...]\n*\n* idx = v[ 0 ];\n* // returns [ 1, null, null ]\n*\n* mat = ndarray2array( v[ 1 ] );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\nfunction nditerMatrixEntries( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S2;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'invalid option. Cannot write to read-only array.' ) );\n\t\t\t}\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 3 ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an ndarray having at least three dimensions.' );\n\t}\n\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of matrices across all stacks of matrices:\n\tN /= shape[ ndims-1 ] * shape[ ndims-2 ];\n\tdim = ndims - 3;\n\tS2 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Set the last two elements to `null` to indicate that we want a full \"slice\" for the last two dimensions:\n\tidx[ ndims-1 ] = null;\n\tidx[ ndims-2 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar indices;\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Cache the current state of the index array:\n\t\tindices = idx.slice();\n\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S2;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the matrices in the current stack, move on to the next set of matrices:\n\t\t\tidx = nextCartesianIndex( shape, 'row-major', idx, dim-1, idx );\n\t\t}\n\t\t// Return the next matrix entry:\n\t\treturn {\n\t\t\t'value': [ indices, slice( x, s, true, opts.writable ) ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerMatrixEntries( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerMatrixEntries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport getShape from './../../../shape';\nimport numel from './../../../base/numel';\nimport slice from './../../../base/slice';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns `[index, row]` pairs for each row in a matrix (or stack of matrices).\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least two dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import ndarray2array from '@stdlib/ndarray/to-array';\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerRowEntries( x );\n*\n* var v = iter.next().value;\n* // returns [...]\n*\n* var idx = v[ 0 ];\n* // returns [ 0, 0, null ]\n*\n* var row = ndarray2array( v[ 1 ] );\n* // returns [ 1, 2 ]\n*\n* v = iter.next().value;\n* // returns [...]\n*\n* idx = v[ 0 ];\n* // returns [ 0, 1, null ]\n*\n* row = ndarray2array( v[ 1 ] );\n* // returns [ 3, 4 ]\n*\n* // ...\n*/\nfunction nditerRowEntries( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S1;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'invalid option. Cannot write to read-only array.' ) );\n\t\t\t}\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 2 ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an ndarray having at least two dimensions.' );\n\t}\n\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of rows across all stacks of matrices:\n\tN /= shape[ ndims-1 ];\n\tdim = ndims - 2;\n\tS1 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Set the last element to `null` to indicate that we want a full \"slice\" for the last dimension:\n\tidx[ ndims-1 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar indices;\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Cache the current state of the index array:\n\t\tindices = idx.slice();\n\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S1;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the rows in the current matrix, move on to the next matrix in the stack:\n\t\t\tidx = nextCartesianIndex( shape, 'row-major', idx, dim-1, idx );\n\t\t}\n\t\t// Return the next row entry:\n\t\treturn {\n\t\t\t'value': [ indices, slice( x, s, true, opts.writable ) ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerRowEntries( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerRowEntries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isReadOnly from './../../../base/assert/is-read-only';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport getShape from './../../../shape';\nimport numel from './../../../base/numel';\nimport slice from './../../../base/slice';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each row in a matrix (or stack of matrices).\n*\n* @param {ndarray} x - input value\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least two dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerRows( x );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ 1, 2 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 3, 4 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 5, 6 ]\n*\n* // ...\n*/\nfunction nditerRows( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S1;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'invalid option. Cannot write to read-only array.' ) );\n\t\t\t}\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 2 ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an ndarray having at least two dimensions.' );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of rows across all stacks of matrices:\n\tN /= shape[ ndims-1 ];\n\tdim = ndims - 2;\n\tS1 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array for generating slices:\n\tidx = zeros( ndims );\n\n\t// Set the last element to `null` to indicate that we want a full \"slice\" for the last dimension:\n\tidx[ ndims-1 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S1;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the rows in the current matrix, move on to the next matrix in the stack:\n\t\t\tidx = nextCartesianIndex( shape, 'row-major', idx, dim-1, idx );\n\t\t}\n\t\t// Return the next row slice:\n\t\treturn {\n\t\t\t'value': slice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerRows( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerRows;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isFunction from '@stdlib/assert/is-function';\nimport isIteratorLike from '@stdlib/assert/is-iterator-like';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport ndarray2array from './../../../to-array';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which converts each iterated ndarray to a generic array.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator protocol-compliant object\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n* import nditerRows from '@stdlib/ndarray/iter/rows';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditer2arrayEach( nditerRows( x ) );\n*\n* var v = iter.next().value;\n* // returns [ 1, 2 ]\n*\n* v = iter.next().value;\n* // returns [ 3, 4 ]\n*\n* v = iter.next().value;\n* // returns [ 5, 6 ]\n*\n* // ...\n*/\nfunction nditer2arrayEach( iterator ) {\n\tvar iter;\n\tvar FLG;\n\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `%s`.', iterator ) );\n\t}\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\treturn {\n\t\t\t'value': ndarray2array( v.value ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditer2arrayEach( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditer2arrayEach;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isOrder from './../../../base/assert/is-order';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport zeros from '@stdlib/array/base/zeros';\nimport getShape from './../../../shape';\nimport numel from './../../../base/numel';\nimport { assign as nextCartesianIndex } from './../../../base/next-cartesian-index';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns individual elements from a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {boolean} [options.order='row-major'] - index iteration order\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray/array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerValues( x );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\nfunction nditerValues( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'order': x.order\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( !isOrder( options.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', options.order ) );\n\t\t\t}\n\t\t\topts.order = options.order;\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Resolve the dimension in which indices iterate fastest:\n\tif ( opts.order === 'row-major' ) {\n\t\tdim = ndims - 1;\n\t} else {\n\t\tdim = 0;\n\t}\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i > 0 ) {\n\t\t\tidx = nextCartesianIndex( shape, opts.order, idx, dim, idx );\n\t\t}\n\t\t// Return the next set of indices:\n\t\treturn {\n\t\t\t'value': x.get.apply( x, idx ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerValues( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerValues;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils/keys';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport resolveStr from './../../base/dtype-resolve-str';\nimport NEXT_DTYPES from './next_dtypes.json';\n\n\n// FUNCTIONS //\n\n/**\n* Generates a table.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( NEXT_DTYPES );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tout[ dtypes[i] ] = NEXT_DTYPES[ dtypes[i] ];\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns the next larger ndarray data type of the same kind.\n*\n* @param {*} [dtype] - ndarray data type value\n* @returns {(Object|string|integer|null)} next larger data type(s) or null\n*\n* @example\n* var dt = nextDataType( 'float32' );\n* // returns 'float64'\n*/\nfunction nextDataType( dtype ) {\n\tif ( arguments.length === 0 ) {\n\t\treturn generateTable();\n\t}\n\tdtype = resolveStr( dtype );\n\tif ( hasOwnProp( NEXT_DTYPES, dtype ) ) {\n\t\treturn NEXT_DTYPES[ dtype ];\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default nextDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isCollection from '@stdlib/assert/is-collection';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the number of elements in an ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {NonNegativeInteger} number of elements\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var n = numel( zeros( [ 3, 3, 3 ] ) );\n* // returns 27\n*/\nfunction numel( x ) {\n\tvar ndims;\n\tvar sh;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects (e.g., vanilla arrays) can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tn = x.length;\n\tif ( isNonNegativeInteger( n ) ) {\n\t\treturn n;\n\t}\n\tsh = x.shape;\n\tif ( !isCollection( sh ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tndims = sh.length;\n\tif ( ndims === 0 ) {\n\t\t// Note: for minimal \"ndarray-like objects\", this will erroneously return zero when `x` is a zero-dimensional ndarray. This is part of the rationale for having a `length` property on actual ndarrays. As we don't can't know whether a provided ndarray-like is actually zero-dimensional without knowing/inspecting implementation details, we return zero here...\n\t\treturn 0;\n\t}\n\tn = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = sh[ i ];\n\t\tif ( !isNonNegativeInteger( d ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tn *= d;\n\t}\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default numel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils/keys';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport resolve from './../../base/dtype-resolve-str';\nimport PROMOTION_RULES from './promotion_rules.json';\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of promotion rules.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( PROMOTION_RULES );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = PROMOTION_RULES[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns the ndarray data type with the smallest size and closest \"kind\" to which ndarray data types can be safely cast.\n*\n* @param {*} [dtype1] - ndarray data type value\n* @param {*} [dtype2] - ndarray data type value\n* @returns {(Object|integer|string|null)} promotion rule(s) or null\n*\n* @example\n* var table = promotionRules();\n* // returns {...}\n*\n* @example\n* var dt = promotionRules( 'float32', 'uint32' );\n* // returns 'float64'\n*\n* @example\n* var dt = promotionRules( 'binary', 'generic' );\n* // returns -1\n*\n* @example\n* var dt = promotionRules( 'float32', 'foo' );\n* // returns null\n*/\nfunction promotionRules( dtype1, dtype2 ) {\n\tvar o;\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tdtype1 = resolve( dtype1 );\n\tif ( hasOwnProp( PROMOTION_RULES, dtype1 ) ) {\n\t\to = PROMOTION_RULES[ dtype1 ];\n\t\tdtype2 = resolve( dtype2 );\n\t\tif ( hasOwnProp( o, dtype2 ) ) {\n\t\t\treturn o[ dtype2 ];\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default promotionRules;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isMultiSlice from '@stdlib/assert/is-multi-slice';\nimport isArrayLikeObject from '@stdlib/assert/is-array-like-object';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport MultiSlice from '@stdlib/slice/multi';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport base from './../../base/slice';\nimport getShape from './../../shape';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a read-only view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {...*} s - slice arguments\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} must provide valid slice arguments\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import Slice from '@stdlib/slice/ctor';\n* import MultiSlice from '@stdlib/slice/multi';\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new MultiSlice( new Slice( null, null, -2 ), new Slice( null, null, -1 ) );\n* // returns <MultiSlice>\n*\n* var y = slice( x, s );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 6.0, 5.0 ], [ 2.0, 1.0 ] ]\n*/\nfunction slice( x, s ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar sh;\n\tvar S;\n\tvar i;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isPlainObject( arguments[ nargs-1 ] ) ) {\n\t\tnargs -= 1;\n\t\toptions = arguments[ nargs ];\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t\tsh = getShape( x );\n\t\tif ( nargs === 1 && sh.length > 0 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', sh.join( ',' ), 0 ) );\n\t\t}\n\t}\n\tif ( isMultiSlice( s ) ) {\n\t\tS = s;\n\t\tif ( nargs > 2 ) {\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t} else {\n\t\tif ( isArrayLikeObject( s ) ) {\n\t\t\targs = s;\n\t\t\tif ( nargs > 2 ) {\n\t\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t\t}\n\t\t} else {\n\t\t\targs = [];\n\t\t\tfor ( i = 1; i < nargs; i++ ) {\n\t\t\t\targs.push( arguments[ i ] );\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tS = args2multislice( args );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\t// Search for the first offending value...\n\t\t\tfor ( i = 0; i < args.length; i++ ) {\n\t\t\t\ttry {\n\t\t\t\t\tnew MultiSlice( args[ i ] ); // eslint-disable-line no-new\n\t\t\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Slice arguments must be either a Slice, integer, null, or undefined. Value: `%s`.', String( args[ i ] ) ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn base( x, S, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default slice;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isMultiSlice from '@stdlib/assert/is-multi-slice';\nimport isArrayLikeObject from '@stdlib/assert/is-array-like-object';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isReadOnly from './../../base/assert/is-read-only';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport MultiSlice from '@stdlib/slice/multi';\nimport args2multislice from '@stdlib/slice/base/args2multislice';\nimport base from './../../base/slice-assign';\nimport getShape from './../../shape';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Assigns element values from a broadcasted input ndarray to corresponding elements in an output ndarray view.\n*\n* @param {ndarray} x - input array\n* @param {ndarray} y - output array\n* @param {...*} s - slice arguments\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} second argument must be an ndarray\n* @throws {TypeError} must provide valid slice arguments\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} number of slice dimensions must match the number of output array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} input array must be broadcast compatible with an output array view\n* @throws {TypeError} input array cannot be safely cast to the output array data type\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {ndarray} output array\n*\n* @example\n* import Slice from '@stdlib/slice/ctor';\n* import MultiSlice from '@stdlib/slice/multi';\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndzeros from '@stdlib/ndarray/zeros';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* // Define an input array:\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* // Define an output array:\n* var y = ndzeros( [ 2, 3, 2 ], {\n*     'dtype': x.dtype\n* });\n*\n* // Create a slice:\n* var s0 = null;\n* var s1 = new Slice( null, null, -1 );\n* var s2 = new Slice( null, null, -1 );\n* var s = new MultiSlice( s0, s1, s2 );\n* // returns <MultiSlice>\n*\n* // Perform assignment:\n* var out = sliceAssign( x, y, s );\n* // returns <ndarray>\n*\n* var bool = ( out === y );\n* // returns true\n*\n* arr = ndarray2array( y );\n* // returns [ [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ], [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ] ]\n*/\nfunction sliceAssign( x, y, s ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar sh;\n\tvar S;\n\tvar i;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( isReadOnly( y ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot write to a read-only array.' );\n\t}\n\tif ( isPlainObject( arguments[ nargs-1 ] ) ) {\n\t\tnargs -= 1;\n\t\toptions = arguments[ nargs ];\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t\tsh = getShape( y );\n\t\tif ( nargs === 2 && sh.length > 0 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', sh.join( ',' ), 0 ) );\n\t\t}\n\t}\n\tif ( isMultiSlice( s ) ) {\n\t\tS = s;\n\t\tif ( nargs > 3 ) {\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t} else {\n\t\tif ( isArrayLikeObject( s ) ) {\n\t\t\targs = s;\n\t\t\tif ( nargs > 3 ) {\n\t\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t\t}\n\t\t} else {\n\t\t\targs = [];\n\t\t\tfor ( i = 2; i < nargs; i++ ) {\n\t\t\t\targs.push( arguments[ i ] );\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tS = args2multislice( args );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\t// Search for the first offending value...\n\t\t\tfor ( i = 0; i < args.length; i++ ) {\n\t\t\t\ttry {\n\t\t\t\t\tnew MultiSlice( args[ i ] ); // eslint-disable-line no-new\n\t\t\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Slice arguments must be either a Slice, integer, null, or undefined. Value: `%s`.', String( args[ i ] ) ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn base( x, y, S, opts.strict );\n}\n\n\n// EXPORTS //\n\nexport default sliceAssign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isUndefined from '@stdlib/assert/is-undefined';\nimport isSlice from '@stdlib/assert/is-slice';\nimport isNull from '@stdlib/assert/is-null';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport Slice from '@stdlib/slice/ctor';\nimport base from './../../base/slice-dimension';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a read-only view of an input ndarray when sliced along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {(Slice|integer|null|undefined)} s - slice argument\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be either a Slice, integer, null, or undefined\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import Slice from '@stdlib/slice/ctor';\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new Slice( null, null, -1 );\n* // returns <Slice>\n*\n* var y = sliceDimension( x, 0, s );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 5.0, 6.0 ], [ 3.0, 4.0 ], [ 1.0, 2.0 ] ]\n*/\nfunction sliceDimension( x, dim, s ) {\n\tvar options;\n\tvar slice;\n\tvar opts;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\tif ( isInteger( s ) || isSlice( s ) ) {\n\t\tslice = s;\n\t} else if ( isNull( s ) || isUndefined( s ) ) {\n\t\tslice = new Slice();\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either a Slice, integer, null, or undefined. Value: `%s`.', s ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\toptions = arguments[ 3 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t}\n\treturn base( x, dim, slice, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimension;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport base from './../../base/slice-dimension-from';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a read-only shifted view of an input ndarray along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {integer} start - starting index (inclusive)\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceDimensionFrom( x, 0, 1 );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*/\nfunction sliceDimensionFrom( x, dim, start ) {\n\tvar options;\n\tvar opts;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\tif ( !isInteger( start ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', start ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\toptions = arguments[ 3 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t}\n\treturn base( x, dim, start, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimensionFrom;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport base from './../../base/slice-dimension-to';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns a read-only truncated view of an input ndarray along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {integer} stop - ending index (exclusive)\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceDimensionTo( x, 0, 2 );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction sliceDimensionTo( x, dim, stop ) {\n\tvar options;\n\tvar opts;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\tif ( !isInteger( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', stop ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\toptions = arguments[ 3 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t}\n\treturn base( x, dim, stop, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimensionTo;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isArrayLikeObject from '@stdlib/assert/is-array-like-object';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isNull from '@stdlib/assert/is-null';\nimport isUndefined from '@stdlib/assert/is-undefined';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport getShape from './../../shape';\nimport base from './../../base/slice-from';\nimport format from '@stdlib/string/format';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether a starting index argument is invalid.\n*\n* @private\n* @param {*} index - index argument\n* @returns {boolean} boolean indicating if an argument is invalid\n*\n* @example\n* var bool = isInvalidIndex( 4 );\n* // returns false\n*\n* @example\n* var bool = isInvalidIndex( {} );\n* // returns true\n*/\nfunction isInvalidIndex( index ) {\n\treturn !(\n\t\tisNumber( index ) ||\n\t\tisNull( index ) ||\n\t\tisUndefined( index )\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Returns a read-only shifted view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {...(null|integer|undefined)} start - starting indices (inclusive)\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} must provide valid starting indices\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} number of starting indices must match the number of array dimensions\n* @throws {RangeError} index exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceFrom( x, 1, null );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*/\nfunction sliceFrom( x, start ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar sh;\n\tvar i;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isPlainObject( arguments[ nargs-1 ] ) ) {\n\t\tnargs -= 1;\n\t\toptions = arguments[ nargs ];\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t\tsh = getShape( x );\n\t\tif ( nargs === 1 && sh.length > 0 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Number of indices does not match the number of array dimensions. Array shape: (%s). Number of indices: %u.', sh.join( ',' ), 0 ) );\n\t\t}\n\t}\n\tif ( isArrayLikeObject( start ) ) {\n\t\targs = start;\n\t\tif ( nargs > 2 ) {\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t} else {\n\t\targs = [];\n\t\tfor ( i = 1; i < nargs; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tfor ( i = 0; i < args.length; i++ ) {\n\t\tif ( isInvalidIndex( args[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Each index argument must be either an integer, null, or undefined. Value: `%s`.', String( args[ i ] ) ) );\n\t\t}\n\t}\n\treturn base( x, args, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default sliceFrom;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isArrayLikeObject from '@stdlib/assert/is-array-like-object';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isNull from '@stdlib/assert/is-null';\nimport isUndefined from '@stdlib/assert/is-undefined';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport getShape from './../../shape';\nimport base from './../../base/slice-to';\nimport format from '@stdlib/string/format';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an ending index argument is invalid.\n*\n* @private\n* @param {*} index - index argument\n* @returns {boolean} boolean indicating if an argument is invalid\n*\n* @example\n* var bool = isInvalidIndex( 4 );\n* // returns false\n*\n* @example\n* var bool = isInvalidIndex( {} );\n* // returns true\n*/\nfunction isInvalidIndex( index ) {\n\treturn !(\n\t\tisNumber( index ) ||\n\t\tisNull( index ) ||\n\t\tisUndefined( index )\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Returns a read-only truncated view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {...(null|integer|undefined)} stop - ending indices (exclusive)\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} must provide valid ending indices\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} number of ending indices must match the number of array dimensions\n* @throws {RangeError} index exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray/ctor';\n* import ndarray2array from '@stdlib/ndarray/to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceTo( x, 2, null );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction sliceTo( x, stop ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar sh;\n\tvar i;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isPlainObject( arguments[ nargs-1 ] ) ) {\n\t\tnargs -= 1;\n\t\toptions = arguments[ nargs ];\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t\tsh = getShape( x );\n\t\tif ( nargs === 1 && sh.length > 0 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Number of indices does not match the number of array dimensions. Array shape: (%s). Number of indices: %u.', sh.join( ',' ), 0 ) );\n\t\t}\n\t}\n\tif ( isArrayLikeObject( stop ) ) {\n\t\targs = stop;\n\t\tif ( nargs > 2 ) {\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t} else {\n\t\targs = [];\n\t\tfor ( i = 1; i < nargs; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tfor ( i = 0; i < args.length; i++ ) {\n\t\tif ( isInvalidIndex( args[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Each index argument must be either an integer, null, or undefined. Value: `%s`.', String( args[ i ] ) ) );\n\t\t}\n\t}\n\treturn base( x, args, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default sliceTo;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/assert/is-integer';\nimport isCollection from '@stdlib/assert/is-collection';\nimport getStride from './../../base/stride';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Returns the stride along a specified dimension for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {integer} dim - dimension index\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {integer} stride\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var out = stride( zeros( [ 3, 3, 3 ] ), 0 );\n* // returns 9\n*/\nfunction stride( x, dim ) {\n\tvar st;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null || !isCollection( x.shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\tst = getStride( x, dim );\n\tif ( isInteger( st ) ) {\n\t\treturn st;\n\t}\n\t// As ndarrays must have integer-valued strides, if the returned \"stride\" value is not integer-valued, assume we haven't been provided an ndarray:\n\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n}\n\n\n// EXPORTS //\n\nexport default stride;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport isArray from '@stdlib/assert/is-array';\nimport isOrder from './../../base/assert/is-order';\nimport isIndexMode from './../../base/assert/is-index-mode';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(StringArray|string)} [options.mode] - specifies how to handle subscripts which exceed array dimensions\n* @param {string} [options.order] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'throw',\n*     'order': 'column-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isArray( opts.mode ) ) {\n\t\t\topts.mode = [ opts.mode ];\n\t\t} else if ( opts.mode.length === 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option cannot be an empty array.', 'mode' ) );\n\t\t}\n\t\tfor ( i = 0; i < opts.mode.length; i++ ) {\n\t\t\tif ( !isIndexMode( opts.mode[ i ] ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.', 'mode', opts.mode[ i ] ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized order. Option: `%s`.', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert/is-nonnegative-integer-array';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport shape2strides from './../../base/shape2strides';\nimport getIndex from './../../base/sub2ind';\nimport format from '@stdlib/string/format';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Converts subscripts to a linear index.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a subscript exceeds array dimensions.\n*     -   **normalize**: normalize negative subscripts and throw an error when a subscript exceeds array dimensions.\n*     -   **wrap**: wrap around subscripts exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set subscripts exceeding array dimensions to either `0` (minimum index) or the maximum index along a particular dimension.\n*\n* -   If provided fewer modes than dimensions, the function recycles modes using modulo arithmetic.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {...integer} i - subscripts\n* @param {Options} [options] - function options\n* @param {(StringArray|string)} [options.mode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @throws {TypeError} first argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} subscripts must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide subscripts which do not exceed array dimensions\n* @throws {RangeError} number of subscripts much match the number of dimensions\n* @returns {NonNegativeInteger} linear index\n*\n* @example\n* var i = sub2ind( [ 3, 3, 3 ], 1, 2, 2 );\n* // returns 17\n*/\nfunction sub2ind() {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar len;\n\tvar i;\n\tvar j;\n\n\tshape = arguments[ 0 ];\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tlen = arguments.length;\n\tndims = shape.length;\n\n\topts = {};\n\topts.mode = defaults.mode.slice();\n\topts.order = defaults.order;\n\n\tif ( len > ndims+1 ) {\n\t\tj = len - 1;\n\t\toptions = arguments[ j ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tj = len;\n\t}\n\ti = 1;\n\tif ( j-i !== ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of provided subscripts must match the number of dimensions. ndims: `%u`. Number of subscripts: `%u`.', ndims, j-i ) );\n\t}\n\targs = new Array( ndims+4 );\n\targs[ 0 ] = shape;\n\targs[ 1 ] = shape2strides( shape, opts.order );\n\targs[ 2 ] = 0; // strides are positive, so offset is always zero\n\tfor ( ; i < j; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Subscripts must be integer valued. Argument: `%u`. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t\targs[ i+2 ] = arguments[ i ];\n\t}\n\targs[ i+2 ] = opts.mode; // i+2 == args.length-1\n\treturn getIndex.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default sub2ind;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport isArrayLike from '@stdlib/assert/is-array-like';\nimport shape2strides from './../../base/shape2strides';\nimport strides2offset from './../../base/strides2offset';\nimport buffer from './../../base/buffer';\nimport numel from './../../base/numel';\nimport ndarray from './../../ctor';\nimport defaults from './../../defaults';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar DTYPE = defaults.get( 'dtypes.default' );\nvar ORDER = defaults.get( 'order' );\n\n\n// MAIN //\n\n/**\n* Creates a zero-filled ndarray having a specified shape and data type.\n*\n* @param {(NonNegativeIntegerArray|NonNegativeInteger)} shape - array shape\n* @param {Options} [options] - options\n* @param {string} [options.dtype='float64'] - data type\n* @param {string} [options.order='row-major'] - array order\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} first argument must be either a nonnegative integer or an array of nonnegative integers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} `dtype` option must be a recognized data type\n* @throws {TypeError} `order` option must be a recognized array order\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} ndarray\n*\n* @example\n* var arr = zeros( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var sh = arr.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = arr.dtype;\n* // returns 'float64'\n*/\nfunction zeros( shape ) {\n\tvar options;\n\tvar dtype;\n\tvar order;\n\tvar ndims;\n\tvar opts;\n\tvar buf;\n\tvar len;\n\tvar st;\n\tvar sh;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\tdtype = options.dtype;\n\t\t} else {\n\t\t\tdtype = DTYPE;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\torder = options.order;\n\t\t} else {\n\t\t\torder = ORDER;\n\t\t}\n\t\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\t\topts.mode = options.mode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\t\topts.submode = options.submode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\topts.readonly = options.readonly;\n\t\t}\n\t} else {\n\t\tdtype = DTYPE;\n\t\torder = ORDER;\n\t}\n\tif ( typeof shape === 'number' ) {\n\t\tsh = [ shape ];\n\t} else if ( isArrayLike( shape ) ) {\n\t\tsh = shape;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a nonnegative integer or an array of nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tndims = sh.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( sh );\n\t\tif ( len !== len || len < 0 ) {\n\t\t\t// We should only get here if we've been provided an invalid shape (e.g., an array containing negative integers, etc)...\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a nonnegative integer or an array of nonnegative integers. Value: `%s`.', shape ) );\n\t\t}\n\t\tst = shape2strides( sh, order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tbuf = buffer( dtype, len );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized data type. Option: `%s`.', 'dtype', dtype ) );\n\t}\n\treturn new ndarray( dtype, buf, sh, st, strides2offset( sh, st ), order, opts ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert/is-ndarray-like';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert/is-nonnegative-integer-array';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport shape2strides from './../../base/shape2strides';\nimport strides2offset from './../../base/strides2offset';\nimport buffer from './../../base/buffer';\nimport numel from './../../base/numel';\nimport getDType from './../../dtype';\nimport getShape from './../../shape';\nimport getOrder from './../../order';\nimport ndarray from './../../ctor';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Creates a zero-filled ndarray having the same shape and data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type (overrides the input array's inferred data type)\n* @param {string} [options.order] - specifies whether the output array should be 'row-major' (C-style) or 'column-major' (Fortran-style) (overrides the input array's inferred order)\n* @param {(NonNegativeIntegerArray|NonNegativeInteger)} [options.shape] - output array shape (overrides the input array's inferred shape)\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} first argument must have a recognized data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} `dtype` option must be a supported ndarray data type\n* @throws {TypeError} `order` option must be a supported order\n* @throws {TypeError} `shape` option must be either a nonnegative integer or an array of nonnegative integers\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} ndarray\n*\n* @example\n* import zeros from '@stdlib/ndarray/zeros';\n*\n* var x = zeros( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var y = zerosLike( x );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = y.dtype;\n* // returns 'float64'\n*/\nfunction zerosLike( x ) {\n\tvar options;\n\tvar dtype;\n\tvar order;\n\tvar ndims;\n\tvar opts;\n\tvar buf;\n\tvar len;\n\tvar st;\n\tvar sh;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\tdtype = options.dtype;\n\t\t} else {\n\t\t\tdtype = getDType( x );\n\t\t}\n\t\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\t\tsh = options.shape;\n\t\t\tif ( typeof sh === 'number' ) {\n\t\t\t\tsh = [ sh ];\n\t\t\t}\n\t\t\tif ( !isNonNegativeIntegerArray( sh ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer or an array of nonnegative integers. Option: `%s`.', 'shape', sh ) );\n\t\t\t}\n\t\t} else {\n\t\t\tsh = getShape( x );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\torder = options.order;\n\t\t} else {\n\t\t\torder = getOrder( x );\n\t\t}\n\t\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\t\topts.mode = options.mode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\t\topts.submode = options.submode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\topts.readonly = options.readonly;\n\t\t}\n\t} else {\n\t\tdtype = getDType( x );\n\t\tsh = getShape( x );\n\t\torder = getOrder( x );\n\t}\n\tndims = sh.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( sh );\n\t\tst = shape2strides( sh, order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tbuf = buffer( dtype, len );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a recognized data type. Value: `%s`.', dtype ) );\n\t}\n\treturn new ndarray( dtype, buf, sh, st, strides2offset( sh, st ), order, opts ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default zerosLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name array\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/array}\n*/\nimport array from './../array';\nsetReadOnly( ns, 'array', array );\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/ndarray/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name broadcastArray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/broadcast-array}\n*/\nimport broadcastArray from './../broadcast-array';\nsetReadOnly( ns, 'broadcastArray', broadcastArray );\n\n/**\n* @name ndarrayCastingModes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/casting-modes}\n*/\nimport ndarrayCastingModes from './../casting-modes';\nsetReadOnly( ns, 'ndarrayCastingModes', ndarrayCastingModes );\n\n/**\n* @name ndarray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/ctor}\n*/\nimport ndarray from './../ctor';\nsetReadOnly( ns, 'ndarray', ndarray );\n\n/**\n* @name ndarrayDataBuffer\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/data-buffer}\n*/\nimport ndarrayDataBuffer from './../data-buffer';\nsetReadOnly( ns, 'ndarrayDataBuffer', ndarrayDataBuffer );\n\n/**\n* @name defaults\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/defaults}\n*/\nimport defaults from './../defaults';\nsetReadOnly( ns, 'defaults', defaults );\n\n/**\n* @name dispatch\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/dispatch}\n*/\nimport dispatch from './../dispatch';\nsetReadOnly( ns, 'dispatch', dispatch );\n\n/**\n* @name ndarrayDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/dtype}\n*/\nimport ndarrayDataType from './../dtype';\nsetReadOnly( ns, 'ndarrayDataType', ndarrayDataType );\n\n/**\n* @name ndarrayDataTypes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/dtypes}\n*/\nimport ndarrayDataTypes from './../dtypes';\nsetReadOnly( ns, 'ndarrayDataTypes', ndarrayDataTypes );\n\n/**\n* @name ndempty\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/empty}\n*/\nimport ndempty from './../empty';\nsetReadOnly( ns, 'ndempty', ndempty );\n\n/**\n* @name ndemptyLike\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/empty-like}\n*/\nimport ndemptyLike from './../empty-like';\nsetReadOnly( ns, 'ndemptyLike', ndemptyLike );\n\n/**\n* @name FancyArray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/fancy}\n*/\nimport FancyArray from './../fancy';\nsetReadOnly( ns, 'FancyArray', FancyArray );\n\n/**\n* @name scalar2ndarray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/from-scalar}\n*/\nimport scalar2ndarray from './../from-scalar';\nsetReadOnly( ns, 'scalar2ndarray', scalar2ndarray );\n\n/**\n* @name ind2sub\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/ind2sub}\n*/\nimport ind2sub from './../ind2sub';\nsetReadOnly( ns, 'ind2sub', ind2sub );\n\n/**\n* @name ndarrayIndexModes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/index-modes}\n*/\nimport ndarrayIndexModes from './../index-modes';\nsetReadOnly( ns, 'ndarrayIndexModes', ndarrayIndexModes );\n\n/**\n* @name iter\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/ndarray/iter}\n*/\nimport iter from './../iter';\nsetReadOnly( ns, 'iter', iter );\n\n/**\n* @name maybeBroadcastArray\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/maybe-broadcast-array}\n*/\nimport maybeBroadcastArray from './../maybe-broadcast-array';\nsetReadOnly( ns, 'maybeBroadcastArray', maybeBroadcastArray );\n\n/**\n* @name ndarrayMinDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/min-dtype}\n*/\nimport ndarrayMinDataType from './../min-dtype';\nsetReadOnly( ns, 'ndarrayMinDataType', ndarrayMinDataType );\n\n/**\n* @name ndarrayMostlySafeCasts\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/mostly-safe-casts}\n*/\nimport ndarrayMostlySafeCasts from './../mostly-safe-casts';\nsetReadOnly( ns, 'ndarrayMostlySafeCasts', ndarrayMostlySafeCasts );\n\n/**\n* @name ndims\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/ndims}\n*/\nimport ndims from './../ndims';\nsetReadOnly( ns, 'ndims', ndims );\n\n/**\n* @name ndarrayNextDataType\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/next-dtype}\n*/\nimport ndarrayNextDataType from './../next-dtype';\nsetReadOnly( ns, 'ndarrayNextDataType', ndarrayNextDataType );\n\n/**\n* @name numel\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/numel}\n*/\nimport numel from './../numel';\nsetReadOnly( ns, 'numel', numel );\n\n/**\n* @name ndarrayOffset\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/offset}\n*/\nimport ndarrayOffset from './../offset';\nsetReadOnly( ns, 'ndarrayOffset', ndarrayOffset );\n\n/**\n* @name ndarrayOrder\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/order}\n*/\nimport ndarrayOrder from './../order';\nsetReadOnly( ns, 'ndarrayOrder', ndarrayOrder );\n\n/**\n* @name ndarrayOrders\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/orders}\n*/\nimport ndarrayOrders from './../orders';\nsetReadOnly( ns, 'ndarrayOrders', ndarrayOrders );\n\n/**\n* @name ndarrayOutputDataTypePolicies\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/output-dtype-policies}\n*/\nimport ndarrayOutputDataTypePolicies from './../output-dtype-policies';\nsetReadOnly( ns, 'ndarrayOutputDataTypePolicies', ndarrayOutputDataTypePolicies );\n\n/**\n* @name ndarrayPromotionRules\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/promotion-rules}\n*/\nimport ndarrayPromotionRules from './../promotion-rules';\nsetReadOnly( ns, 'ndarrayPromotionRules', ndarrayPromotionRules );\n\n/**\n* @name ndarraySafeCasts\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/safe-casts}\n*/\nimport ndarraySafeCasts from './../safe-casts';\nsetReadOnly( ns, 'ndarraySafeCasts', ndarraySafeCasts );\n\n/**\n* @name ndarraySameKindCasts\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/same-kind-casts}\n*/\nimport ndarraySameKindCasts from './../same-kind-casts';\nsetReadOnly( ns, 'ndarraySameKindCasts', ndarraySameKindCasts );\n\n/**\n* @name ndarrayShape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/shape}\n*/\nimport ndarrayShape from './../shape';\nsetReadOnly( ns, 'ndarrayShape', ndarrayShape );\n\n/**\n* @name ndslice\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/slice}\n*/\nimport ndslice from './../slice';\nsetReadOnly( ns, 'ndslice', ndslice );\n\n/**\n* @name ndsliceAssign\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/slice-assign}\n*/\nimport ndsliceAssign from './../slice-assign';\nsetReadOnly( ns, 'ndsliceAssign', ndsliceAssign );\n\n/**\n* @name ndsliceDimension\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/slice-dimension}\n*/\nimport ndsliceDimension from './../slice-dimension';\nsetReadOnly( ns, 'ndsliceDimension', ndsliceDimension );\n\n/**\n* @name ndsliceDimensionFrom\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/slice-dimension-from}\n*/\nimport ndsliceDimensionFrom from './../slice-dimension-from';\nsetReadOnly( ns, 'ndsliceDimensionFrom', ndsliceDimensionFrom );\n\n/**\n* @name ndsliceDimensionTo\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/slice-dimension-to}\n*/\nimport ndsliceDimensionTo from './../slice-dimension-to';\nsetReadOnly( ns, 'ndsliceDimensionTo', ndsliceDimensionTo );\n\n/**\n* @name ndsliceFrom\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/slice-from}\n*/\nimport ndsliceFrom from './../slice-from';\nsetReadOnly( ns, 'ndsliceFrom', ndsliceFrom );\n\n/**\n* @name ndsliceTo\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/slice-to}\n*/\nimport ndsliceTo from './../slice-to';\nsetReadOnly( ns, 'ndsliceTo', ndsliceTo );\n\n/**\n* @name ndarrayStride\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/stride}\n*/\nimport ndarrayStride from './../stride';\nsetReadOnly( ns, 'ndarrayStride', ndarrayStride );\n\n/**\n* @name ndarrayStrides\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/strides}\n*/\nimport ndarrayStrides from './../strides';\nsetReadOnly( ns, 'ndarrayStrides', ndarrayStrides );\n\n/**\n* @name sub2ind\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/sub2ind}\n*/\nimport sub2ind from './../sub2ind';\nsetReadOnly( ns, 'sub2ind', sub2ind );\n\n/**\n* @name ndarray2array\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/to-array}\n*/\nimport ndarray2array from './../to-array';\nsetReadOnly( ns, 'ndarray2array', ndarray2array );\n\n/**\n* @name ndzeros\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/zeros}\n*/\nimport ndzeros from './../zeros';\nsetReadOnly( ns, 'ndzeros', ndzeros );\n\n/**\n* @name ndzerosLike\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/ndarray/zeros-like}\n*/\nimport ndzerosLike from './../zeros-like';\nsetReadOnly( ns, 'ndzerosLike', ndzerosLike );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["shape2strides","shape","order","out","s","i","length","push","columnmajor","ndims","rowmajor","strides2offset","strides","offset","strides2order","column","row","s1","s2","abs","numel","n","setReadOnly","main","orders","ORDERS","slice","enumerated","enumeration","len","isOrder","v","dtypes","arguments","DTYPES","all","bool","int8","uint8","uint8c","int16","uint16","int32","uint32","int64","uint64","float32","float64","complex64","complex128","binary","generic","notype","userdefined_type","target","source","keys","k","objectKeys","assign","isDataType","contains","minmaxViewBufferIndex","min","max","isBufferLengthCompatible","buf","minmax","bytesPerElement","dtype","BYTES_PER_ELEMENT","iterationOrder","cnt","isColumnMajorContiguous","contiguous","isRowMajorContiguous","CTORS","modes","MODES","throw","clamp","wrap","normalize","ndarray","buffer","nbytes","ord","this","_byteLength","_bytesPerElement","_buffer","_dtype","_length","_ndims","_offset","_order","_shape","_strides","_accessors","Boolean","get","set","_iterationOrder","isContiguous","_flags","ROW_MAJOR_CONTIGUOUS","COLUMN_MAJOR_CONTIGUOUS","READONLY","__meta_dataview__","defaults","default","numeric","real","floating_point","real_floating_point","complex_floating_point","integer","signed_integer","unsigned_integer","casting","index_mode","setReadOnlyAccessor","prototype","flags","idx","ind","ctor","str","dt","iget","imag","replace","join","type","data","hasBigIntSupport","flgs","sh","st","sm","m","o","N","M","_mode","_submode","byteLength","DataView","ArrayBuffer","setInt8","setInt16","IS_LITTLE_ENDIAN","setBigInt64","BigInt","setInt32","bytes","Uint8Array","float64ToInt64Bytes","DEFAULTS","HASH","clampIndex","wrapIndex","mp1","normalizeIndex","name","isIndexMode","TABLE","index","RangeError","format","mode","TypeError","base","parent","iset","copy","arr","validate","opts","options","isObject","hasOwnProp","submode","isArray","readonly","isBoolean","INDEX_MODE","err","isCollection","isFunction","isNonNegativeIntegerArray","isIntegerArray","isNonNegativeInteger","Error","call","inherit","isInteger","getIndex","none","equiv","safe","unsafe","isCastingMode","hash","objectInverse","duplicates","enum2str","ENUM","str2enum","resolve","t","generateFullTable","ntypes","tmp","dt1","dt2","j","SAFE_CASTS","generateTable","safeCasts","isSafeCast","from","to","CASTS","mostlySafeCasts","casts","isMostlySafeCast","SAME_KIND_CASTS","sameKindCasts","isSameKindCast","isAllowedCast","ctors","Buffer","Float64Array","Float32Array","Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8ClampedArray","Complex64Array","Complex128Array","table","size","zeros","allocUnsafe","bufferCtors","typedarray","Object","NTYPES","value","isBuffer","ctor2dtype","constructorName","x","d","isArrayLikeObject","PINF","castBuffer","copyView","getDType","getData","getShape","getStrides","getOffset","getOrder","fcn","arraylike2object","accessorProtocol","accessors","castReturn","complexCtors","typed","expandShape","ndmin","expandStrides","settings","flatten","array","btype","nopts","osh","FLG","isndarrayLike","getBufferDType","arrayShape","createBuffer","isColumnMajor","isSingleSegmentCompatible","isComplexFloatingPointDataType","isFloatingPointDataType","isIntegerDataType","isNumericDataType","isReadOnly","isRealDataType","isRealFloatingPointDataType","isRowMajor","isSignedIntegerDataType","isUnsignedIntegerDataType","ns","copyIndexed","isAllowedDataTypeCast","isMostlySafeDataTypeCast","isSafeDataTypeCast","isSameKindDataTypeCast","ndarraylike2object","xbuf","isAccessorArray","ref","accessorGetter","accessorSetter","getter","setter","loopOrder","sx","sy","zeroTo","y","avx","ix","iy","jx","jy","vx","vy","ux","sort2ins","take","unaryBlockSize","dtypeX","dtypeY","nbx","nby","vind2bind","ASSIGN","ybuf","dx0","dy0","S0","i0","dx1","dy1","S1","i1","dx2","dy2","S2","i2","dx3","dy3","S3","i3","dx4","dy4","S4","i4","dx5","dy5","S5","i5","dx6","dy6","S6","i6","dx7","dy7","S7","i7","dx8","dy8","S8","i8","dx9","dy9","S9","i9","ACCESSOR_ASSIGN","BLOCKED_ASSIGN","bsize","ox1","oy1","s0","ox","oy","j0","j1","blockSize","ox2","oy2","j2","ox3","oy3","s3","j3","ox4","oy4","s4","j4","ox5","oy5","s5","j5","ox6","oy6","s6","j6","ox7","oy7","s7","j7","ox8","oy8","s8","j8","ox9","oy9","s9","j9","BLOCKED_ACCESSOR_ASSIGN","MAX_DIMS","arrays","xmmv","ymmv","shx","shy","iox","ioy","ndarray2object","isComplexDataType","ordx","ordy","accessorassignnd","assignnd","broadcastArray","dim","dtypeChar","float16","bfloat16","float128","int128","int256","uint128","uint256","dtypes2signatures","nin","nout","strict","writable","sdims","constructor","nonreducedDimensions","normalizeMultiSlice","code","sliceShape","empty","start","sliceStart","rdims","step","slice2strides","reverseDimension","args","filled","Slice","args2multislice","ind2sub","trunc","getSubscripts","nextCartesianIndex","nullaryBlockSize","NULLARY","ACCESSOR_NULLARY","BLOCKED_NULLARY","BLOCKED_ACCESSOR_NULLARY","policies","POLICIES","same","promoted","policy","__array_meta_dataview__","serializeMetaData","sliceAssign","view","xdt","ydt","broadcast","sliceDimension","sliceDimensionFrom","sliceDimensionTo","stop","sliceFrom","isNumber","sliceTo","stride","sub2ind","nmodes","recurse","obj","item","ndarray2array","UNARY","ACCESSOR_UNARY","BLOCKED_UNARY","BLOCKED_ACCESSOR_UNARY","clbk","thisArg","POLICY_TABLE","DEFAULT_DTYPE","indexOfTypes","strideX1","strideX2","offsetX","strideY","offsetY","dispatch","fcns","types","nargs","narrays","nfcns","isFunctionArray","isPositiveInteger","resolveEnum","types2enums","argc","f","assert","sz","oz","dtypeZ","nbz","test","shapes","n1","n2","bufferDataType","ch","dtypeEnum2Str","dtypeResolveEnum","dtypeResolveStr","dtypeStr2Enum","emptyArray","axis","MultiSlice","meta","accessornullarynd","nullarynd","nullaryLoopOrder","outputPolicyEnum2Str","outputPolicyStr2Enum","accessorunarynd","unarynd","unaryLoopOrder","p","DTYPE","ORDER","isPlainObject","isArrayLike","emptyLike","RE_INTEGER","RE_SUBSEQ","prop2slice","property","prop","trim","str2slice","str2multislice","parseInt","seq2multislice","split","sargs2multislice","hasProperty","propertiesIn","errMessage","msg","errConstructor","isRangeError","isTypeError","isSyntaxError","SyntaxError","factory","receiver","apply","getValue","message","getSlice","minFloatDataType","NINF","FLOAT32_MIN_SAFE_INTEGER","FLOAT32_MAX_SAFE_INTEGER","FLOAT32_SMALLEST_SUBNORMAL","minDataType","isComplexLike","re","im","isNegativeZero","INT8_MIN","INT16_MIN","INT32_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","scalar2ndarray","flg","setValue","vdt","isFloatingDataType","INT8_MAX","INT16_MAX","INT32_MAX","complexDataType","setSlice","get0d","prop2slice0d","set0d","get1d","prop2slice1d","set1d","getnd","prop2slicend","setnd","FancyArray","handlers","Proxy","console","warn","toArray","dest","maybeBroadcastArray","nditerColumnEntries","iter","next","end","iteratorSymbol","indices","done","nditerColumns","nditerEntries","nditerIndices","nditerMatrices","nditerMatrixEntries","nditerRowEntries","nditerRows","nditer2arrayEach","iterator","isIteratorLike","nditerValues","NEXT_DTYPES","nextDataType","resolveStr","PROMOTION_RULES","promotionRules","dtype1","dtype2","S","isMultiSlice","String","isSlice","isNull","isUndefined","isInvalidIndex","getStride","zerosLike","ndarrayCastingModes","ndarrayDataBuffer","ndarrayDataType","ndarrayDataTypes","ndempty","ndemptyLike","ndarrayIndexModes","ndarrayMinDataType","ndarrayMostlySafeCasts","ndarrayNextDataType","ndarrayOffset","ndarrayOrder","ndarrayOrders","ndarrayOutputDataTypePolicies","ndarrayPromotionRules","ndarraySafeCasts","ndarraySameKindCasts","ndarrayShape","ndslice","ndsliceAssign","ndsliceDimension","ndsliceDimensionFrom","ndsliceDimensionTo","ndsliceFrom","ndsliceTo","ndarrayStride","ndarrayStrides","ndzeros","ndzerosLike"],"mappings":"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"}